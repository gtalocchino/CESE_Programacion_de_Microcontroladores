
TP_PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08008550  08008550  00018550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b4c  08008b4c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b54  08008b54  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000000e0  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010eba  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b51  00000000  00000000  000310ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  00033c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000868  00000000  00000000  000345a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002921e  00000000  00000000  00034e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124f6  00000000  00000000  0005e02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef2c1  00000000  00000000  00070524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015f7e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b30  00000000  00000000  0015f838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008538 	.word	0x08008538

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08008538 	.word	0x08008538

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <DELAY_init>:

#include "delay.h"


void DELAY_init(delay_t *delay, uint32_t duration)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
   if (delay == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <DELAY_init+0x1e>
   {
      return;
   }

   delay->running = false;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	721a      	strb	r2, [r3, #8]
   delay->duration = duration;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e000      	b.n	800102c <DELAY_init+0x20>
      return;
 800102a:	bf00      	nop
}
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <DELAY_read>:

bool DELAY_read(delay_t *delay)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   bool retval = false;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]

   if (delay->running)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7a1b      	ldrb	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <DELAY_read+0x38>
   {
      if ((BSP_get_timer() - delay->start) > delay->duration)
 800104a:	f000 fa3b 	bl	80014c4 <BSP_get_timer>
 800104e:	4602      	mov	r2, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d90f      	bls.n	800107e <DELAY_read+0x48>
      {
         /* Delay time has been elapsed. Restarting delay and returning true. */
         delay->start = BSP_get_timer();
 800105e:	f000 fa31 	bl	80014c4 <BSP_get_timer>
 8001062:	4602      	mov	r2, r0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	605a      	str	r2, [r3, #4]
         retval = true;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e007      	b.n	800107e <DELAY_read+0x48>
      }
   }
   else
   {
      /* Delay is not running. */
      delay->running = true;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	721a      	strb	r2, [r3, #8]
      delay->start = BSP_get_timer();
 8001074:	f000 fa26 	bl	80014c4 <BSP_get_timer>
 8001078:	4602      	mov	r2, r0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]
   }

   return retval;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <FSM_init>:
static float cooler_on;
static float cooler_off;


void FSM_init(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
   state = STATE_IDLE;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <FSM_init+0x14>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20000200 	.word	0x20000200

080010a0 <FSM_update>:

void FSM_update(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0a6      	sub	sp, #152	; 0x98
 80010a4:	af02      	add	r7, sp, #8
   /* Obtaining the temperature value. */
   float temp;
   bsp_status_t status = SENSOR_get_measure(&temp);
 80010a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fb12 	bl	80016d4 <SENSOR_get_measure>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

   if (status != BSP_OK)
 80010b6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 8090 	bne.w	80011e0 <FSM_update+0x140>
   {
      return;
   }

   uint8_t *msg = NULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

   switch (state) {
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <FSM_update+0x148>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d045      	beq.n	800115a <FSM_update+0xba>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	dc59      	bgt.n	8001186 <FSM_update+0xe6>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <FSM_update+0x3c>
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d029      	beq.n	800112e <FSM_update+0x8e>
 80010da:	e054      	b.n	8001186 <FSM_update+0xe6>
   case STATE_IDLE:
      if (temp > cooler_on)
 80010dc:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80010e0:	4b42      	ldr	r3, [pc, #264]	; (80011ec <FSM_update+0x14c>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd08      	ble.n	8001102 <FSM_update+0x62>
      {
         msg = "status> cooler on, temp: %+06.2fC\n";
 80010f0:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <FSM_update+0x150>)
 80010f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         ACT_turn_on_cooler();
 80010f6:	f000 f98b 	bl	8001410 <ACT_turn_on_cooler>
         state = STATE_COOLING;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <FSM_update+0x148>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	701a      	strb	r2, [r3, #0]
      {
         ACT_turn_off_heater();
         ACT_turn_off_cooler();
      }

      break;
 8001100:	e047      	b.n	8001192 <FSM_update+0xf2>
      else if (temp < heater_on)
 8001102:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <FSM_update+0x154>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d506      	bpl.n	8001124 <FSM_update+0x84>
         msg = "status> heater on, temp: %+06.2fC\n";
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <FSM_update+0x158>)
 8001118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         state = STATE_HEATING;
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <FSM_update+0x148>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
      break;
 8001122:	e036      	b.n	8001192 <FSM_update+0xf2>
         ACT_turn_off_heater();
 8001124:	f000 f968 	bl	80013f8 <ACT_turn_off_heater>
         ACT_turn_off_cooler();
 8001128:	f000 f97e 	bl	8001428 <ACT_turn_off_cooler>
      break;
 800112c:	e031      	b.n	8001192 <FSM_update+0xf2>
   case STATE_HEATING:
      if (temp > heater_off)
 800112e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <FSM_update+0x15c>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	dd08      	ble.n	8001154 <FSM_update+0xb4>
      {
         msg = "status> heater off, temp: %+06.2fC\n";
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <FSM_update+0x160>)
 8001144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         ACT_turn_off_heater();
 8001148:	f000 f956 	bl	80013f8 <ACT_turn_off_heater>
         state = STATE_IDLE;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <FSM_update+0x148>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
      else
      {
         ACT_turn_on_heater();
      }

      break;
 8001152:	e01e      	b.n	8001192 <FSM_update+0xf2>
         ACT_turn_on_heater();
 8001154:	f000 f944 	bl	80013e0 <ACT_turn_on_heater>
      break;
 8001158:	e01b      	b.n	8001192 <FSM_update+0xf2>
   case STATE_COOLING:
      if (temp < cooler_off)
 800115a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <FSM_update+0x164>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d508      	bpl.n	8001180 <FSM_update+0xe0>
      {
         msg = "status> cooler off, temp: %+06.2fC\n";
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <FSM_update+0x168>)
 8001170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         ACT_turn_off_heater();
 8001174:	f000 f940 	bl	80013f8 <ACT_turn_off_heater>
         state = STATE_IDLE;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <FSM_update+0x148>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
      else
      {
         ACT_turn_on_cooler();
      }

      break;
 800117e:	e008      	b.n	8001192 <FSM_update+0xf2>
         ACT_turn_on_cooler();
 8001180:	f000 f946 	bl	8001410 <ACT_turn_on_cooler>
      break;
 8001184:	e005      	b.n	8001192 <FSM_update+0xf2>
   default:
      msg = "error> fsm failed, temp: %+06.2fC\n";
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <FSM_update+0x16c>)
 8001188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      FSM_init();
 800118c:	f7ff ff7c 	bl	8001088 <FSM_init>
      break;
 8001190:	bf00      	nop
    * sent by the state machine since the msg variable is
    * initialized with a NULL pointer when declared.
    *
    */

   if (msg != NULL)
 8001192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001196:	2b00      	cmp	r3, #0
 8001198:	d023      	beq.n	80011e2 <FSM_update+0x142>
   {
      uint8_t buffer[128];
      snprintf(buffer, sizeof(buffer), msg, temp);
 800119a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9e2 	bl	8000568 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	1d38      	adds	r0, r7, #4
 80011aa:	e9cd 2300 	strd	r2, r3, [sp]
 80011ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	f002 ffa8 	bl	8004108 <sniprintf>
      status = LOG_send_msg(buffer, strlen(buffer));
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f818 	bl	80001f0 <strlen>
 80011c0:	4602      	mov	r2, r0
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f9d6 	bl	8001578 <LOG_send_msg>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

      if (status != BSP_OK)
 80011d2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FSM_update+0x142>
      {
         BSP_error_handler();
 80011da:	f000 f97a 	bl	80014d2 <BSP_error_handler>
 80011de:	e000      	b.n	80011e2 <FSM_update+0x142>
      return;
 80011e0:	bf00      	nop
      }
   }
}
 80011e2:	3790      	adds	r7, #144	; 0x90
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000200 	.word	0x20000200
 80011ec:	2000020c 	.word	0x2000020c
 80011f0:	08008550 	.word	0x08008550
 80011f4:	20000204 	.word	0x20000204
 80011f8:	08008574 	.word	0x08008574
 80011fc:	20000208 	.word	0x20000208
 8001200:	08008598 	.word	0x08008598
 8001204:	20000210 	.word	0x20000210
 8001208:	080085bc 	.word	0x080085bc
 800120c:	080085e0 	.word	0x080085e0

08001210 <FSM_set_limits>:
   return state;
}


void FSM_set_limits(float h_on, float h_off, float c_on, float c_off)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	ed87 0a03 	vstr	s0, [r7, #12]
 800121a:	edc7 0a02 	vstr	s1, [r7, #8]
 800121e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001222:	edc7 1a00 	vstr	s3, [r7]
   heater_on = h_on;
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <FSM_set_limits+0x3c>)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6013      	str	r3, [r2, #0]
   heater_off = h_off;
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <FSM_set_limits+0x40>)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	6013      	str	r3, [r2, #0]
   cooler_on = c_on;
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <FSM_set_limits+0x44>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6013      	str	r3, [r2, #0]
   cooler_off = c_off;
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <FSM_set_limits+0x48>)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000204 	.word	0x20000204
 8001250:	20000208 	.word	0x20000208
 8001254:	2000020c 	.word	0x2000020c
 8001258:	20000210 	.word	0x20000210

0800125c <parse_input>:

#include "params.h"


void parse_input(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0ac      	sub	sp, #176	; 0xb0
 8001260:	af02      	add	r7, sp, #8
   /* Clearing input buffer. */
   char input_buffer[128];
   memset(input_buffer, 0, sizeof(input_buffer));
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f8c4 	bl	80033f8 <memset>

   float heater_on = 0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
   float heater_off = 0;
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
   float cooler_on = 0;
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
   float cooler_off = 0;
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]

   while (true) {
      /* Waiting for input. */
      uint16_t bytes_received = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	80fb      	strh	r3, [r7, #6]
      bsp_status_t status = SERIAL_get_input(input_buffer, 31, &bytes_received);
 800128c:	1dba      	adds	r2, r7, #6
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	211f      	movs	r1, #31
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fad1 	bl	800183c <SERIAL_get_input>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

      if (status != BSP_OK)
 80012a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <parse_input+0x50>
      {
         BSP_error_handler();
 80012a8:	f000 f913 	bl	80014d2 <BSP_error_handler>
      }

      if (bytes_received != 31)
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	2b1f      	cmp	r3, #31
 80012b0:	d143      	bne.n	800133a <parse_input+0xde>
      {
         continue;
      }

      /* Getting input parameters. */
      uint8_t *fmt = "%f, %f, %f, %f";
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <parse_input+0xe8>)
 80012b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      int32_t retval = sscanf(input_buffer, fmt, &heater_on, &heater_off, &cooler_on, &cooler_off);
 80012b8:	f107 0110 	add.w	r1, r7, #16
 80012bc:	f107 0214 	add.w	r2, r7, #20
 80012c0:	f107 0018 	add.w	r0, r7, #24
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	460b      	mov	r3, r1
 80012d2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80012d6:	f002 ff6b 	bl	80041b0 <siscanf>
 80012da:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

      if (retval == 4)
 80012de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d112      	bne.n	800130c <parse_input+0xb0>
         BSP_error_handler();
      }
   }

   /* Setting up parameters. */
   FSM_set_limits(heater_on, heater_off, cooler_on, cooler_off);
 80012e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80012ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80012f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80012f6:	eef0 1a46 	vmov.f32	s3, s12
 80012fa:	eeb0 1a66 	vmov.f32	s2, s13
 80012fe:	eef0 0a47 	vmov.f32	s1, s14
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	f7ff ff83 	bl	8001210 <FSM_set_limits>
}
 800130a:	e018      	b.n	800133e <parse_input+0xe2>
      uint8_t *msg = "error> wrong input format!\n";
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <parse_input+0xec>)
 800130e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      status = LOG_send_msg(msg, strlen(msg));
 8001312:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001316:	f7fe ff6b 	bl	80001f0 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	4619      	mov	r1, r3
 800131e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001322:	f000 f929 	bl	8001578 <LOG_send_msg>
 8001326:	4603      	mov	r3, r0
 8001328:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
      if (status != BSP_OK)
 800132c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0a9      	beq.n	8001288 <parse_input+0x2c>
         BSP_error_handler();
 8001334:	f000 f8cd 	bl	80014d2 <BSP_error_handler>
 8001338:	e7a6      	b.n	8001288 <parse_input+0x2c>
         continue;
 800133a:	bf00      	nop
   while (true) {
 800133c:	e7a4      	b.n	8001288 <parse_input+0x2c>
}
 800133e:	37a8      	adds	r7, #168	; 0xa8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	08008604 	.word	0x08008604
 8001348:	08008614 	.word	0x08008614

0800134c <ACT_init>:
#define GPIO_HEATER GPIOB
#define GPIO_COOLER GPIOB


bsp_status_t ACT_init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
   __GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <ACT_init+0x8c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <ACT_init+0x8c>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <ACT_init+0x8c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

   GPIO_InitTypeDef GPIO_cooler = {
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
         .Mode = GPIO_MODE_OUTPUT_PP,
         .Pull = GPIO_NOPULL,
         .Speed = GPIO_SPEED_LOW,
   };

   HAL_GPIO_Init(GPIO_COOLER, &GPIO_cooler);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4813      	ldr	r0, [pc, #76]	; (80013dc <ACT_init+0x90>)
 800138e:	f001 f909 	bl	80025a4 <HAL_GPIO_Init>
   HAL_GPIO_WritePin(GPIO_COOLER, PIN_COOLER, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <ACT_init+0x90>)
 8001398:	f001 fab0 	bl	80028fc <HAL_GPIO_WritePin>

   GPIO_InitTypeDef GPIO_heater = {
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	2301      	movs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
         .Mode = GPIO_MODE_OUTPUT_PP,
         .Pull = GPIO_NOPULL,
         .Speed = GPIO_SPEED_LOW,
   };

   HAL_GPIO_Init(GPIO_HEATER, &GPIO_heater);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <ACT_init+0x90>)
 80013be:	f001 f8f1 	bl	80025a4 <HAL_GPIO_Init>
   HAL_GPIO_WritePin(GPIO_HEATER, PIN_HEATER, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <ACT_init+0x90>)
 80013ca:	f001 fa97 	bl	80028fc <HAL_GPIO_WritePin>

   return BSP_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <ACT_turn_on_heater>:

void ACT_turn_on_heater(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIO_HEATER, PIN_HEATER, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <ACT_turn_on_heater+0x14>)
 80013ec:	f001 fa86 	bl	80028fc <HAL_GPIO_WritePin>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40020400 	.word	0x40020400

080013f8 <ACT_turn_off_heater>:

void ACT_turn_off_heater(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIO_HEATER, PIN_HEATER, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001402:	4802      	ldr	r0, [pc, #8]	; (800140c <ACT_turn_off_heater+0x14>)
 8001404:	f001 fa7a 	bl	80028fc <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40020400 	.word	0x40020400

08001410 <ACT_turn_on_cooler>:

void ACT_turn_on_cooler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIO_COOLER, PIN_COOLER, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <ACT_turn_on_cooler+0x14>)
 800141a:	f001 fa6f 	bl	80028fc <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020400 	.word	0x40020400

08001428 <ACT_turn_off_cooler>:

void ACT_turn_off_cooler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIO_COOLER, PIN_COOLER, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <ACT_turn_off_cooler+0x14>)
 8001432:	f001 fa63 	bl	80028fc <HAL_GPIO_WritePin>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020400 	.word	0x40020400

08001440 <BSP_init>:

#include "bsp.h"


bsp_status_t BSP_init()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
   HAL_StatusTypeDef hal_status = HAL_Init();
 8001446:	f000 fb4b 	bl	8001ae0 <HAL_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]

   if (hal_status != HAL_OK)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <BSP_init+0x18>
   {
      return BSP_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e031      	b.n	80014bc <BSP_init+0x7c>
   }

   bsp_status_t status =  SENSOR_init();
 8001458:	f000 f8ee 	bl	8001638 <SENSOR_init>
 800145c:	4603      	mov	r3, r0
 800145e:	71bb      	strb	r3, [r7, #6]

   if (status != BSP_OK)
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <BSP_init+0x2a>
   {
      return status;
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	e028      	b.n	80014bc <BSP_init+0x7c>
   }

   status = IND_init();
 800146a:	f000 f835 	bl	80014d8 <IND_init>
 800146e:	4603      	mov	r3, r0
 8001470:	71bb      	strb	r3, [r7, #6]

   if (status != BSP_OK)
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <BSP_init+0x3c>
   {
      return status;
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	e01f      	b.n	80014bc <BSP_init+0x7c>
   }

   status = ACT_init();
 800147c:	f7ff ff66 	bl	800134c <ACT_init>
 8001480:	4603      	mov	r3, r0
 8001482:	71bb      	strb	r3, [r7, #6]

   if (status != BSP_OK)
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <BSP_init+0x4e>
   {
      return status;
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	e016      	b.n	80014bc <BSP_init+0x7c>
   }

   status = SERIAL_init();
 800148e:	f000 f991 	bl	80017b4 <SERIAL_init>
 8001492:	4603      	mov	r3, r0
 8001494:	71bb      	strb	r3, [r7, #6]

   if (status != BSP_OK)
 8001496:	79bb      	ldrb	r3, [r7, #6]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <BSP_init+0x60>
   {
      return status;
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	e00d      	b.n	80014bc <BSP_init+0x7c>
   }

   status = LOG_set_port(SERIAL_get_port());
 80014a0:	f000 f9ea 	bl	8001878 <SERIAL_get_port>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f850 	bl	800154c <LOG_set_port>
 80014ac:	4603      	mov	r3, r0
 80014ae:	71bb      	strb	r3, [r7, #6]

   if (status != BSP_OK)
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <BSP_init+0x7a>
   {
      return status;
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	e000      	b.n	80014bc <BSP_init+0x7c>
   }

   return BSP_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <BSP_get_timer>:

uint32_t BSP_get_timer(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
   return HAL_GetTick();
 80014c8:	f000 fb6a 	bl	8001ba0 <HAL_GetTick>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <BSP_error_handler>:

void BSP_error_handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
   while (true)
 80014d6:	e7fe      	b.n	80014d6 <BSP_error_handler+0x4>

080014d8 <IND_init>:
#define PIN_INDICATOR GPIO_PIN_0
#define GPIO_INDICATOR GPIOB


bsp_status_t IND_init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
   __GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <IND_init+0x58>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <IND_init+0x58>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <IND_init+0x58>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

   GPIO_InitTypeDef GPIO_ind = {
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	2301      	movs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	2301      	movs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
         .Mode = GPIO_MODE_OUTPUT_PP,
         .Pull = GPIO_NOPULL,
         .Speed = GPIO_SPEED_LOW,
   };

   HAL_GPIO_Init(GPIO_INDICATOR, &GPIO_ind);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <IND_init+0x5c>)
 8001516:	f001 f845 	bl	80025a4 <HAL_GPIO_Init>
   HAL_GPIO_WritePin(GPIO_INDICATOR, PIN_INDICATOR, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2101      	movs	r1, #1
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <IND_init+0x5c>)
 8001520:	f001 f9ec 	bl	80028fc <HAL_GPIO_WritePin>

   return BSP_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <IND_toggle_led>:

void IND_toggle_led(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
   HAL_GPIO_TogglePin(GPIO_INDICATOR, PIN_INDICATOR);
 800153c:	2101      	movs	r1, #1
 800153e:	4802      	ldr	r0, [pc, #8]	; (8001548 <IND_toggle_led+0x10>)
 8001540:	f001 f9f5 	bl	800292e <HAL_GPIO_TogglePin>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40020400 	.word	0x40020400

0800154c <LOG_set_port>:

static serial_port_t *serial_port = NULL;


bsp_status_t LOG_set_port(serial_port_t *port)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
   if (port == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <LOG_set_port+0x12>
   {
      return BSP_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e003      	b.n	8001566 <LOG_set_port+0x1a>
   }

   serial_port = port;
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <LOG_set_port+0x28>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6013      	str	r3, [r2, #0]

   return BSP_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000214 	.word	0x20000214

08001578 <LOG_send_msg>:


bsp_status_t LOG_send_msg(uint8_t *msg, size_t size)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
   if (serial_port->handle == NULL)
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <LOG_send_msg+0x44>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <LOG_send_msg+0x18>
   {
      return BSP_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e010      	b.n	80015b2 <LOG_send_msg+0x3a>
   }

   HAL_StatusTypeDef status = HAL_UART_Transmit(serial_port->handle, msg, size, 100);
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <LOG_send_msg+0x44>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b29a      	uxth	r2, r3
 800159a:	2364      	movs	r3, #100	; 0x64
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	f001 faec 	bl	8002b7a <HAL_UART_Transmit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	73fb      	strb	r3, [r7, #15]

   if (status != HAL_OK)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <LOG_send_msg+0x38>
   {
      return BSP_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <LOG_send_msg+0x3a>
   }

   return BSP_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000214 	.word	0x20000214

080015c0 <LOG_send_temp>:

bsp_status_t LOG_send_temp(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09e      	sub	sp, #120	; 0x78
 80015c4:	af02      	add	r7, sp, #8
   float temp = 0;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	66bb      	str	r3, [r7, #104]	; 0x68
   bsp_status_t status = SENSOR_get_measure(&temp);
 80015cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f87f 	bl	80016d4 <SENSOR_get_measure>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   if (status != BSP_OK)
 80015dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <LOG_send_temp+0x28>
   {
      return BSP_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e020      	b.n	800162a <LOG_send_temp+0x6a>
   }

   char msg[100];
   snprintf(msg, sizeof(msg), "status> temp: %+06.2fC\n", temp);
 80015e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffbc 	bl	8000568 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	1d38      	adds	r0, r7, #4
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LOG_send_temp+0x74>)
 80015fc:	2164      	movs	r1, #100	; 0x64
 80015fe:	f002 fd83 	bl	8004108 <sniprintf>

   status = LOG_send_msg(msg, strlen(msg));
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fdf3 	bl	80001f0 <strlen>
 800160a:	4602      	mov	r2, r0
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ffb1 	bl	8001578 <LOG_send_msg>
 8001616:	4603      	mov	r3, r0
 8001618:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   if (status != BSP_OK)
 800161c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <LOG_send_temp+0x68>
   {
      return BSP_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <LOG_send_temp+0x6a>
   }

   return BSP_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3770      	adds	r7, #112	; 0x70
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	08008630 	.word	0x08008630

08001638 <SENSOR_init>:

static ADC_HandleTypeDef ADC_handle;


bsp_status_t SENSOR_init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
   ADC_handle.Instance = ADC1;
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <SENSOR_init+0x94>)
 8001640:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <SENSOR_init+0x98>)
 8001642:	601a      	str	r2, [r3, #0]
   ADC_handle.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <SENSOR_init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
   ADC_handle.Init.Resolution = ADC_RESOLUTION_12B;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <SENSOR_init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
   ADC_handle.Init.ScanConvMode = DISABLE;
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <SENSOR_init+0x94>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
   ADC_handle.Init.ContinuousConvMode = ENABLE;
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <SENSOR_init+0x94>)
 8001658:	2201      	movs	r2, #1
 800165a:	761a      	strb	r2, [r3, #24]
   ADC_handle.Init.DiscontinuousConvMode = DISABLE;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <SENSOR_init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2020 	strb.w	r2, [r3, #32]
   ADC_handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <SENSOR_init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
   ADC_handle.Init.NbrOfConversion = 1;
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <SENSOR_init+0x94>)
 800166c:	2201      	movs	r2, #1
 800166e:	61da      	str	r2, [r3, #28]
   ADC_handle.Init.DMAContinuousRequests = DISABLE;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <SENSOR_init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   ADC_handle.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <SENSOR_init+0x94>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]

   HAL_StatusTypeDef status = HAL_ADC_Init(&ADC_handle);
 800167e:	4813      	ldr	r0, [pc, #76]	; (80016cc <SENSOR_init+0x94>)
 8001680:	f000 fa9a 	bl	8001bb8 <HAL_ADC_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	75fb      	strb	r3, [r7, #23]

   if (status != HAL_OK) {
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SENSOR_init+0x5a>
       return BSP_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e018      	b.n	80016c4 <SENSOR_init+0x8c>
    }

   ADC_ChannelConfTypeDef ADC_channel_confing = {
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	2303      	movs	r3, #3
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	2301      	movs	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	2307      	movs	r3, #7
 80016a8:	60fb      	str	r3, [r7, #12]
         .Channel = ADC_CHANNEL_3,
         .Rank = 1,
         .SamplingTime = ADC_SAMPLETIME_480CYCLES,
   };

   status = HAL_ADC_ConfigChannel(&ADC_handle, &ADC_channel_confing);
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <SENSOR_init+0x94>)
 80016b0:	f000 fc64 	bl	8001f7c <HAL_ADC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]

   if (status != HAL_OK) {
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SENSOR_init+0x8a>
      return BSP_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <SENSOR_init+0x8c>
   }

   return BSP_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000218 	.word	0x20000218
 80016d0:	40012000 	.word	0x40012000

080016d4 <SENSOR_get_measure>:

bsp_status_t SENSOR_get_measure(float *temp)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
   if (temp == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <SENSOR_get_measure+0x12>
   {
      return BSP_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e059      	b.n	800179a <SENSOR_get_measure+0xc6>
   }

   HAL_StatusTypeDef status = HAL_ADC_Start(&ADC_handle);
 80016e6:	482f      	ldr	r0, [pc, #188]	; (80017a4 <SENSOR_get_measure+0xd0>)
 80016e8:	f000 faaa 	bl	8001c40 <HAL_ADC_Start>
 80016ec:	4603      	mov	r3, r0
 80016ee:	75fb      	strb	r3, [r7, #23]

   if (status != HAL_OK)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SENSOR_get_measure+0x26>
   {
      return BSP_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e04f      	b.n	800179a <SENSOR_get_measure+0xc6>
   }

   float average_temperature = 0.0f;
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]

   for (size_t i = 0; i < FILTER_LENGTH; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	e038      	b.n	8001778 <SENSOR_get_measure+0xa4>
   {
      status = HAL_ADC_PollForConversion(&ADC_handle, 200);
 8001706:	21c8      	movs	r1, #200	; 0xc8
 8001708:	4826      	ldr	r0, [pc, #152]	; (80017a4 <SENSOR_get_measure+0xd0>)
 800170a:	f000 fb9e 	bl	8001e4a <HAL_ADC_PollForConversion>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]

      if (status != HAL_OK)
 8001712:	7dfb      	ldrb	r3, [r7, #23]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SENSOR_get_measure+0x48>
      {
         return BSP_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e03e      	b.n	800179a <SENSOR_get_measure+0xc6>
      }

      uint32_t adc_value = HAL_ADC_GetValue(&ADC_handle);
 800171c:	4821      	ldr	r0, [pc, #132]	; (80017a4 <SENSOR_get_measure+0xd0>)
 800171e:	f000 fc1f 	bl	8001f60 <HAL_ADC_GetValue>
 8001722:	6138      	str	r0, [r7, #16]
      float voltage = (adc_value / ADC_MAX_VALUE) * ADC_VOLTAGE_MAX;
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800172e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80017a8 <SENSOR_get_measure+0xd4>
 8001732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001736:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80017ac <SENSOR_get_measure+0xd8>
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	edc7 7a03 	vstr	s15, [r7, #12]
      float temperature = (voltage * TEMP_SENSOR_CONST) - TEMP_SENSOR_OFFSET;
 8001742:	edd7 7a03 	vldr	s15, [r7, #12]
 8001746:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017b0 <SENSOR_get_measure+0xdc>
 800174a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001752:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001756:	edc7 7a02 	vstr	s15, [r7, #8]

      average_temperature += temperature / FILTER_LENGTH;
 800175a:	ed97 7a02 	vldr	s14, [r7, #8]
 800175e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001766:	ed97 7a07 	vldr	s14, [r7, #28]
 800176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176e:	edc7 7a07 	vstr	s15, [r7, #28]
   for (size_t i = 0; i < FILTER_LENGTH; i++)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3301      	adds	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b09      	cmp	r3, #9
 800177c:	d9c3      	bls.n	8001706 <SENSOR_get_measure+0x32>
   }

   *temp = average_temperature;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	601a      	str	r2, [r3, #0]

   status = HAL_ADC_Stop(&ADC_handle);
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <SENSOR_get_measure+0xd0>)
 8001786:	f000 fb2d 	bl	8001de4 <HAL_ADC_Stop>
 800178a:	4603      	mov	r3, r0
 800178c:	75fb      	strb	r3, [r7, #23]

   if (status != HAL_OK)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SENSOR_get_measure+0xc4>
   {
      return BSP_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <SENSOR_get_measure+0xc6>
   }

   return BSP_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000218 	.word	0x20000218
 80017a8:	457ff000 	.word	0x457ff000
 80017ac:	40533333 	.word	0x40533333
 80017b0:	421d9365 	.word	0x421d9365

080017b4 <SERIAL_init>:
   .handle = &UART_handle
};


bsp_status_t SERIAL_init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
   UART_handle.Instance = USART3;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <SERIAL_init+0x7c>)
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <SERIAL_init+0x80>)
 80017be:	601a      	str	r2, [r3, #0]
   UART_handle.Init.BaudRate = 9600;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <SERIAL_init+0x7c>)
 80017c2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c6:	605a      	str	r2, [r3, #4]
   UART_handle.Init.WordLength = UART_WORDLENGTH_8B;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <SERIAL_init+0x7c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
   UART_handle.Init.StopBits = UART_STOPBITS_1;
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <SERIAL_init+0x7c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
   UART_handle.Init.Parity = UART_PARITY_NONE;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <SERIAL_init+0x7c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
   UART_handle.Init.Mode = UART_MODE_TX_RX;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <SERIAL_init+0x7c>)
 80017dc:	220c      	movs	r2, #12
 80017de:	615a      	str	r2, [r3, #20]
   UART_handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <SERIAL_init+0x7c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
   UART_handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <SERIAL_init+0x7c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]

   HAL_StatusTypeDef status = HAL_UART_Init(&UART_handle);
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <SERIAL_init+0x7c>)
 80017ee:	f001 f977 	bl	8002ae0 <HAL_UART_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]

   if (status != HAL_OK)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SERIAL_init+0x4c>
   {
      return BSP_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e013      	b.n	8001828 <SERIAL_init+0x74>
   }

   uint8_t *msg = "status> UART OK\n";
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <SERIAL_init+0x84>)
 8001802:	603b      	str	r3, [r7, #0]
   status = HAL_UART_Transmit(&UART_handle, msg, strlen(msg), 100);
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f7fe fcf3 	bl	80001f0 <strlen>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <SERIAL_init+0x7c>)
 8001814:	f001 f9b1 	bl	8002b7a <HAL_UART_Transmit>
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]

   if (status != HAL_OK)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SERIAL_init+0x72>
   {
      return BSP_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <SERIAL_init+0x74>
   }

   return BSP_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000260 	.word	0x20000260
 8001834:	40004800 	.word	0x40004800
 8001838:	08008648 	.word	0x08008648

0800183c <SERIAL_get_input>:

bsp_status_t SERIAL_get_input(uint8_t *buffer, size_t size, uint16_t *received)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle(&UART_handle, buffer, size, received, HAL_MAX_DELAY);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	b29a      	uxth	r2, r3
 800184c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <SERIAL_get_input+0x38>)
 8001858:	f001 fa21 	bl	8002c9e <HAL_UARTEx_ReceiveToIdle>
 800185c:	4603      	mov	r3, r0
 800185e:	75fb      	strb	r3, [r7, #23]

   if (status != HAL_OK)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SERIAL_get_input+0x2e>
   {
      return BSP_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <SERIAL_get_input+0x30>
   }

   return BSP_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000260 	.word	0x20000260

08001878 <SERIAL_get_port>:

serial_port_t *SERIAL_get_port(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
   return &serial_port;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <SERIAL_get_port+0x10>)
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000000 	.word	0x20000000

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <SystemInit+0x60>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a15      	ldr	r2, [pc, #84]	; (80018ec <SystemInit+0x60>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <SystemInit+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <SystemInit+0x64>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <SystemInit+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <SystemInit+0x64>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <SystemInit+0x64>)
 80018b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <SystemInit+0x64>)
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <SystemInit+0x68>)
 80018c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <SystemInit+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <SystemInit+0x64>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <SystemInit+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SystemInit+0x60>)
 80018dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e0:	609a      	str	r2, [r3, #8]
#endif
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	24003010 	.word	0x24003010

080018f8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800194c:	f000 f914 	bl	8001b78 <HAL_IncTick>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
	return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_kill>:

int _kill(int pid, int sig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800196e:	f001 fd19 	bl	80033a4 <__errno>
 8001972:	4603      	mov	r3, r0
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
	return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_exit>:

void _exit (int status)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001996:	e7fe      	b.n	8001996 <_exit+0x12>

08001998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
	}

return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e009      	b.n	80019f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf1      	blt.n	80019e4 <_write+0x12>
	}
	return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:

int _close(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a32:	605a      	str	r2, [r3, #4]
	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_isatty>:

int _isatty(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	return 1;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f001 fc7e 	bl	80033a4 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20030000 	.word	0x20030000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	200002a4 	.word	0x200002a4
 8001adc:	200002c8 	.word	0x200002c8

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_Init+0x34>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_Init+0x34>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_Init+0x34>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_Init+0x34>)
 8001af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 fd1d 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f808 	bl	8001b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f000 ffae 	bl	8002a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023c00 	.word	0x40023c00

08001b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x54>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x58>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fd27 	bl	800258a <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00e      	b.n	8001b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	d80a      	bhi.n	8001b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b54:	f000 fcfd 	bl	8002552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_InitTick+0x5c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	2000000c 	.word	0x2000000c
 8001b74:	20000008 	.word	0x20000008

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	200002b0 	.word	0x200002b0

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200002b0 	.word	0x200002b0

08001bb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e033      	b.n	8001c36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fec4 	bl	8002964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d118      	bne.n	8001c28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bfe:	f023 0302 	bic.w	r3, r3, #2
 8001c02:	f043 0202 	orr.w	r2, r3, #2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fae8 	bl	80021e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
 8001c26:	e001      	b.n	8001c2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Start+0x1a>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e0b2      	b.n	8001dc0 <HAL_ADC_Start+0x180>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d018      	beq.n	8001ca2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_ADC_Start+0x18c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_ADC_Start+0x190>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9a      	lsrs	r2, r3, #18
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d17a      	bne.n	8001da6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f023 0206 	bic.w	r2, r3, #6
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_ADC_Start+0x194>)
 8001d0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d18:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12a      	bne.n	8001d7c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <HAL_ADC_Start+0x198>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d015      	beq.n	8001d5c <HAL_ADC_Start+0x11c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_ADC_Start+0x19c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_Start+0x106>
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_ADC_Start+0x194>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_ADC_Start+0x1a0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d136      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_ADC_Start+0x194>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d130      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d129      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	e020      	b.n	8001dbe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_ADC_Start+0x198>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d11b      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d114      	bne.n	8001dbe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e00b      	b.n	8001dbe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	40012300 	.word	0x40012300
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	40012100 	.word	0x40012100
 8001de0:	40012200 	.word	0x40012200

08001de4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Stop+0x16>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e021      	b.n	8001e3e <HAL_ADC_Stop+0x5a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d113      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d10b      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e063      	b.n	8001f58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e90:	f7ff fe86 	bl	8001ba0 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e96:	e021      	b.n	8001edc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e9e:	d01d      	beq.n	8001edc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_ADC_PollForConversion+0x6c>
 8001ea6:	f7ff fe7b 	bl	8001ba0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d212      	bcs.n	8001edc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d00b      	beq.n	8001edc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03d      	b.n	8001f58 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d1d6      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f06f 0212 	mvn.w	r2, #18
 8001ef2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d123      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11f      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d111      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1c>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e113      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x244>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d925      	bls.n	8001ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1e      	subs	r3, #30
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68d9      	ldr	r1, [r3, #12]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4403      	add	r3, r0
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	e022      	b.n	800203a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	2207      	movs	r2, #7
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	4603      	mov	r3, r0
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4403      	add	r3, r0
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d824      	bhi.n	800208c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b05      	subs	r3, #5
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b05      	subs	r3, #5
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
 800208a:	e04c      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d824      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	3b23      	subs	r3, #35	; 0x23
 80020a6:	221f      	movs	r2, #31
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b23      	subs	r3, #35	; 0x23
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
 80020dc:	e023      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b41      	subs	r3, #65	; 0x41
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b41      	subs	r3, #65	; 0x41
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_ADC_ConfigChannel+0x250>)
 8002128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a28      	ldr	r2, [pc, #160]	; (80021d0 <HAL_ADC_ConfigChannel+0x254>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d10f      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d8>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d10b      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_ADC_ConfigChannel+0x254>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12b      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_ADC_ConfigChannel+0x258>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <HAL_ADC_ConfigChannel+0x1f4>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b11      	cmp	r3, #17
 800216e:	d122      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <HAL_ADC_ConfigChannel+0x258>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d111      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_ADC_ConfigChannel+0x260>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0c9a      	lsrs	r2, r3, #18
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40012300 	.word	0x40012300
 80021d0:	40012000 	.word	0x40012000
 80021d4:	10000012 	.word	0x10000012
 80021d8:	20000004 	.word	0x20000004
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e8:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <ADC_Init+0x1f0>)
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	021a      	lsls	r2, r3, #8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <ADC_Init+0x1f4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	e00f      	b.n	80022de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0202 	bic.w	r2, r2, #2
 80022ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e1b      	ldrb	r3, [r3, #24]
 80022f8:	005a      	lsls	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800232a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	3b01      	subs	r3, #1
 8002338:	035a      	lsls	r2, r3, #13
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e007      	b.n	8002354 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	3b01      	subs	r3, #1
 8002370:	051a      	lsls	r2, r3, #20
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002396:	025a      	lsls	r2, r3, #9
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	029a      	lsls	r2, r3, #10
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40012300 	.word	0x40012300
 80023d4:	0f000001 	.word	0x0f000001

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	; (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800251c:	f7ff ff8e 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff47 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff5c 	bl	8002420 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff8e 	bl	8002490 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5d 	bl	800243c <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffb0 	bl	80024f8 <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e177      	b.n	80028b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8166 	bne.w	80028aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d130      	bne.n	8002658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0201 	and.w	r2, r3, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b03      	cmp	r3, #3
 8002662:	d017      	beq.n	8002694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d123      	bne.n	80026e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80c0 	beq.w	80028aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a65      	ldr	r2, [pc, #404]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002746:	4a61      	ldr	r2, [pc, #388]	; (80028cc <HAL_GPIO_Init+0x328>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_GPIO_Init+0x32c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d037      	beq.n	80027e2 <HAL_GPIO_Init+0x23e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <HAL_GPIO_Init+0x330>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d031      	beq.n	80027de <HAL_GPIO_Init+0x23a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d02b      	beq.n	80027da <HAL_GPIO_Init+0x236>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a55      	ldr	r2, [pc, #340]	; (80028dc <HAL_GPIO_Init+0x338>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d025      	beq.n	80027d6 <HAL_GPIO_Init+0x232>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a54      	ldr	r2, [pc, #336]	; (80028e0 <HAL_GPIO_Init+0x33c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01f      	beq.n	80027d2 <HAL_GPIO_Init+0x22e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a53      	ldr	r2, [pc, #332]	; (80028e4 <HAL_GPIO_Init+0x340>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d019      	beq.n	80027ce <HAL_GPIO_Init+0x22a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x344>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0x226>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_GPIO_Init+0x348>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00d      	beq.n	80027c6 <HAL_GPIO_Init+0x222>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a50      	ldr	r2, [pc, #320]	; (80028f0 <HAL_GPIO_Init+0x34c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <HAL_GPIO_Init+0x21e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_GPIO_Init+0x350>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_GPIO_Init+0x21a>
 80027ba:	2309      	movs	r3, #9
 80027bc:	e012      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027be:	230a      	movs	r3, #10
 80027c0:	e010      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027c2:	2308      	movs	r3, #8
 80027c4:	e00e      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00c      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027ca:	2306      	movs	r3, #6
 80027cc:	e00a      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x240>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <HAL_GPIO_Init+0x328>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002802:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_GPIO_Init+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002856:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_GPIO_Init+0x354>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_GPIO_Init+0x354>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <HAL_GPIO_Init+0x354>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f ae84 	bls.w	80025c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40021800 	.word	0x40021800
 80028ec:	40021c00 	.word	0x40021c00
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40022400 	.word	0x40022400
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4013      	ands	r3, r2
 8002946:	041a      	lsls	r2, r3, #16
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43d9      	mvns	r1, r3
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	400b      	ands	r3, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_ADC_MspInit>:
  * @note   This functiona is called from HAL_ADC_DeInit() function to perform
  *         ADC system level initialization (GPIOs, clock, DMA, interrupt)
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
   if (hadc->Instance == ADC1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <HAL_ADC_MspInit+0x78>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12d      	bne.n	80029d2 <HAL_ADC_MspInit+0x6e>
   {
      __ADC1_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_ADC_MspInit+0x7c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_ADC_MspInit+0x7c>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_ADC_MspInit+0x7c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
      __GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_ADC_MspInit+0x7c>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <HAL_ADC_MspInit+0x7c>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_ADC_MspInit+0x7c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

      GPIO_InitTypeDef adc_input = {
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	2308      	movs	r3, #8
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	2303      	movs	r3, #3
 80029c4:	61bb      	str	r3, [r7, #24]
            .Pin = GPIO_PIN_3,
            .Mode = GPIO_MODE_ANALOG,
            .Pull = GPIO_NOPULL,
      };

      HAL_GPIO_Init(GPIOA, &adc_input);
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <HAL_ADC_MspInit+0x80>)
 80029ce:	f7ff fde9 	bl	80025a4 <HAL_GPIO_Init>
   }
}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	; 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40012000 	.word	0x40012000
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020000 	.word	0x40020000

080029e8 <HAL_UART_MspInit>:
  * @note   This functiona is called from HAL_UART_DeInit() function to perform
  *         UART system level initialization (GPIOs, clock, DMA, interrupt)
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART3)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_UART_MspInit+0x70>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d129      	bne.n	8002a4e <HAL_UART_MspInit+0x66>
   {
     __USART3_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x74>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x74>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x74>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
     __GPIOD_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <HAL_UART_MspInit+0x74>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <HAL_UART_MspInit+0x74>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_UART_MspInit+0x74>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]

      GPIO_InitTypeDef uart_pins = {
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_UART_MspInit+0x78>)
 8002a34:	f107 0414 	add.w	r4, r7, #20
 8002a38:	461d      	mov	r5, r3
 8002a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	6023      	str	r3, [r4, #0]
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_LOW,
            .Alternate = GPIO_AF7_USART3
      };

      HAL_GPIO_Init(GPIOD, &uart_pins);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	4806      	ldr	r0, [pc, #24]	; (8002a64 <HAL_UART_MspInit+0x7c>)
 8002a4a:	f7ff fdab 	bl	80025a4 <HAL_GPIO_Init>
   }
}
 8002a4e:	bf00      	nop
 8002a50:	3728      	adds	r7, #40	; 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bdb0      	pop	{r4, r5, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40004800 	.word	0x40004800
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	0800865c 	.word	0x0800865c
 8002a64:	40020c00 	.word	0x40020c00

08002a68 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0

}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	0800867c 	.word	0x0800867c

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffdc 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0b5b      	lsrs	r3, r3, #13
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	0800867c 	.word	0x0800867c

08002ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e03f      	b.n	8002b72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff6e 	bl	80029e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fa05 	bl	8002f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08a      	sub	sp, #40	; 0x28
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d17c      	bne.n	8002c94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_UART_Transmit+0x2c>
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e075      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_UART_Transmit+0x3e>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e06e      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2221      	movs	r2, #33	; 0x21
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bce:	f7fe ffe7 	bl	8001ba0 <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be8:	d108      	bne.n	8002bfc <HAL_UART_Transmit+0x82>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e003      	b.n	8002c04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c0c:	e02a      	b.n	8002c64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f91d 	bl	8002e58 <UART_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e036      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	3302      	adds	r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	e007      	b.n	8002c56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	3301      	adds	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1cf      	bne.n	8002c0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f8ed 	bl	8002e58 <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e006      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	f040 80c9 	bne.w	8002e4e <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0c1      	b.n	8002e50 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_UARTEx_ReceiveToIdle+0x3c>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e0ba      	b.n	8002e50 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2222      	movs	r2, #34	; 0x22
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cf6:	f7fe ff53 	bl	8001ba0 <HAL_GetTick>
 8002cfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d108      	bne.n	8002d24 <HAL_UARTEx_ReceiveToIdle+0x86>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e003      	b.n	8002d2c <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d3a:	e074      	b.n	8002e26 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d114      	bne.n	8002d74 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e06d      	b.n	8002e50 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d13c      	bne.n	8002dfc <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10c      	bne.n	8002da2 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e01f      	b.n	8002de2 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d007      	beq.n	8002dbc <HAL_UARTEx_ReceiveToIdle+0x11e>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <HAL_UARTEx_ReceiveToIdle+0x12c>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e008      	b.n	8002ddc <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	3301      	adds	r3, #1
 8002de0:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e02:	d010      	beq.n	8002e26 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fe fecc 	bl	8001ba0 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <HAL_UARTEx_ReceiveToIdle+0x17c>
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e014      	b.n	8002e50 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d185      	bne.n	8002d3c <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b090      	sub	sp, #64	; 0x40
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e68:	e050      	b.n	8002f0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e70:	d04c      	beq.n	8002f0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e78:	f7fe fe92 	bl	8001ba0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d241      	bcs.n	8002f0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea8:	637a      	str	r2, [r7, #52]	; 0x34
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb0:	e841 2300 	strex	r3, r2, [r1]
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e5      	bne.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	e853 3f00 	ldrex	r3, [r3]
 8002eca:	613b      	str	r3, [r7, #16]
   return(result);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3314      	adds	r3, #20
 8002eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002edc:	623a      	str	r2, [r7, #32]
 8002ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	69f9      	ldr	r1, [r7, #28]
 8002ee2:	6a3a      	ldr	r2, [r7, #32]
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e5      	bne.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e00f      	b.n	8002f2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d09f      	beq.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3740      	adds	r7, #64	; 0x40
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f38:	b09f      	sub	sp, #124	; 0x7c
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	ea40 0301 	orr.w	r3, r0, r1
 8002f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f78:	f021 010c 	bic.w	r1, r1, #12
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	6999      	ldr	r1, [r3, #24]
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	ea40 0301 	orr.w	r3, r0, r1
 8002f9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4bc5      	ldr	r3, [pc, #788]	; (80032b8 <UART_SetConfig+0x384>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d004      	beq.n	8002fb2 <UART_SetConfig+0x7e>
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4bc3      	ldr	r3, [pc, #780]	; (80032bc <UART_SetConfig+0x388>)
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d103      	bne.n	8002fba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb2:	f7ff fd81 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8002fb6:	6778      	str	r0, [r7, #116]	; 0x74
 8002fb8:	e002      	b.n	8002fc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7ff fd69 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8002fbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc8:	f040 80b6 	bne.w	8003138 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fce:	461c      	mov	r4, r3
 8002fd0:	f04f 0500 	mov.w	r5, #0
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	6439      	str	r1, [r7, #64]	; 0x40
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe4:	1912      	adds	r2, r2, r4
 8002fe6:	eb45 0303 	adc.w	r3, r5, r3
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	00d9      	lsls	r1, r3, #3
 8002ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ff8:	00d0      	lsls	r0, r2, #3
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	1911      	adds	r1, r2, r4
 8003000:	6639      	str	r1, [r7, #96]	; 0x60
 8003002:	416b      	adcs	r3, r5
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	1891      	adds	r1, r2, r2
 8003012:	63b9      	str	r1, [r7, #56]	; 0x38
 8003014:	415b      	adcs	r3, r3
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800301c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003020:	f7fd fe42 	bl	8000ca8 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <UART_SetConfig+0x38c>)
 800302a:	fba3 2302 	umull	r2, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	011e      	lsls	r6, r3, #4
 8003032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003034:	461c      	mov	r4, r3
 8003036:	f04f 0500 	mov.w	r5, #0
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	1891      	adds	r1, r2, r2
 8003040:	6339      	str	r1, [r7, #48]	; 0x30
 8003042:	415b      	adcs	r3, r3
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800304a:	1912      	adds	r2, r2, r4
 800304c:	eb45 0303 	adc.w	r3, r5, r3
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	00d9      	lsls	r1, r3, #3
 800305a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800305e:	00d0      	lsls	r0, r2, #3
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	1911      	adds	r1, r2, r4
 8003066:	65b9      	str	r1, [r7, #88]	; 0x58
 8003068:	416b      	adcs	r3, r5
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	461a      	mov	r2, r3
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	1891      	adds	r1, r2, r2
 8003078:	62b9      	str	r1, [r7, #40]	; 0x28
 800307a:	415b      	adcs	r3, r3
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003082:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003086:	f7fd fe0f 	bl	8000ca8 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <UART_SetConfig+0x38c>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <UART_SetConfig+0x38c>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b0:	441e      	add	r6, r3
 80030b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b4:	4618      	mov	r0, r3
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	1894      	adds	r4, r2, r2
 80030c0:	623c      	str	r4, [r7, #32]
 80030c2:	415b      	adcs	r3, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ca:	1812      	adds	r2, r2, r0
 80030cc:	eb41 0303 	adc.w	r3, r1, r3
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	f04f 0500 	mov.w	r5, #0
 80030d8:	00dd      	lsls	r5, r3, #3
 80030da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030de:	00d4      	lsls	r4, r2, #3
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	1814      	adds	r4, r2, r0
 80030e6:	653c      	str	r4, [r7, #80]	; 0x50
 80030e8:	414b      	adcs	r3, r1
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	1891      	adds	r1, r2, r2
 80030f8:	61b9      	str	r1, [r7, #24]
 80030fa:	415b      	adcs	r3, r3
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003106:	f7fd fdcf 	bl	8000ca8 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <UART_SetConfig+0x38c>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	3332      	adds	r3, #50	; 0x32
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <UART_SetConfig+0x38c>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4432      	add	r2, r6
 8003134:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003136:	e0b9      	b.n	80032ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313a:	461c      	mov	r4, r3
 800313c:	f04f 0500 	mov.w	r5, #0
 8003140:	4622      	mov	r2, r4
 8003142:	462b      	mov	r3, r5
 8003144:	1891      	adds	r1, r2, r2
 8003146:	6139      	str	r1, [r7, #16]
 8003148:	415b      	adcs	r3, r3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003150:	1912      	adds	r2, r2, r4
 8003152:	eb45 0303 	adc.w	r3, r5, r3
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	00d9      	lsls	r1, r3, #3
 8003160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003164:	00d0      	lsls	r0, r2, #3
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	eb12 0804 	adds.w	r8, r2, r4
 800316e:	eb43 0905 	adc.w	r9, r3, r5
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800318a:	0082      	lsls	r2, r0, #2
 800318c:	4640      	mov	r0, r8
 800318e:	4649      	mov	r1, r9
 8003190:	f7fd fd8a 	bl	8000ca8 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <UART_SetConfig+0x38c>)
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	011e      	lsls	r6, r3, #4
 80031a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1894      	adds	r4, r2, r2
 80031b0:	60bc      	str	r4, [r7, #8]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ba:	1812      	adds	r2, r2, r0
 80031bc:	eb41 0303 	adc.w	r3, r1, r3
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	00dd      	lsls	r5, r3, #3
 80031ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ce:	00d4      	lsls	r4, r2, #3
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	1814      	adds	r4, r2, r0
 80031d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80031d8:	414b      	adcs	r3, r1
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031f4:	0082      	lsls	r2, r0, #2
 80031f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031fa:	f7fd fd55 	bl	8000ca8 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <UART_SetConfig+0x38c>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	; 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <UART_SetConfig+0x38c>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003222:	441e      	add	r6, r3
 8003224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003226:	4618      	mov	r0, r3
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	1894      	adds	r4, r2, r2
 8003232:	603c      	str	r4, [r7, #0]
 8003234:	415b      	adcs	r3, r3
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323c:	1812      	adds	r2, r2, r0
 800323e:	eb41 0303 	adc.w	r3, r1, r3
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	f04f 0500 	mov.w	r5, #0
 800324a:	00dd      	lsls	r5, r3, #3
 800324c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003250:	00d4      	lsls	r4, r2, #3
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	eb12 0a00 	adds.w	sl, r2, r0
 800325a:	eb43 0b01 	adc.w	fp, r3, r1
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	008b      	lsls	r3, r1, #2
 8003272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003276:	0082      	lsls	r2, r0, #2
 8003278:	4650      	mov	r0, sl
 800327a:	4659      	mov	r1, fp
 800327c:	f7fd fd14 	bl	8000ca8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <UART_SetConfig+0x38c>)
 8003286:	fba3 1302 	umull	r1, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2164      	movs	r1, #100	; 0x64
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <UART_SetConfig+0x38c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4432      	add	r2, r6
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	377c      	adds	r7, #124	; 0x7c
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f

080032c4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
   /* Starting HAL Library, system clock and BSP. */
   bsp_status_t status = BSP_init();
 80032ca:	f7fe f8b9 	bl	8001440 <BSP_init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

   if (status != BSP_OK)
 80032d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <main+0x1c>
   {
      error_handler();
 80032dc:	f000 f835 	bl	800334a <error_handler>
   }

   /* Obtaining operating parameters */
   parse_input();
 80032e0:	f7fd ffbc 	bl	800125c <parse_input>

   /* Setting up delays. */
   delay_t delay_led;
   DELAY_init(&delay_led, 500);
 80032e4:	f107 0318 	add.w	r3, r7, #24
 80032e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fe8d 	bl	800100c <DELAY_init>

   delay_t delay_fsm;
   DELAY_init(&delay_fsm, 50);
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	2132      	movs	r1, #50	; 0x32
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd fe87 	bl	800100c <DELAY_init>

   delay_t delay_log_temp;
   DELAY_init(&delay_log_temp, 1000);
 80032fe:	463b      	mov	r3, r7
 8003300:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd fe81 	bl	800100c <DELAY_init>

   /* Starting application machine state. */
   FSM_init();
 800330a:	f7fd febd 	bl	8001088 <FSM_init>

   while (true)
   {
      if (DELAY_read(&delay_fsm))
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fe8f 	bl	8001036 <DELAY_read>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <main+0x5e>
      {
         /* Delay time to update machine state has elapsed. */
         FSM_update();
 800331e:	f7fd febf 	bl	80010a0 <FSM_update>
      }

      if (DELAY_read(&delay_log_temp))
 8003322:	463b      	mov	r3, r7
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fe86 	bl	8001036 <DELAY_read>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <main+0x70>
      {
         /* Delay time to send temperature log has elapsed. */
         LOG_send_temp();
 8003330:	f7fe f946 	bl	80015c0 <LOG_send_temp>
      }

      if (DELAY_read(&delay_led))
 8003334:	f107 0318 	add.w	r3, r7, #24
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd fe7c 	bl	8001036 <DELAY_read>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0e4      	beq.n	800330e <main+0x4a>
      {
         /* Delay time to toggle running indicator has elapsed. */
         IND_toggle_led();
 8003344:	f7fe f8f8 	bl	8001538 <IND_toggle_led>
      if (DELAY_read(&delay_fsm))
 8003348:	e7e1      	b.n	800330e <main+0x4a>

0800334a <error_handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void error_handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
  while (1)
 800334e:	e7fe      	b.n	800334e <error_handler+0x4>

08003350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003388 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003356:	e003      	b.n	8003360 <LoopCopyDataInit>

08003358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800335a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800335c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800335e:	3104      	adds	r1, #4

08003360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003368:	d3f6      	bcc.n	8003358 <CopyDataInit>
  ldr  r2, =_sbss
 800336a:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800336c:	e002      	b.n	8003374 <LoopFillZerobss>

0800336e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800336e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003370:	f842 3b04 	str.w	r3, [r2], #4

08003374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003378:	d3f9      	bcc.n	800336e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800337a:	f7fe fa87 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800337e:	f000 f817 	bl	80033b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003382:	f7ff ff9f 	bl	80032c4 <main>
  bx  lr    
 8003386:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003388:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800338c:	08008b5c 	.word	0x08008b5c
  ldr  r0, =_sdata
 8003390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003394:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003398:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800339c:	200002c4 	.word	0x200002c4

080033a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033a0:	e7fe      	b.n	80033a0 <ADC_IRQHandler>
	...

080033a4 <__errno>:
 80033a4:	4b01      	ldr	r3, [pc, #4]	; (80033ac <__errno+0x8>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000010 	.word	0x20000010

080033b0 <__libc_init_array>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4d0d      	ldr	r5, [pc, #52]	; (80033e8 <__libc_init_array+0x38>)
 80033b4:	4c0d      	ldr	r4, [pc, #52]	; (80033ec <__libc_init_array+0x3c>)
 80033b6:	1b64      	subs	r4, r4, r5
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	2600      	movs	r6, #0
 80033bc:	42a6      	cmp	r6, r4
 80033be:	d109      	bne.n	80033d4 <__libc_init_array+0x24>
 80033c0:	4d0b      	ldr	r5, [pc, #44]	; (80033f0 <__libc_init_array+0x40>)
 80033c2:	4c0c      	ldr	r4, [pc, #48]	; (80033f4 <__libc_init_array+0x44>)
 80033c4:	f005 f8b8 	bl	8008538 <_init>
 80033c8:	1b64      	subs	r4, r4, r5
 80033ca:	10a4      	asrs	r4, r4, #2
 80033cc:	2600      	movs	r6, #0
 80033ce:	42a6      	cmp	r6, r4
 80033d0:	d105      	bne.n	80033de <__libc_init_array+0x2e>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d8:	4798      	blx	r3
 80033da:	3601      	adds	r6, #1
 80033dc:	e7ee      	b.n	80033bc <__libc_init_array+0xc>
 80033de:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e2:	4798      	blx	r3
 80033e4:	3601      	adds	r6, #1
 80033e6:	e7f2      	b.n	80033ce <__libc_init_array+0x1e>
 80033e8:	08008b54 	.word	0x08008b54
 80033ec:	08008b54 	.word	0x08008b54
 80033f0:	08008b54 	.word	0x08008b54
 80033f4:	08008b58 	.word	0x08008b58

080033f8 <memset>:
 80033f8:	4402      	add	r2, r0
 80033fa:	4603      	mov	r3, r0
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d100      	bne.n	8003402 <memset+0xa>
 8003400:	4770      	bx	lr
 8003402:	f803 1b01 	strb.w	r1, [r3], #1
 8003406:	e7f9      	b.n	80033fc <memset+0x4>

08003408 <__cvt>:
 8003408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800340c:	ec55 4b10 	vmov	r4, r5, d0
 8003410:	2d00      	cmp	r5, #0
 8003412:	460e      	mov	r6, r1
 8003414:	4619      	mov	r1, r3
 8003416:	462b      	mov	r3, r5
 8003418:	bfbb      	ittet	lt
 800341a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800341e:	461d      	movlt	r5, r3
 8003420:	2300      	movge	r3, #0
 8003422:	232d      	movlt	r3, #45	; 0x2d
 8003424:	700b      	strb	r3, [r1, #0]
 8003426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800342c:	4691      	mov	r9, r2
 800342e:	f023 0820 	bic.w	r8, r3, #32
 8003432:	bfbc      	itt	lt
 8003434:	4622      	movlt	r2, r4
 8003436:	4614      	movlt	r4, r2
 8003438:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800343c:	d005      	beq.n	800344a <__cvt+0x42>
 800343e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003442:	d100      	bne.n	8003446 <__cvt+0x3e>
 8003444:	3601      	adds	r6, #1
 8003446:	2102      	movs	r1, #2
 8003448:	e000      	b.n	800344c <__cvt+0x44>
 800344a:	2103      	movs	r1, #3
 800344c:	ab03      	add	r3, sp, #12
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	ab02      	add	r3, sp, #8
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	ec45 4b10 	vmov	d0, r4, r5
 8003458:	4653      	mov	r3, sl
 800345a:	4632      	mov	r2, r6
 800345c:	f001 fe7c 	bl	8005158 <_dtoa_r>
 8003460:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003464:	4607      	mov	r7, r0
 8003466:	d102      	bne.n	800346e <__cvt+0x66>
 8003468:	f019 0f01 	tst.w	r9, #1
 800346c:	d022      	beq.n	80034b4 <__cvt+0xac>
 800346e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003472:	eb07 0906 	add.w	r9, r7, r6
 8003476:	d110      	bne.n	800349a <__cvt+0x92>
 8003478:	783b      	ldrb	r3, [r7, #0]
 800347a:	2b30      	cmp	r3, #48	; 0x30
 800347c:	d10a      	bne.n	8003494 <__cvt+0x8c>
 800347e:	2200      	movs	r2, #0
 8003480:	2300      	movs	r3, #0
 8003482:	4620      	mov	r0, r4
 8003484:	4629      	mov	r1, r5
 8003486:	f7fd fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800348a:	b918      	cbnz	r0, 8003494 <__cvt+0x8c>
 800348c:	f1c6 0601 	rsb	r6, r6, #1
 8003490:	f8ca 6000 	str.w	r6, [sl]
 8003494:	f8da 3000 	ldr.w	r3, [sl]
 8003498:	4499      	add	r9, r3
 800349a:	2200      	movs	r2, #0
 800349c:	2300      	movs	r3, #0
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fd fb21 	bl	8000ae8 <__aeabi_dcmpeq>
 80034a6:	b108      	cbz	r0, 80034ac <__cvt+0xa4>
 80034a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80034ac:	2230      	movs	r2, #48	; 0x30
 80034ae:	9b03      	ldr	r3, [sp, #12]
 80034b0:	454b      	cmp	r3, r9
 80034b2:	d307      	bcc.n	80034c4 <__cvt+0xbc>
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034b8:	1bdb      	subs	r3, r3, r7
 80034ba:	4638      	mov	r0, r7
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	b004      	add	sp, #16
 80034c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c4:	1c59      	adds	r1, r3, #1
 80034c6:	9103      	str	r1, [sp, #12]
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e7f0      	b.n	80034ae <__cvt+0xa6>

080034cc <__exponent>:
 80034cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ce:	4603      	mov	r3, r0
 80034d0:	2900      	cmp	r1, #0
 80034d2:	bfb8      	it	lt
 80034d4:	4249      	neglt	r1, r1
 80034d6:	f803 2b02 	strb.w	r2, [r3], #2
 80034da:	bfb4      	ite	lt
 80034dc:	222d      	movlt	r2, #45	; 0x2d
 80034de:	222b      	movge	r2, #43	; 0x2b
 80034e0:	2909      	cmp	r1, #9
 80034e2:	7042      	strb	r2, [r0, #1]
 80034e4:	dd2a      	ble.n	800353c <__exponent+0x70>
 80034e6:	f10d 0407 	add.w	r4, sp, #7
 80034ea:	46a4      	mov	ip, r4
 80034ec:	270a      	movs	r7, #10
 80034ee:	46a6      	mov	lr, r4
 80034f0:	460a      	mov	r2, r1
 80034f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80034f6:	fb07 1516 	mls	r5, r7, r6, r1
 80034fa:	3530      	adds	r5, #48	; 0x30
 80034fc:	2a63      	cmp	r2, #99	; 0x63
 80034fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003502:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003506:	4631      	mov	r1, r6
 8003508:	dcf1      	bgt.n	80034ee <__exponent+0x22>
 800350a:	3130      	adds	r1, #48	; 0x30
 800350c:	f1ae 0502 	sub.w	r5, lr, #2
 8003510:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003514:	1c44      	adds	r4, r0, #1
 8003516:	4629      	mov	r1, r5
 8003518:	4561      	cmp	r1, ip
 800351a:	d30a      	bcc.n	8003532 <__exponent+0x66>
 800351c:	f10d 0209 	add.w	r2, sp, #9
 8003520:	eba2 020e 	sub.w	r2, r2, lr
 8003524:	4565      	cmp	r5, ip
 8003526:	bf88      	it	hi
 8003528:	2200      	movhi	r2, #0
 800352a:	4413      	add	r3, r2
 800352c:	1a18      	subs	r0, r3, r0
 800352e:	b003      	add	sp, #12
 8003530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003536:	f804 2f01 	strb.w	r2, [r4, #1]!
 800353a:	e7ed      	b.n	8003518 <__exponent+0x4c>
 800353c:	2330      	movs	r3, #48	; 0x30
 800353e:	3130      	adds	r1, #48	; 0x30
 8003540:	7083      	strb	r3, [r0, #2]
 8003542:	70c1      	strb	r1, [r0, #3]
 8003544:	1d03      	adds	r3, r0, #4
 8003546:	e7f1      	b.n	800352c <__exponent+0x60>

08003548 <_printf_float>:
 8003548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800354c:	ed2d 8b02 	vpush	{d8}
 8003550:	b08d      	sub	sp, #52	; 0x34
 8003552:	460c      	mov	r4, r1
 8003554:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003558:	4616      	mov	r6, r2
 800355a:	461f      	mov	r7, r3
 800355c:	4605      	mov	r5, r0
 800355e:	f002 ff57 	bl	8006410 <_localeconv_r>
 8003562:	f8d0 a000 	ldr.w	sl, [r0]
 8003566:	4650      	mov	r0, sl
 8003568:	f7fc fe42 	bl	80001f0 <strlen>
 800356c:	2300      	movs	r3, #0
 800356e:	930a      	str	r3, [sp, #40]	; 0x28
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	9305      	str	r3, [sp, #20]
 8003574:	f8d8 3000 	ldr.w	r3, [r8]
 8003578:	f894 b018 	ldrb.w	fp, [r4, #24]
 800357c:	3307      	adds	r3, #7
 800357e:	f023 0307 	bic.w	r3, r3, #7
 8003582:	f103 0208 	add.w	r2, r3, #8
 8003586:	f8c8 2000 	str.w	r2, [r8]
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003592:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003596:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800359a:	9307      	str	r3, [sp, #28]
 800359c:	f8cd 8018 	str.w	r8, [sp, #24]
 80035a0:	ee08 0a10 	vmov	s16, r0
 80035a4:	4b9f      	ldr	r3, [pc, #636]	; (8003824 <_printf_float+0x2dc>)
 80035a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035ae:	f7fd facd 	bl	8000b4c <__aeabi_dcmpun>
 80035b2:	bb88      	cbnz	r0, 8003618 <_printf_float+0xd0>
 80035b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035b8:	4b9a      	ldr	r3, [pc, #616]	; (8003824 <_printf_float+0x2dc>)
 80035ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035be:	f7fd faa7 	bl	8000b10 <__aeabi_dcmple>
 80035c2:	bb48      	cbnz	r0, 8003618 <_printf_float+0xd0>
 80035c4:	2200      	movs	r2, #0
 80035c6:	2300      	movs	r3, #0
 80035c8:	4640      	mov	r0, r8
 80035ca:	4649      	mov	r1, r9
 80035cc:	f7fd fa96 	bl	8000afc <__aeabi_dcmplt>
 80035d0:	b110      	cbz	r0, 80035d8 <_printf_float+0x90>
 80035d2:	232d      	movs	r3, #45	; 0x2d
 80035d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d8:	4b93      	ldr	r3, [pc, #588]	; (8003828 <_printf_float+0x2e0>)
 80035da:	4894      	ldr	r0, [pc, #592]	; (800382c <_printf_float+0x2e4>)
 80035dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80035e0:	bf94      	ite	ls
 80035e2:	4698      	movls	r8, r3
 80035e4:	4680      	movhi	r8, r0
 80035e6:	2303      	movs	r3, #3
 80035e8:	6123      	str	r3, [r4, #16]
 80035ea:	9b05      	ldr	r3, [sp, #20]
 80035ec:	f023 0204 	bic.w	r2, r3, #4
 80035f0:	6022      	str	r2, [r4, #0]
 80035f2:	f04f 0900 	mov.w	r9, #0
 80035f6:	9700      	str	r7, [sp, #0]
 80035f8:	4633      	mov	r3, r6
 80035fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80035fc:	4621      	mov	r1, r4
 80035fe:	4628      	mov	r0, r5
 8003600:	f000 f9d8 	bl	80039b4 <_printf_common>
 8003604:	3001      	adds	r0, #1
 8003606:	f040 8090 	bne.w	800372a <_printf_float+0x1e2>
 800360a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800360e:	b00d      	add	sp, #52	; 0x34
 8003610:	ecbd 8b02 	vpop	{d8}
 8003614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	4640      	mov	r0, r8
 800361e:	4649      	mov	r1, r9
 8003620:	f7fd fa94 	bl	8000b4c <__aeabi_dcmpun>
 8003624:	b140      	cbz	r0, 8003638 <_printf_float+0xf0>
 8003626:	464b      	mov	r3, r9
 8003628:	2b00      	cmp	r3, #0
 800362a:	bfbc      	itt	lt
 800362c:	232d      	movlt	r3, #45	; 0x2d
 800362e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003632:	487f      	ldr	r0, [pc, #508]	; (8003830 <_printf_float+0x2e8>)
 8003634:	4b7f      	ldr	r3, [pc, #508]	; (8003834 <_printf_float+0x2ec>)
 8003636:	e7d1      	b.n	80035dc <_printf_float+0x94>
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800363e:	9206      	str	r2, [sp, #24]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	d13f      	bne.n	80036c4 <_printf_float+0x17c>
 8003644:	2306      	movs	r3, #6
 8003646:	6063      	str	r3, [r4, #4]
 8003648:	9b05      	ldr	r3, [sp, #20]
 800364a:	6861      	ldr	r1, [r4, #4]
 800364c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003650:	2300      	movs	r3, #0
 8003652:	9303      	str	r3, [sp, #12]
 8003654:	ab0a      	add	r3, sp, #40	; 0x28
 8003656:	e9cd b301 	strd	fp, r3, [sp, #4]
 800365a:	ab09      	add	r3, sp, #36	; 0x24
 800365c:	ec49 8b10 	vmov	d0, r8, r9
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003668:	4628      	mov	r0, r5
 800366a:	f7ff fecd 	bl	8003408 <__cvt>
 800366e:	9b06      	ldr	r3, [sp, #24]
 8003670:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003672:	2b47      	cmp	r3, #71	; 0x47
 8003674:	4680      	mov	r8, r0
 8003676:	d108      	bne.n	800368a <_printf_float+0x142>
 8003678:	1cc8      	adds	r0, r1, #3
 800367a:	db02      	blt.n	8003682 <_printf_float+0x13a>
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	4299      	cmp	r1, r3
 8003680:	dd41      	ble.n	8003706 <_printf_float+0x1be>
 8003682:	f1ab 0b02 	sub.w	fp, fp, #2
 8003686:	fa5f fb8b 	uxtb.w	fp, fp
 800368a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800368e:	d820      	bhi.n	80036d2 <_printf_float+0x18a>
 8003690:	3901      	subs	r1, #1
 8003692:	465a      	mov	r2, fp
 8003694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003698:	9109      	str	r1, [sp, #36]	; 0x24
 800369a:	f7ff ff17 	bl	80034cc <__exponent>
 800369e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036a0:	1813      	adds	r3, r2, r0
 80036a2:	2a01      	cmp	r2, #1
 80036a4:	4681      	mov	r9, r0
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	dc02      	bgt.n	80036b0 <_printf_float+0x168>
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	07d2      	lsls	r2, r2, #31
 80036ae:	d501      	bpl.n	80036b4 <_printf_float+0x16c>
 80036b0:	3301      	adds	r3, #1
 80036b2:	6123      	str	r3, [r4, #16]
 80036b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d09c      	beq.n	80035f6 <_printf_float+0xae>
 80036bc:	232d      	movs	r3, #45	; 0x2d
 80036be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c2:	e798      	b.n	80035f6 <_printf_float+0xae>
 80036c4:	9a06      	ldr	r2, [sp, #24]
 80036c6:	2a47      	cmp	r2, #71	; 0x47
 80036c8:	d1be      	bne.n	8003648 <_printf_float+0x100>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1bc      	bne.n	8003648 <_printf_float+0x100>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e7b9      	b.n	8003646 <_printf_float+0xfe>
 80036d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80036d6:	d118      	bne.n	800370a <_printf_float+0x1c2>
 80036d8:	2900      	cmp	r1, #0
 80036da:	6863      	ldr	r3, [r4, #4]
 80036dc:	dd0b      	ble.n	80036f6 <_printf_float+0x1ae>
 80036de:	6121      	str	r1, [r4, #16]
 80036e0:	b913      	cbnz	r3, 80036e8 <_printf_float+0x1a0>
 80036e2:	6822      	ldr	r2, [r4, #0]
 80036e4:	07d0      	lsls	r0, r2, #31
 80036e6:	d502      	bpl.n	80036ee <_printf_float+0x1a6>
 80036e8:	3301      	adds	r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	6123      	str	r3, [r4, #16]
 80036ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80036f0:	f04f 0900 	mov.w	r9, #0
 80036f4:	e7de      	b.n	80036b4 <_printf_float+0x16c>
 80036f6:	b913      	cbnz	r3, 80036fe <_printf_float+0x1b6>
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	07d2      	lsls	r2, r2, #31
 80036fc:	d501      	bpl.n	8003702 <_printf_float+0x1ba>
 80036fe:	3302      	adds	r3, #2
 8003700:	e7f4      	b.n	80036ec <_printf_float+0x1a4>
 8003702:	2301      	movs	r3, #1
 8003704:	e7f2      	b.n	80036ec <_printf_float+0x1a4>
 8003706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800370a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800370c:	4299      	cmp	r1, r3
 800370e:	db05      	blt.n	800371c <_printf_float+0x1d4>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	6121      	str	r1, [r4, #16]
 8003714:	07d8      	lsls	r0, r3, #31
 8003716:	d5ea      	bpl.n	80036ee <_printf_float+0x1a6>
 8003718:	1c4b      	adds	r3, r1, #1
 800371a:	e7e7      	b.n	80036ec <_printf_float+0x1a4>
 800371c:	2900      	cmp	r1, #0
 800371e:	bfd4      	ite	le
 8003720:	f1c1 0202 	rsble	r2, r1, #2
 8003724:	2201      	movgt	r2, #1
 8003726:	4413      	add	r3, r2
 8003728:	e7e0      	b.n	80036ec <_printf_float+0x1a4>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	055a      	lsls	r2, r3, #21
 800372e:	d407      	bmi.n	8003740 <_printf_float+0x1f8>
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	4642      	mov	r2, r8
 8003734:	4631      	mov	r1, r6
 8003736:	4628      	mov	r0, r5
 8003738:	47b8      	blx	r7
 800373a:	3001      	adds	r0, #1
 800373c:	d12c      	bne.n	8003798 <_printf_float+0x250>
 800373e:	e764      	b.n	800360a <_printf_float+0xc2>
 8003740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003744:	f240 80e0 	bls.w	8003908 <_printf_float+0x3c0>
 8003748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800374c:	2200      	movs	r2, #0
 800374e:	2300      	movs	r3, #0
 8003750:	f7fd f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8003754:	2800      	cmp	r0, #0
 8003756:	d034      	beq.n	80037c2 <_printf_float+0x27a>
 8003758:	4a37      	ldr	r2, [pc, #220]	; (8003838 <_printf_float+0x2f0>)
 800375a:	2301      	movs	r3, #1
 800375c:	4631      	mov	r1, r6
 800375e:	4628      	mov	r0, r5
 8003760:	47b8      	blx	r7
 8003762:	3001      	adds	r0, #1
 8003764:	f43f af51 	beq.w	800360a <_printf_float+0xc2>
 8003768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800376c:	429a      	cmp	r2, r3
 800376e:	db02      	blt.n	8003776 <_printf_float+0x22e>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	07d8      	lsls	r0, r3, #31
 8003774:	d510      	bpl.n	8003798 <_printf_float+0x250>
 8003776:	ee18 3a10 	vmov	r3, s16
 800377a:	4652      	mov	r2, sl
 800377c:	4631      	mov	r1, r6
 800377e:	4628      	mov	r0, r5
 8003780:	47b8      	blx	r7
 8003782:	3001      	adds	r0, #1
 8003784:	f43f af41 	beq.w	800360a <_printf_float+0xc2>
 8003788:	f04f 0800 	mov.w	r8, #0
 800378c:	f104 091a 	add.w	r9, r4, #26
 8003790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	4543      	cmp	r3, r8
 8003796:	dc09      	bgt.n	80037ac <_printf_float+0x264>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	079b      	lsls	r3, r3, #30
 800379c:	f100 8105 	bmi.w	80039aa <_printf_float+0x462>
 80037a0:	68e0      	ldr	r0, [r4, #12]
 80037a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037a4:	4298      	cmp	r0, r3
 80037a6:	bfb8      	it	lt
 80037a8:	4618      	movlt	r0, r3
 80037aa:	e730      	b.n	800360e <_printf_float+0xc6>
 80037ac:	2301      	movs	r3, #1
 80037ae:	464a      	mov	r2, r9
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	f43f af27 	beq.w	800360a <_printf_float+0xc2>
 80037bc:	f108 0801 	add.w	r8, r8, #1
 80037c0:	e7e6      	b.n	8003790 <_printf_float+0x248>
 80037c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dc39      	bgt.n	800383c <_printf_float+0x2f4>
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <_printf_float+0x2f0>)
 80037ca:	2301      	movs	r3, #1
 80037cc:	4631      	mov	r1, r6
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b8      	blx	r7
 80037d2:	3001      	adds	r0, #1
 80037d4:	f43f af19 	beq.w	800360a <_printf_float+0xc2>
 80037d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037dc:	4313      	orrs	r3, r2
 80037de:	d102      	bne.n	80037e6 <_printf_float+0x29e>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	07d9      	lsls	r1, r3, #31
 80037e4:	d5d8      	bpl.n	8003798 <_printf_float+0x250>
 80037e6:	ee18 3a10 	vmov	r3, s16
 80037ea:	4652      	mov	r2, sl
 80037ec:	4631      	mov	r1, r6
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b8      	blx	r7
 80037f2:	3001      	adds	r0, #1
 80037f4:	f43f af09 	beq.w	800360a <_printf_float+0xc2>
 80037f8:	f04f 0900 	mov.w	r9, #0
 80037fc:	f104 0a1a 	add.w	sl, r4, #26
 8003800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003802:	425b      	negs	r3, r3
 8003804:	454b      	cmp	r3, r9
 8003806:	dc01      	bgt.n	800380c <_printf_float+0x2c4>
 8003808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800380a:	e792      	b.n	8003732 <_printf_float+0x1ea>
 800380c:	2301      	movs	r3, #1
 800380e:	4652      	mov	r2, sl
 8003810:	4631      	mov	r1, r6
 8003812:	4628      	mov	r0, r5
 8003814:	47b8      	blx	r7
 8003816:	3001      	adds	r0, #1
 8003818:	f43f aef7 	beq.w	800360a <_printf_float+0xc2>
 800381c:	f109 0901 	add.w	r9, r9, #1
 8003820:	e7ee      	b.n	8003800 <_printf_float+0x2b8>
 8003822:	bf00      	nop
 8003824:	7fefffff 	.word	0x7fefffff
 8003828:	08008688 	.word	0x08008688
 800382c:	0800868c 	.word	0x0800868c
 8003830:	08008694 	.word	0x08008694
 8003834:	08008690 	.word	0x08008690
 8003838:	08008a99 	.word	0x08008a99
 800383c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800383e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003840:	429a      	cmp	r2, r3
 8003842:	bfa8      	it	ge
 8003844:	461a      	movge	r2, r3
 8003846:	2a00      	cmp	r2, #0
 8003848:	4691      	mov	r9, r2
 800384a:	dc37      	bgt.n	80038bc <_printf_float+0x374>
 800384c:	f04f 0b00 	mov.w	fp, #0
 8003850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003854:	f104 021a 	add.w	r2, r4, #26
 8003858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800385a:	9305      	str	r3, [sp, #20]
 800385c:	eba3 0309 	sub.w	r3, r3, r9
 8003860:	455b      	cmp	r3, fp
 8003862:	dc33      	bgt.n	80038cc <_printf_float+0x384>
 8003864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003868:	429a      	cmp	r2, r3
 800386a:	db3b      	blt.n	80038e4 <_printf_float+0x39c>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	07da      	lsls	r2, r3, #31
 8003870:	d438      	bmi.n	80038e4 <_printf_float+0x39c>
 8003872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003874:	9b05      	ldr	r3, [sp, #20]
 8003876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	eba2 0901 	sub.w	r9, r2, r1
 800387e:	4599      	cmp	r9, r3
 8003880:	bfa8      	it	ge
 8003882:	4699      	movge	r9, r3
 8003884:	f1b9 0f00 	cmp.w	r9, #0
 8003888:	dc35      	bgt.n	80038f6 <_printf_float+0x3ae>
 800388a:	f04f 0800 	mov.w	r8, #0
 800388e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003892:	f104 0a1a 	add.w	sl, r4, #26
 8003896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	eba3 0309 	sub.w	r3, r3, r9
 80038a0:	4543      	cmp	r3, r8
 80038a2:	f77f af79 	ble.w	8003798 <_printf_float+0x250>
 80038a6:	2301      	movs	r3, #1
 80038a8:	4652      	mov	r2, sl
 80038aa:	4631      	mov	r1, r6
 80038ac:	4628      	mov	r0, r5
 80038ae:	47b8      	blx	r7
 80038b0:	3001      	adds	r0, #1
 80038b2:	f43f aeaa 	beq.w	800360a <_printf_float+0xc2>
 80038b6:	f108 0801 	add.w	r8, r8, #1
 80038ba:	e7ec      	b.n	8003896 <_printf_float+0x34e>
 80038bc:	4613      	mov	r3, r2
 80038be:	4631      	mov	r1, r6
 80038c0:	4642      	mov	r2, r8
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	d1c0      	bne.n	800384c <_printf_float+0x304>
 80038ca:	e69e      	b.n	800360a <_printf_float+0xc2>
 80038cc:	2301      	movs	r3, #1
 80038ce:	4631      	mov	r1, r6
 80038d0:	4628      	mov	r0, r5
 80038d2:	9205      	str	r2, [sp, #20]
 80038d4:	47b8      	blx	r7
 80038d6:	3001      	adds	r0, #1
 80038d8:	f43f ae97 	beq.w	800360a <_printf_float+0xc2>
 80038dc:	9a05      	ldr	r2, [sp, #20]
 80038de:	f10b 0b01 	add.w	fp, fp, #1
 80038e2:	e7b9      	b.n	8003858 <_printf_float+0x310>
 80038e4:	ee18 3a10 	vmov	r3, s16
 80038e8:	4652      	mov	r2, sl
 80038ea:	4631      	mov	r1, r6
 80038ec:	4628      	mov	r0, r5
 80038ee:	47b8      	blx	r7
 80038f0:	3001      	adds	r0, #1
 80038f2:	d1be      	bne.n	8003872 <_printf_float+0x32a>
 80038f4:	e689      	b.n	800360a <_printf_float+0xc2>
 80038f6:	9a05      	ldr	r2, [sp, #20]
 80038f8:	464b      	mov	r3, r9
 80038fa:	4442      	add	r2, r8
 80038fc:	4631      	mov	r1, r6
 80038fe:	4628      	mov	r0, r5
 8003900:	47b8      	blx	r7
 8003902:	3001      	adds	r0, #1
 8003904:	d1c1      	bne.n	800388a <_printf_float+0x342>
 8003906:	e680      	b.n	800360a <_printf_float+0xc2>
 8003908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800390a:	2a01      	cmp	r2, #1
 800390c:	dc01      	bgt.n	8003912 <_printf_float+0x3ca>
 800390e:	07db      	lsls	r3, r3, #31
 8003910:	d538      	bpl.n	8003984 <_printf_float+0x43c>
 8003912:	2301      	movs	r3, #1
 8003914:	4642      	mov	r2, r8
 8003916:	4631      	mov	r1, r6
 8003918:	4628      	mov	r0, r5
 800391a:	47b8      	blx	r7
 800391c:	3001      	adds	r0, #1
 800391e:	f43f ae74 	beq.w	800360a <_printf_float+0xc2>
 8003922:	ee18 3a10 	vmov	r3, s16
 8003926:	4652      	mov	r2, sl
 8003928:	4631      	mov	r1, r6
 800392a:	4628      	mov	r0, r5
 800392c:	47b8      	blx	r7
 800392e:	3001      	adds	r0, #1
 8003930:	f43f ae6b 	beq.w	800360a <_printf_float+0xc2>
 8003934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003938:	2200      	movs	r2, #0
 800393a:	2300      	movs	r3, #0
 800393c:	f7fd f8d4 	bl	8000ae8 <__aeabi_dcmpeq>
 8003940:	b9d8      	cbnz	r0, 800397a <_printf_float+0x432>
 8003942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003944:	f108 0201 	add.w	r2, r8, #1
 8003948:	3b01      	subs	r3, #1
 800394a:	4631      	mov	r1, r6
 800394c:	4628      	mov	r0, r5
 800394e:	47b8      	blx	r7
 8003950:	3001      	adds	r0, #1
 8003952:	d10e      	bne.n	8003972 <_printf_float+0x42a>
 8003954:	e659      	b.n	800360a <_printf_float+0xc2>
 8003956:	2301      	movs	r3, #1
 8003958:	4652      	mov	r2, sl
 800395a:	4631      	mov	r1, r6
 800395c:	4628      	mov	r0, r5
 800395e:	47b8      	blx	r7
 8003960:	3001      	adds	r0, #1
 8003962:	f43f ae52 	beq.w	800360a <_printf_float+0xc2>
 8003966:	f108 0801 	add.w	r8, r8, #1
 800396a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	4543      	cmp	r3, r8
 8003970:	dcf1      	bgt.n	8003956 <_printf_float+0x40e>
 8003972:	464b      	mov	r3, r9
 8003974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003978:	e6dc      	b.n	8003734 <_printf_float+0x1ec>
 800397a:	f04f 0800 	mov.w	r8, #0
 800397e:	f104 0a1a 	add.w	sl, r4, #26
 8003982:	e7f2      	b.n	800396a <_printf_float+0x422>
 8003984:	2301      	movs	r3, #1
 8003986:	4642      	mov	r2, r8
 8003988:	e7df      	b.n	800394a <_printf_float+0x402>
 800398a:	2301      	movs	r3, #1
 800398c:	464a      	mov	r2, r9
 800398e:	4631      	mov	r1, r6
 8003990:	4628      	mov	r0, r5
 8003992:	47b8      	blx	r7
 8003994:	3001      	adds	r0, #1
 8003996:	f43f ae38 	beq.w	800360a <_printf_float+0xc2>
 800399a:	f108 0801 	add.w	r8, r8, #1
 800399e:	68e3      	ldr	r3, [r4, #12]
 80039a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039a2:	1a5b      	subs	r3, r3, r1
 80039a4:	4543      	cmp	r3, r8
 80039a6:	dcf0      	bgt.n	800398a <_printf_float+0x442>
 80039a8:	e6fa      	b.n	80037a0 <_printf_float+0x258>
 80039aa:	f04f 0800 	mov.w	r8, #0
 80039ae:	f104 0919 	add.w	r9, r4, #25
 80039b2:	e7f4      	b.n	800399e <_printf_float+0x456>

080039b4 <_printf_common>:
 80039b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b8:	4616      	mov	r6, r2
 80039ba:	4699      	mov	r9, r3
 80039bc:	688a      	ldr	r2, [r1, #8]
 80039be:	690b      	ldr	r3, [r1, #16]
 80039c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bfb8      	it	lt
 80039c8:	4613      	movlt	r3, r2
 80039ca:	6033      	str	r3, [r6, #0]
 80039cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039d0:	4607      	mov	r7, r0
 80039d2:	460c      	mov	r4, r1
 80039d4:	b10a      	cbz	r2, 80039da <_printf_common+0x26>
 80039d6:	3301      	adds	r3, #1
 80039d8:	6033      	str	r3, [r6, #0]
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	0699      	lsls	r1, r3, #26
 80039de:	bf42      	ittt	mi
 80039e0:	6833      	ldrmi	r3, [r6, #0]
 80039e2:	3302      	addmi	r3, #2
 80039e4:	6033      	strmi	r3, [r6, #0]
 80039e6:	6825      	ldr	r5, [r4, #0]
 80039e8:	f015 0506 	ands.w	r5, r5, #6
 80039ec:	d106      	bne.n	80039fc <_printf_common+0x48>
 80039ee:	f104 0a19 	add.w	sl, r4, #25
 80039f2:	68e3      	ldr	r3, [r4, #12]
 80039f4:	6832      	ldr	r2, [r6, #0]
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	42ab      	cmp	r3, r5
 80039fa:	dc26      	bgt.n	8003a4a <_printf_common+0x96>
 80039fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a00:	1e13      	subs	r3, r2, #0
 8003a02:	6822      	ldr	r2, [r4, #0]
 8003a04:	bf18      	it	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	0692      	lsls	r2, r2, #26
 8003a0a:	d42b      	bmi.n	8003a64 <_printf_common+0xb0>
 8003a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a10:	4649      	mov	r1, r9
 8003a12:	4638      	mov	r0, r7
 8003a14:	47c0      	blx	r8
 8003a16:	3001      	adds	r0, #1
 8003a18:	d01e      	beq.n	8003a58 <_printf_common+0xa4>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	68e5      	ldr	r5, [r4, #12]
 8003a1e:	6832      	ldr	r2, [r6, #0]
 8003a20:	f003 0306 	and.w	r3, r3, #6
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	bf08      	it	eq
 8003a28:	1aad      	subeq	r5, r5, r2
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	6922      	ldr	r2, [r4, #16]
 8003a2e:	bf0c      	ite	eq
 8003a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a34:	2500      	movne	r5, #0
 8003a36:	4293      	cmp	r3, r2
 8003a38:	bfc4      	itt	gt
 8003a3a:	1a9b      	subgt	r3, r3, r2
 8003a3c:	18ed      	addgt	r5, r5, r3
 8003a3e:	2600      	movs	r6, #0
 8003a40:	341a      	adds	r4, #26
 8003a42:	42b5      	cmp	r5, r6
 8003a44:	d11a      	bne.n	8003a7c <_printf_common+0xc8>
 8003a46:	2000      	movs	r0, #0
 8003a48:	e008      	b.n	8003a5c <_printf_common+0xa8>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4652      	mov	r2, sl
 8003a4e:	4649      	mov	r1, r9
 8003a50:	4638      	mov	r0, r7
 8003a52:	47c0      	blx	r8
 8003a54:	3001      	adds	r0, #1
 8003a56:	d103      	bne.n	8003a60 <_printf_common+0xac>
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a60:	3501      	adds	r5, #1
 8003a62:	e7c6      	b.n	80039f2 <_printf_common+0x3e>
 8003a64:	18e1      	adds	r1, r4, r3
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	2030      	movs	r0, #48	; 0x30
 8003a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a6e:	4422      	add	r2, r4
 8003a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a78:	3302      	adds	r3, #2
 8003a7a:	e7c7      	b.n	8003a0c <_printf_common+0x58>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	4622      	mov	r2, r4
 8003a80:	4649      	mov	r1, r9
 8003a82:	4638      	mov	r0, r7
 8003a84:	47c0      	blx	r8
 8003a86:	3001      	adds	r0, #1
 8003a88:	d0e6      	beq.n	8003a58 <_printf_common+0xa4>
 8003a8a:	3601      	adds	r6, #1
 8003a8c:	e7d9      	b.n	8003a42 <_printf_common+0x8e>
	...

08003a90 <_printf_i>:
 8003a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a94:	460c      	mov	r4, r1
 8003a96:	4691      	mov	r9, r2
 8003a98:	7e27      	ldrb	r7, [r4, #24]
 8003a9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a9c:	2f78      	cmp	r7, #120	; 0x78
 8003a9e:	4680      	mov	r8, r0
 8003aa0:	469a      	mov	sl, r3
 8003aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa6:	d807      	bhi.n	8003ab8 <_printf_i+0x28>
 8003aa8:	2f62      	cmp	r7, #98	; 0x62
 8003aaa:	d80a      	bhi.n	8003ac2 <_printf_i+0x32>
 8003aac:	2f00      	cmp	r7, #0
 8003aae:	f000 80d8 	beq.w	8003c62 <_printf_i+0x1d2>
 8003ab2:	2f58      	cmp	r7, #88	; 0x58
 8003ab4:	f000 80a3 	beq.w	8003bfe <_printf_i+0x16e>
 8003ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ac0:	e03a      	b.n	8003b38 <_printf_i+0xa8>
 8003ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ac6:	2b15      	cmp	r3, #21
 8003ac8:	d8f6      	bhi.n	8003ab8 <_printf_i+0x28>
 8003aca:	a001      	add	r0, pc, #4	; (adr r0, 8003ad0 <_printf_i+0x40>)
 8003acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ad0:	08003b29 	.word	0x08003b29
 8003ad4:	08003b3d 	.word	0x08003b3d
 8003ad8:	08003ab9 	.word	0x08003ab9
 8003adc:	08003ab9 	.word	0x08003ab9
 8003ae0:	08003ab9 	.word	0x08003ab9
 8003ae4:	08003ab9 	.word	0x08003ab9
 8003ae8:	08003b3d 	.word	0x08003b3d
 8003aec:	08003ab9 	.word	0x08003ab9
 8003af0:	08003ab9 	.word	0x08003ab9
 8003af4:	08003ab9 	.word	0x08003ab9
 8003af8:	08003ab9 	.word	0x08003ab9
 8003afc:	08003c49 	.word	0x08003c49
 8003b00:	08003b6d 	.word	0x08003b6d
 8003b04:	08003c2b 	.word	0x08003c2b
 8003b08:	08003ab9 	.word	0x08003ab9
 8003b0c:	08003ab9 	.word	0x08003ab9
 8003b10:	08003c6b 	.word	0x08003c6b
 8003b14:	08003ab9 	.word	0x08003ab9
 8003b18:	08003b6d 	.word	0x08003b6d
 8003b1c:	08003ab9 	.word	0x08003ab9
 8003b20:	08003ab9 	.word	0x08003ab9
 8003b24:	08003c33 	.word	0x08003c33
 8003b28:	680b      	ldr	r3, [r1, #0]
 8003b2a:	1d1a      	adds	r2, r3, #4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	600a      	str	r2, [r1, #0]
 8003b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0a3      	b.n	8003c84 <_printf_i+0x1f4>
 8003b3c:	6825      	ldr	r5, [r4, #0]
 8003b3e:	6808      	ldr	r0, [r1, #0]
 8003b40:	062e      	lsls	r6, r5, #24
 8003b42:	f100 0304 	add.w	r3, r0, #4
 8003b46:	d50a      	bpl.n	8003b5e <_printf_i+0xce>
 8003b48:	6805      	ldr	r5, [r0, #0]
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	da03      	bge.n	8003b58 <_printf_i+0xc8>
 8003b50:	232d      	movs	r3, #45	; 0x2d
 8003b52:	426d      	negs	r5, r5
 8003b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b58:	485e      	ldr	r0, [pc, #376]	; (8003cd4 <_printf_i+0x244>)
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	e019      	b.n	8003b92 <_printf_i+0x102>
 8003b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b62:	6805      	ldr	r5, [r0, #0]
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	bf18      	it	ne
 8003b68:	b22d      	sxthne	r5, r5
 8003b6a:	e7ef      	b.n	8003b4c <_printf_i+0xbc>
 8003b6c:	680b      	ldr	r3, [r1, #0]
 8003b6e:	6825      	ldr	r5, [r4, #0]
 8003b70:	1d18      	adds	r0, r3, #4
 8003b72:	6008      	str	r0, [r1, #0]
 8003b74:	0628      	lsls	r0, r5, #24
 8003b76:	d501      	bpl.n	8003b7c <_printf_i+0xec>
 8003b78:	681d      	ldr	r5, [r3, #0]
 8003b7a:	e002      	b.n	8003b82 <_printf_i+0xf2>
 8003b7c:	0669      	lsls	r1, r5, #25
 8003b7e:	d5fb      	bpl.n	8003b78 <_printf_i+0xe8>
 8003b80:	881d      	ldrh	r5, [r3, #0]
 8003b82:	4854      	ldr	r0, [pc, #336]	; (8003cd4 <_printf_i+0x244>)
 8003b84:	2f6f      	cmp	r7, #111	; 0x6f
 8003b86:	bf0c      	ite	eq
 8003b88:	2308      	moveq	r3, #8
 8003b8a:	230a      	movne	r3, #10
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b92:	6866      	ldr	r6, [r4, #4]
 8003b94:	60a6      	str	r6, [r4, #8]
 8003b96:	2e00      	cmp	r6, #0
 8003b98:	bfa2      	ittt	ge
 8003b9a:	6821      	ldrge	r1, [r4, #0]
 8003b9c:	f021 0104 	bicge.w	r1, r1, #4
 8003ba0:	6021      	strge	r1, [r4, #0]
 8003ba2:	b90d      	cbnz	r5, 8003ba8 <_printf_i+0x118>
 8003ba4:	2e00      	cmp	r6, #0
 8003ba6:	d04d      	beq.n	8003c44 <_printf_i+0x1b4>
 8003ba8:	4616      	mov	r6, r2
 8003baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bae:	fb03 5711 	mls	r7, r3, r1, r5
 8003bb2:	5dc7      	ldrb	r7, [r0, r7]
 8003bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bb8:	462f      	mov	r7, r5
 8003bba:	42bb      	cmp	r3, r7
 8003bbc:	460d      	mov	r5, r1
 8003bbe:	d9f4      	bls.n	8003baa <_printf_i+0x11a>
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d10b      	bne.n	8003bdc <_printf_i+0x14c>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	07df      	lsls	r7, r3, #31
 8003bc8:	d508      	bpl.n	8003bdc <_printf_i+0x14c>
 8003bca:	6923      	ldr	r3, [r4, #16]
 8003bcc:	6861      	ldr	r1, [r4, #4]
 8003bce:	4299      	cmp	r1, r3
 8003bd0:	bfde      	ittt	le
 8003bd2:	2330      	movle	r3, #48	; 0x30
 8003bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bd8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003bdc:	1b92      	subs	r2, r2, r6
 8003bde:	6122      	str	r2, [r4, #16]
 8003be0:	f8cd a000 	str.w	sl, [sp]
 8003be4:	464b      	mov	r3, r9
 8003be6:	aa03      	add	r2, sp, #12
 8003be8:	4621      	mov	r1, r4
 8003bea:	4640      	mov	r0, r8
 8003bec:	f7ff fee2 	bl	80039b4 <_printf_common>
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	d14c      	bne.n	8003c8e <_printf_i+0x1fe>
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bf8:	b004      	add	sp, #16
 8003bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bfe:	4835      	ldr	r0, [pc, #212]	; (8003cd4 <_printf_i+0x244>)
 8003c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	680e      	ldr	r6, [r1, #0]
 8003c08:	061f      	lsls	r7, r3, #24
 8003c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c0e:	600e      	str	r6, [r1, #0]
 8003c10:	d514      	bpl.n	8003c3c <_printf_i+0x1ac>
 8003c12:	07d9      	lsls	r1, r3, #31
 8003c14:	bf44      	itt	mi
 8003c16:	f043 0320 	orrmi.w	r3, r3, #32
 8003c1a:	6023      	strmi	r3, [r4, #0]
 8003c1c:	b91d      	cbnz	r5, 8003c26 <_printf_i+0x196>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f023 0320 	bic.w	r3, r3, #32
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	2310      	movs	r3, #16
 8003c28:	e7b0      	b.n	8003b8c <_printf_i+0xfc>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	f043 0320 	orr.w	r3, r3, #32
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	2378      	movs	r3, #120	; 0x78
 8003c34:	4828      	ldr	r0, [pc, #160]	; (8003cd8 <_printf_i+0x248>)
 8003c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c3a:	e7e3      	b.n	8003c04 <_printf_i+0x174>
 8003c3c:	065e      	lsls	r6, r3, #25
 8003c3e:	bf48      	it	mi
 8003c40:	b2ad      	uxthmi	r5, r5
 8003c42:	e7e6      	b.n	8003c12 <_printf_i+0x182>
 8003c44:	4616      	mov	r6, r2
 8003c46:	e7bb      	b.n	8003bc0 <_printf_i+0x130>
 8003c48:	680b      	ldr	r3, [r1, #0]
 8003c4a:	6826      	ldr	r6, [r4, #0]
 8003c4c:	6960      	ldr	r0, [r4, #20]
 8003c4e:	1d1d      	adds	r5, r3, #4
 8003c50:	600d      	str	r5, [r1, #0]
 8003c52:	0635      	lsls	r5, r6, #24
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	d501      	bpl.n	8003c5c <_printf_i+0x1cc>
 8003c58:	6018      	str	r0, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <_printf_i+0x1d2>
 8003c5c:	0671      	lsls	r1, r6, #25
 8003c5e:	d5fb      	bpl.n	8003c58 <_printf_i+0x1c8>
 8003c60:	8018      	strh	r0, [r3, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	6123      	str	r3, [r4, #16]
 8003c66:	4616      	mov	r6, r2
 8003c68:	e7ba      	b.n	8003be0 <_printf_i+0x150>
 8003c6a:	680b      	ldr	r3, [r1, #0]
 8003c6c:	1d1a      	adds	r2, r3, #4
 8003c6e:	600a      	str	r2, [r1, #0]
 8003c70:	681e      	ldr	r6, [r3, #0]
 8003c72:	6862      	ldr	r2, [r4, #4]
 8003c74:	2100      	movs	r1, #0
 8003c76:	4630      	mov	r0, r6
 8003c78:	f7fc fac2 	bl	8000200 <memchr>
 8003c7c:	b108      	cbz	r0, 8003c82 <_printf_i+0x1f2>
 8003c7e:	1b80      	subs	r0, r0, r6
 8003c80:	6060      	str	r0, [r4, #4]
 8003c82:	6863      	ldr	r3, [r4, #4]
 8003c84:	6123      	str	r3, [r4, #16]
 8003c86:	2300      	movs	r3, #0
 8003c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c8c:	e7a8      	b.n	8003be0 <_printf_i+0x150>
 8003c8e:	6923      	ldr	r3, [r4, #16]
 8003c90:	4632      	mov	r2, r6
 8003c92:	4649      	mov	r1, r9
 8003c94:	4640      	mov	r0, r8
 8003c96:	47d0      	blx	sl
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d0ab      	beq.n	8003bf4 <_printf_i+0x164>
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	079b      	lsls	r3, r3, #30
 8003ca0:	d413      	bmi.n	8003cca <_printf_i+0x23a>
 8003ca2:	68e0      	ldr	r0, [r4, #12]
 8003ca4:	9b03      	ldr	r3, [sp, #12]
 8003ca6:	4298      	cmp	r0, r3
 8003ca8:	bfb8      	it	lt
 8003caa:	4618      	movlt	r0, r3
 8003cac:	e7a4      	b.n	8003bf8 <_printf_i+0x168>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	4632      	mov	r2, r6
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	4640      	mov	r0, r8
 8003cb6:	47d0      	blx	sl
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d09b      	beq.n	8003bf4 <_printf_i+0x164>
 8003cbc:	3501      	adds	r5, #1
 8003cbe:	68e3      	ldr	r3, [r4, #12]
 8003cc0:	9903      	ldr	r1, [sp, #12]
 8003cc2:	1a5b      	subs	r3, r3, r1
 8003cc4:	42ab      	cmp	r3, r5
 8003cc6:	dcf2      	bgt.n	8003cae <_printf_i+0x21e>
 8003cc8:	e7eb      	b.n	8003ca2 <_printf_i+0x212>
 8003cca:	2500      	movs	r5, #0
 8003ccc:	f104 0619 	add.w	r6, r4, #25
 8003cd0:	e7f5      	b.n	8003cbe <_printf_i+0x22e>
 8003cd2:	bf00      	nop
 8003cd4:	08008698 	.word	0x08008698
 8003cd8:	080086a9 	.word	0x080086a9

08003cdc <_scanf_float>:
 8003cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	4617      	mov	r7, r2
 8003ce4:	9303      	str	r3, [sp, #12]
 8003ce6:	688b      	ldr	r3, [r1, #8]
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003cee:	bf83      	ittte	hi
 8003cf0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003cf4:	195b      	addhi	r3, r3, r5
 8003cf6:	9302      	strhi	r3, [sp, #8]
 8003cf8:	2300      	movls	r3, #0
 8003cfa:	bf86      	itte	hi
 8003cfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003d00:	608b      	strhi	r3, [r1, #8]
 8003d02:	9302      	strls	r3, [sp, #8]
 8003d04:	680b      	ldr	r3, [r1, #0]
 8003d06:	468b      	mov	fp, r1
 8003d08:	2500      	movs	r5, #0
 8003d0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003d0e:	f84b 3b1c 	str.w	r3, [fp], #28
 8003d12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003d16:	4680      	mov	r8, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	465e      	mov	r6, fp
 8003d1c:	46aa      	mov	sl, r5
 8003d1e:	46a9      	mov	r9, r5
 8003d20:	9501      	str	r5, [sp, #4]
 8003d22:	68a2      	ldr	r2, [r4, #8]
 8003d24:	b152      	cbz	r2, 8003d3c <_scanf_float+0x60>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8003d2c:	d864      	bhi.n	8003df8 <_scanf_float+0x11c>
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d83c      	bhi.n	8003dac <_scanf_float+0xd0>
 8003d32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003d36:	b2c8      	uxtb	r0, r1
 8003d38:	280e      	cmp	r0, #14
 8003d3a:	d93a      	bls.n	8003db2 <_scanf_float+0xd6>
 8003d3c:	f1b9 0f00 	cmp.w	r9, #0
 8003d40:	d003      	beq.n	8003d4a <_scanf_float+0x6e>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003d4e:	f1ba 0f01 	cmp.w	sl, #1
 8003d52:	f200 8113 	bhi.w	8003f7c <_scanf_float+0x2a0>
 8003d56:	455e      	cmp	r6, fp
 8003d58:	f200 8105 	bhi.w	8003f66 <_scanf_float+0x28a>
 8003d5c:	2501      	movs	r5, #1
 8003d5e:	4628      	mov	r0, r5
 8003d60:	b007      	add	sp, #28
 8003d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003d6a:	2a0d      	cmp	r2, #13
 8003d6c:	d8e6      	bhi.n	8003d3c <_scanf_float+0x60>
 8003d6e:	a101      	add	r1, pc, #4	; (adr r1, 8003d74 <_scanf_float+0x98>)
 8003d70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003d74:	08003eb3 	.word	0x08003eb3
 8003d78:	08003d3d 	.word	0x08003d3d
 8003d7c:	08003d3d 	.word	0x08003d3d
 8003d80:	08003d3d 	.word	0x08003d3d
 8003d84:	08003f13 	.word	0x08003f13
 8003d88:	08003eeb 	.word	0x08003eeb
 8003d8c:	08003d3d 	.word	0x08003d3d
 8003d90:	08003d3d 	.word	0x08003d3d
 8003d94:	08003ec1 	.word	0x08003ec1
 8003d98:	08003d3d 	.word	0x08003d3d
 8003d9c:	08003d3d 	.word	0x08003d3d
 8003da0:	08003d3d 	.word	0x08003d3d
 8003da4:	08003d3d 	.word	0x08003d3d
 8003da8:	08003e79 	.word	0x08003e79
 8003dac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003db0:	e7db      	b.n	8003d6a <_scanf_float+0x8e>
 8003db2:	290e      	cmp	r1, #14
 8003db4:	d8c2      	bhi.n	8003d3c <_scanf_float+0x60>
 8003db6:	a001      	add	r0, pc, #4	; (adr r0, 8003dbc <_scanf_float+0xe0>)
 8003db8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003dbc:	08003e6b 	.word	0x08003e6b
 8003dc0:	08003d3d 	.word	0x08003d3d
 8003dc4:	08003e6b 	.word	0x08003e6b
 8003dc8:	08003eff 	.word	0x08003eff
 8003dcc:	08003d3d 	.word	0x08003d3d
 8003dd0:	08003e19 	.word	0x08003e19
 8003dd4:	08003e55 	.word	0x08003e55
 8003dd8:	08003e55 	.word	0x08003e55
 8003ddc:	08003e55 	.word	0x08003e55
 8003de0:	08003e55 	.word	0x08003e55
 8003de4:	08003e55 	.word	0x08003e55
 8003de8:	08003e55 	.word	0x08003e55
 8003dec:	08003e55 	.word	0x08003e55
 8003df0:	08003e55 	.word	0x08003e55
 8003df4:	08003e55 	.word	0x08003e55
 8003df8:	2b6e      	cmp	r3, #110	; 0x6e
 8003dfa:	d809      	bhi.n	8003e10 <_scanf_float+0x134>
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d8b2      	bhi.n	8003d66 <_scanf_float+0x8a>
 8003e00:	2b54      	cmp	r3, #84	; 0x54
 8003e02:	d077      	beq.n	8003ef4 <_scanf_float+0x218>
 8003e04:	2b59      	cmp	r3, #89	; 0x59
 8003e06:	d199      	bne.n	8003d3c <_scanf_float+0x60>
 8003e08:	2d07      	cmp	r5, #7
 8003e0a:	d197      	bne.n	8003d3c <_scanf_float+0x60>
 8003e0c:	2508      	movs	r5, #8
 8003e0e:	e029      	b.n	8003e64 <_scanf_float+0x188>
 8003e10:	2b74      	cmp	r3, #116	; 0x74
 8003e12:	d06f      	beq.n	8003ef4 <_scanf_float+0x218>
 8003e14:	2b79      	cmp	r3, #121	; 0x79
 8003e16:	e7f6      	b.n	8003e06 <_scanf_float+0x12a>
 8003e18:	6821      	ldr	r1, [r4, #0]
 8003e1a:	05c8      	lsls	r0, r1, #23
 8003e1c:	d51a      	bpl.n	8003e54 <_scanf_float+0x178>
 8003e1e:	9b02      	ldr	r3, [sp, #8]
 8003e20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003e24:	6021      	str	r1, [r4, #0]
 8003e26:	f109 0901 	add.w	r9, r9, #1
 8003e2a:	b11b      	cbz	r3, 8003e34 <_scanf_float+0x158>
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	3201      	adds	r2, #1
 8003e30:	9302      	str	r3, [sp, #8]
 8003e32:	60a2      	str	r2, [r4, #8]
 8003e34:	68a3      	ldr	r3, [r4, #8]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	60a3      	str	r3, [r4, #8]
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	f340 8084 	ble.w	8003f54 <_scanf_float+0x278>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	e766      	b.n	8003d22 <_scanf_float+0x46>
 8003e54:	eb1a 0f05 	cmn.w	sl, r5
 8003e58:	f47f af70 	bne.w	8003d3c <_scanf_float+0x60>
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	f806 3b01 	strb.w	r3, [r6], #1
 8003e68:	e7e4      	b.n	8003e34 <_scanf_float+0x158>
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	0610      	lsls	r0, r2, #24
 8003e6e:	f57f af65 	bpl.w	8003d3c <_scanf_float+0x60>
 8003e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e76:	e7f4      	b.n	8003e62 <_scanf_float+0x186>
 8003e78:	f1ba 0f00 	cmp.w	sl, #0
 8003e7c:	d10e      	bne.n	8003e9c <_scanf_float+0x1c0>
 8003e7e:	f1b9 0f00 	cmp.w	r9, #0
 8003e82:	d10e      	bne.n	8003ea2 <_scanf_float+0x1c6>
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003e8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003e8e:	d108      	bne.n	8003ea2 <_scanf_float+0x1c6>
 8003e90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003e94:	6022      	str	r2, [r4, #0]
 8003e96:	f04f 0a01 	mov.w	sl, #1
 8003e9a:	e7e3      	b.n	8003e64 <_scanf_float+0x188>
 8003e9c:	f1ba 0f02 	cmp.w	sl, #2
 8003ea0:	d055      	beq.n	8003f4e <_scanf_float+0x272>
 8003ea2:	2d01      	cmp	r5, #1
 8003ea4:	d002      	beq.n	8003eac <_scanf_float+0x1d0>
 8003ea6:	2d04      	cmp	r5, #4
 8003ea8:	f47f af48 	bne.w	8003d3c <_scanf_float+0x60>
 8003eac:	3501      	adds	r5, #1
 8003eae:	b2ed      	uxtb	r5, r5
 8003eb0:	e7d8      	b.n	8003e64 <_scanf_float+0x188>
 8003eb2:	f1ba 0f01 	cmp.w	sl, #1
 8003eb6:	f47f af41 	bne.w	8003d3c <_scanf_float+0x60>
 8003eba:	f04f 0a02 	mov.w	sl, #2
 8003ebe:	e7d1      	b.n	8003e64 <_scanf_float+0x188>
 8003ec0:	b97d      	cbnz	r5, 8003ee2 <_scanf_float+0x206>
 8003ec2:	f1b9 0f00 	cmp.w	r9, #0
 8003ec6:	f47f af3c 	bne.w	8003d42 <_scanf_float+0x66>
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003ed0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ed4:	f47f af39 	bne.w	8003d4a <_scanf_float+0x6e>
 8003ed8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003edc:	6022      	str	r2, [r4, #0]
 8003ede:	2501      	movs	r5, #1
 8003ee0:	e7c0      	b.n	8003e64 <_scanf_float+0x188>
 8003ee2:	2d03      	cmp	r5, #3
 8003ee4:	d0e2      	beq.n	8003eac <_scanf_float+0x1d0>
 8003ee6:	2d05      	cmp	r5, #5
 8003ee8:	e7de      	b.n	8003ea8 <_scanf_float+0x1cc>
 8003eea:	2d02      	cmp	r5, #2
 8003eec:	f47f af26 	bne.w	8003d3c <_scanf_float+0x60>
 8003ef0:	2503      	movs	r5, #3
 8003ef2:	e7b7      	b.n	8003e64 <_scanf_float+0x188>
 8003ef4:	2d06      	cmp	r5, #6
 8003ef6:	f47f af21 	bne.w	8003d3c <_scanf_float+0x60>
 8003efa:	2507      	movs	r5, #7
 8003efc:	e7b2      	b.n	8003e64 <_scanf_float+0x188>
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	0591      	lsls	r1, r2, #22
 8003f02:	f57f af1b 	bpl.w	8003d3c <_scanf_float+0x60>
 8003f06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003f0a:	6022      	str	r2, [r4, #0]
 8003f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f10:	e7a8      	b.n	8003e64 <_scanf_float+0x188>
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003f18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003f1c:	d006      	beq.n	8003f2c <_scanf_float+0x250>
 8003f1e:	0550      	lsls	r0, r2, #21
 8003f20:	f57f af0c 	bpl.w	8003d3c <_scanf_float+0x60>
 8003f24:	f1b9 0f00 	cmp.w	r9, #0
 8003f28:	f43f af0f 	beq.w	8003d4a <_scanf_float+0x6e>
 8003f2c:	0591      	lsls	r1, r2, #22
 8003f2e:	bf58      	it	pl
 8003f30:	9901      	ldrpl	r1, [sp, #4]
 8003f32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003f36:	bf58      	it	pl
 8003f38:	eba9 0101 	subpl.w	r1, r9, r1
 8003f3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003f40:	bf58      	it	pl
 8003f42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003f46:	6022      	str	r2, [r4, #0]
 8003f48:	f04f 0900 	mov.w	r9, #0
 8003f4c:	e78a      	b.n	8003e64 <_scanf_float+0x188>
 8003f4e:	f04f 0a03 	mov.w	sl, #3
 8003f52:	e787      	b.n	8003e64 <_scanf_float+0x188>
 8003f54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	4798      	blx	r3
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	f43f aedf 	beq.w	8003d22 <_scanf_float+0x46>
 8003f64:	e6ea      	b.n	8003d3c <_scanf_float+0x60>
 8003f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f6e:	463a      	mov	r2, r7
 8003f70:	4640      	mov	r0, r8
 8003f72:	4798      	blx	r3
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	6123      	str	r3, [r4, #16]
 8003f7a:	e6ec      	b.n	8003d56 <_scanf_float+0x7a>
 8003f7c:	1e6b      	subs	r3, r5, #1
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d825      	bhi.n	8003fce <_scanf_float+0x2f2>
 8003f82:	2d02      	cmp	r5, #2
 8003f84:	d836      	bhi.n	8003ff4 <_scanf_float+0x318>
 8003f86:	455e      	cmp	r6, fp
 8003f88:	f67f aee8 	bls.w	8003d5c <_scanf_float+0x80>
 8003f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f94:	463a      	mov	r2, r7
 8003f96:	4640      	mov	r0, r8
 8003f98:	4798      	blx	r3
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	6123      	str	r3, [r4, #16]
 8003fa0:	e7f1      	b.n	8003f86 <_scanf_float+0x2aa>
 8003fa2:	9802      	ldr	r0, [sp, #8]
 8003fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003fa8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003fac:	9002      	str	r0, [sp, #8]
 8003fae:	463a      	mov	r2, r7
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	4798      	blx	r3
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003fbe:	fa5f fa8a 	uxtb.w	sl, sl
 8003fc2:	f1ba 0f02 	cmp.w	sl, #2
 8003fc6:	d1ec      	bne.n	8003fa2 <_scanf_float+0x2c6>
 8003fc8:	3d03      	subs	r5, #3
 8003fca:	b2ed      	uxtb	r5, r5
 8003fcc:	1b76      	subs	r6, r6, r5
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	05da      	lsls	r2, r3, #23
 8003fd2:	d52f      	bpl.n	8004034 <_scanf_float+0x358>
 8003fd4:	055b      	lsls	r3, r3, #21
 8003fd6:	d510      	bpl.n	8003ffa <_scanf_float+0x31e>
 8003fd8:	455e      	cmp	r6, fp
 8003fda:	f67f aebf 	bls.w	8003d5c <_scanf_float+0x80>
 8003fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003fe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003fe6:	463a      	mov	r2, r7
 8003fe8:	4640      	mov	r0, r8
 8003fea:	4798      	blx	r3
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6123      	str	r3, [r4, #16]
 8003ff2:	e7f1      	b.n	8003fd8 <_scanf_float+0x2fc>
 8003ff4:	46aa      	mov	sl, r5
 8003ff6:	9602      	str	r6, [sp, #8]
 8003ff8:	e7df      	b.n	8003fba <_scanf_float+0x2de>
 8003ffa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003ffe:	6923      	ldr	r3, [r4, #16]
 8004000:	2965      	cmp	r1, #101	; 0x65
 8004002:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004006:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	d00c      	beq.n	8004028 <_scanf_float+0x34c>
 800400e:	2945      	cmp	r1, #69	; 0x45
 8004010:	d00a      	beq.n	8004028 <_scanf_float+0x34c>
 8004012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004016:	463a      	mov	r2, r7
 8004018:	4640      	mov	r0, r8
 800401a:	4798      	blx	r3
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004022:	3b01      	subs	r3, #1
 8004024:	1eb5      	subs	r5, r6, #2
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800402c:	463a      	mov	r2, r7
 800402e:	4640      	mov	r0, r8
 8004030:	4798      	blx	r3
 8004032:	462e      	mov	r6, r5
 8004034:	6825      	ldr	r5, [r4, #0]
 8004036:	f015 0510 	ands.w	r5, r5, #16
 800403a:	d158      	bne.n	80040ee <_scanf_float+0x412>
 800403c:	7035      	strb	r5, [r6, #0]
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d11c      	bne.n	8004084 <_scanf_float+0x3a8>
 800404a:	9b01      	ldr	r3, [sp, #4]
 800404c:	454b      	cmp	r3, r9
 800404e:	eba3 0209 	sub.w	r2, r3, r9
 8004052:	d124      	bne.n	800409e <_scanf_float+0x3c2>
 8004054:	2200      	movs	r2, #0
 8004056:	4659      	mov	r1, fp
 8004058:	4640      	mov	r0, r8
 800405a:	f000 ff43 	bl	8004ee4 <_strtod_r>
 800405e:	9b03      	ldr	r3, [sp, #12]
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f011 0f02 	tst.w	r1, #2
 8004068:	ec57 6b10 	vmov	r6, r7, d0
 800406c:	f103 0204 	add.w	r2, r3, #4
 8004070:	d020      	beq.n	80040b4 <_scanf_float+0x3d8>
 8004072:	9903      	ldr	r1, [sp, #12]
 8004074:	600a      	str	r2, [r1, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	e9c3 6700 	strd	r6, r7, [r3]
 800407c:	68e3      	ldr	r3, [r4, #12]
 800407e:	3301      	adds	r3, #1
 8004080:	60e3      	str	r3, [r4, #12]
 8004082:	e66c      	b.n	8003d5e <_scanf_float+0x82>
 8004084:	9b04      	ldr	r3, [sp, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0e4      	beq.n	8004054 <_scanf_float+0x378>
 800408a:	9905      	ldr	r1, [sp, #20]
 800408c:	230a      	movs	r3, #10
 800408e:	462a      	mov	r2, r5
 8004090:	3101      	adds	r1, #1
 8004092:	4640      	mov	r0, r8
 8004094:	f000 ffb0 	bl	8004ff8 <_strtol_r>
 8004098:	9b04      	ldr	r3, [sp, #16]
 800409a:	9e05      	ldr	r6, [sp, #20]
 800409c:	1ac2      	subs	r2, r0, r3
 800409e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80040a2:	429e      	cmp	r6, r3
 80040a4:	bf28      	it	cs
 80040a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80040aa:	4912      	ldr	r1, [pc, #72]	; (80040f4 <_scanf_float+0x418>)
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f85f 	bl	8004170 <siprintf>
 80040b2:	e7cf      	b.n	8004054 <_scanf_float+0x378>
 80040b4:	f011 0f04 	tst.w	r1, #4
 80040b8:	9903      	ldr	r1, [sp, #12]
 80040ba:	600a      	str	r2, [r1, #0]
 80040bc:	d1db      	bne.n	8004076 <_scanf_float+0x39a>
 80040be:	f8d3 8000 	ldr.w	r8, [r3]
 80040c2:	ee10 2a10 	vmov	r2, s0
 80040c6:	ee10 0a10 	vmov	r0, s0
 80040ca:	463b      	mov	r3, r7
 80040cc:	4639      	mov	r1, r7
 80040ce:	f7fc fd3d 	bl	8000b4c <__aeabi_dcmpun>
 80040d2:	b128      	cbz	r0, 80040e0 <_scanf_float+0x404>
 80040d4:	4808      	ldr	r0, [pc, #32]	; (80040f8 <_scanf_float+0x41c>)
 80040d6:	f000 f811 	bl	80040fc <nanf>
 80040da:	ed88 0a00 	vstr	s0, [r8]
 80040de:	e7cd      	b.n	800407c <_scanf_float+0x3a0>
 80040e0:	4630      	mov	r0, r6
 80040e2:	4639      	mov	r1, r7
 80040e4:	f7fc fd90 	bl	8000c08 <__aeabi_d2f>
 80040e8:	f8c8 0000 	str.w	r0, [r8]
 80040ec:	e7c6      	b.n	800407c <_scanf_float+0x3a0>
 80040ee:	2500      	movs	r5, #0
 80040f0:	e635      	b.n	8003d5e <_scanf_float+0x82>
 80040f2:	bf00      	nop
 80040f4:	080086ba 	.word	0x080086ba
 80040f8:	08008aeb 	.word	0x08008aeb

080040fc <nanf>:
 80040fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004104 <nanf+0x8>
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	7fc00000 	.word	0x7fc00000

08004108 <sniprintf>:
 8004108:	b40c      	push	{r2, r3}
 800410a:	b530      	push	{r4, r5, lr}
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <sniprintf+0x64>)
 800410e:	1e0c      	subs	r4, r1, #0
 8004110:	681d      	ldr	r5, [r3, #0]
 8004112:	b09d      	sub	sp, #116	; 0x74
 8004114:	da08      	bge.n	8004128 <sniprintf+0x20>
 8004116:	238b      	movs	r3, #139	; 0x8b
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800411e:	b01d      	add	sp, #116	; 0x74
 8004120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004124:	b002      	add	sp, #8
 8004126:	4770      	bx	lr
 8004128:	f44f 7302 	mov.w	r3, #520	; 0x208
 800412c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004130:	bf14      	ite	ne
 8004132:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004136:	4623      	moveq	r3, r4
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	9307      	str	r3, [sp, #28]
 800413c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004140:	9002      	str	r0, [sp, #8]
 8004142:	9006      	str	r0, [sp, #24]
 8004144:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800414a:	ab21      	add	r3, sp, #132	; 0x84
 800414c:	a902      	add	r1, sp, #8
 800414e:	4628      	mov	r0, r5
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	f002 ff6b 	bl	800702c <_svfiprintf_r>
 8004156:	1c43      	adds	r3, r0, #1
 8004158:	bfbc      	itt	lt
 800415a:	238b      	movlt	r3, #139	; 0x8b
 800415c:	602b      	strlt	r3, [r5, #0]
 800415e:	2c00      	cmp	r4, #0
 8004160:	d0dd      	beq.n	800411e <sniprintf+0x16>
 8004162:	9b02      	ldr	r3, [sp, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e7d9      	b.n	800411e <sniprintf+0x16>
 800416a:	bf00      	nop
 800416c:	20000010 	.word	0x20000010

08004170 <siprintf>:
 8004170:	b40e      	push	{r1, r2, r3}
 8004172:	b500      	push	{lr}
 8004174:	b09c      	sub	sp, #112	; 0x70
 8004176:	ab1d      	add	r3, sp, #116	; 0x74
 8004178:	9002      	str	r0, [sp, #8]
 800417a:	9006      	str	r0, [sp, #24]
 800417c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004180:	4809      	ldr	r0, [pc, #36]	; (80041a8 <siprintf+0x38>)
 8004182:	9107      	str	r1, [sp, #28]
 8004184:	9104      	str	r1, [sp, #16]
 8004186:	4909      	ldr	r1, [pc, #36]	; (80041ac <siprintf+0x3c>)
 8004188:	f853 2b04 	ldr.w	r2, [r3], #4
 800418c:	9105      	str	r1, [sp, #20]
 800418e:	6800      	ldr	r0, [r0, #0]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	a902      	add	r1, sp, #8
 8004194:	f002 ff4a 	bl	800702c <_svfiprintf_r>
 8004198:	9b02      	ldr	r3, [sp, #8]
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	b01c      	add	sp, #112	; 0x70
 80041a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041a4:	b003      	add	sp, #12
 80041a6:	4770      	bx	lr
 80041a8:	20000010 	.word	0x20000010
 80041ac:	ffff0208 	.word	0xffff0208

080041b0 <siscanf>:
 80041b0:	b40e      	push	{r1, r2, r3}
 80041b2:	b510      	push	{r4, lr}
 80041b4:	b09f      	sub	sp, #124	; 0x7c
 80041b6:	ac21      	add	r4, sp, #132	; 0x84
 80041b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80041bc:	f854 2b04 	ldr.w	r2, [r4], #4
 80041c0:	9201      	str	r2, [sp, #4]
 80041c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80041c6:	9004      	str	r0, [sp, #16]
 80041c8:	9008      	str	r0, [sp, #32]
 80041ca:	f7fc f811 	bl	80001f0 <strlen>
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <siscanf+0x50>)
 80041d0:	9005      	str	r0, [sp, #20]
 80041d2:	9009      	str	r0, [sp, #36]	; 0x24
 80041d4:	930d      	str	r3, [sp, #52]	; 0x34
 80041d6:	480b      	ldr	r0, [pc, #44]	; (8004204 <siscanf+0x54>)
 80041d8:	9a01      	ldr	r2, [sp, #4]
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	9403      	str	r4, [sp, #12]
 80041de:	2300      	movs	r3, #0
 80041e0:	9311      	str	r3, [sp, #68]	; 0x44
 80041e2:	9316      	str	r3, [sp, #88]	; 0x58
 80041e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80041ec:	a904      	add	r1, sp, #16
 80041ee:	4623      	mov	r3, r4
 80041f0:	f003 f876 	bl	80072e0 <__ssvfiscanf_r>
 80041f4:	b01f      	add	sp, #124	; 0x7c
 80041f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fa:	b003      	add	sp, #12
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	0800422b 	.word	0x0800422b
 8004204:	20000010 	.word	0x20000010

08004208 <__sread>:
 8004208:	b510      	push	{r4, lr}
 800420a:	460c      	mov	r4, r1
 800420c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004210:	f003 fb2a 	bl	8007868 <_read_r>
 8004214:	2800      	cmp	r0, #0
 8004216:	bfab      	itete	ge
 8004218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800421a:	89a3      	ldrhlt	r3, [r4, #12]
 800421c:	181b      	addge	r3, r3, r0
 800421e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004222:	bfac      	ite	ge
 8004224:	6563      	strge	r3, [r4, #84]	; 0x54
 8004226:	81a3      	strhlt	r3, [r4, #12]
 8004228:	bd10      	pop	{r4, pc}

0800422a <__seofread>:
 800422a:	2000      	movs	r0, #0
 800422c:	4770      	bx	lr

0800422e <__swrite>:
 800422e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004232:	461f      	mov	r7, r3
 8004234:	898b      	ldrh	r3, [r1, #12]
 8004236:	05db      	lsls	r3, r3, #23
 8004238:	4605      	mov	r5, r0
 800423a:	460c      	mov	r4, r1
 800423c:	4616      	mov	r6, r2
 800423e:	d505      	bpl.n	800424c <__swrite+0x1e>
 8004240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004244:	2302      	movs	r3, #2
 8004246:	2200      	movs	r2, #0
 8004248:	f002 f8e6 	bl	8006418 <_lseek_r>
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004256:	81a3      	strh	r3, [r4, #12]
 8004258:	4632      	mov	r2, r6
 800425a:	463b      	mov	r3, r7
 800425c:	4628      	mov	r0, r5
 800425e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004262:	f000 becb 	b.w	8004ffc <_write_r>

08004266 <__sseek>:
 8004266:	b510      	push	{r4, lr}
 8004268:	460c      	mov	r4, r1
 800426a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800426e:	f002 f8d3 	bl	8006418 <_lseek_r>
 8004272:	1c43      	adds	r3, r0, #1
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	bf15      	itete	ne
 8004278:	6560      	strne	r0, [r4, #84]	; 0x54
 800427a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800427e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004282:	81a3      	strheq	r3, [r4, #12]
 8004284:	bf18      	it	ne
 8004286:	81a3      	strhne	r3, [r4, #12]
 8004288:	bd10      	pop	{r4, pc}

0800428a <__sclose>:
 800428a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428e:	f000 bec7 	b.w	8005020 <_close_r>

08004292 <sulp>:
 8004292:	b570      	push	{r4, r5, r6, lr}
 8004294:	4604      	mov	r4, r0
 8004296:	460d      	mov	r5, r1
 8004298:	ec45 4b10 	vmov	d0, r4, r5
 800429c:	4616      	mov	r6, r2
 800429e:	f002 fc61 	bl	8006b64 <__ulp>
 80042a2:	ec51 0b10 	vmov	r0, r1, d0
 80042a6:	b17e      	cbz	r6, 80042c8 <sulp+0x36>
 80042a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80042ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dd09      	ble.n	80042c8 <sulp+0x36>
 80042b4:	051b      	lsls	r3, r3, #20
 80042b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80042ba:	2400      	movs	r4, #0
 80042bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	f7fc f9a8 	bl	8000618 <__aeabi_dmul>
 80042c8:	bd70      	pop	{r4, r5, r6, pc}
 80042ca:	0000      	movs	r0, r0
 80042cc:	0000      	movs	r0, r0
	...

080042d0 <_strtod_l>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	b0a3      	sub	sp, #140	; 0x8c
 80042d6:	461f      	mov	r7, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	931e      	str	r3, [sp, #120]	; 0x78
 80042dc:	4ba4      	ldr	r3, [pc, #656]	; (8004570 <_strtod_l+0x2a0>)
 80042de:	9219      	str	r2, [sp, #100]	; 0x64
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	9307      	str	r3, [sp, #28]
 80042e4:	4604      	mov	r4, r0
 80042e6:	4618      	mov	r0, r3
 80042e8:	4688      	mov	r8, r1
 80042ea:	f7fb ff81 	bl	80001f0 <strlen>
 80042ee:	f04f 0a00 	mov.w	sl, #0
 80042f2:	4605      	mov	r5, r0
 80042f4:	f04f 0b00 	mov.w	fp, #0
 80042f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80042fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	2a2b      	cmp	r2, #43	; 0x2b
 8004302:	d04c      	beq.n	800439e <_strtod_l+0xce>
 8004304:	d839      	bhi.n	800437a <_strtod_l+0xaa>
 8004306:	2a0d      	cmp	r2, #13
 8004308:	d832      	bhi.n	8004370 <_strtod_l+0xa0>
 800430a:	2a08      	cmp	r2, #8
 800430c:	d832      	bhi.n	8004374 <_strtod_l+0xa4>
 800430e:	2a00      	cmp	r2, #0
 8004310:	d03c      	beq.n	800438c <_strtod_l+0xbc>
 8004312:	2300      	movs	r3, #0
 8004314:	930e      	str	r3, [sp, #56]	; 0x38
 8004316:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004318:	7833      	ldrb	r3, [r6, #0]
 800431a:	2b30      	cmp	r3, #48	; 0x30
 800431c:	f040 80b4 	bne.w	8004488 <_strtod_l+0x1b8>
 8004320:	7873      	ldrb	r3, [r6, #1]
 8004322:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004326:	2b58      	cmp	r3, #88	; 0x58
 8004328:	d16c      	bne.n	8004404 <_strtod_l+0x134>
 800432a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	ab1e      	add	r3, sp, #120	; 0x78
 8004330:	9702      	str	r7, [sp, #8]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	4a8f      	ldr	r2, [pc, #572]	; (8004574 <_strtod_l+0x2a4>)
 8004336:	ab1f      	add	r3, sp, #124	; 0x7c
 8004338:	a91d      	add	r1, sp, #116	; 0x74
 800433a:	4620      	mov	r0, r4
 800433c:	f001 fd60 	bl	8005e00 <__gethex>
 8004340:	f010 0707 	ands.w	r7, r0, #7
 8004344:	4605      	mov	r5, r0
 8004346:	d005      	beq.n	8004354 <_strtod_l+0x84>
 8004348:	2f06      	cmp	r7, #6
 800434a:	d12a      	bne.n	80043a2 <_strtod_l+0xd2>
 800434c:	3601      	adds	r6, #1
 800434e:	2300      	movs	r3, #0
 8004350:	961d      	str	r6, [sp, #116]	; 0x74
 8004352:	930e      	str	r3, [sp, #56]	; 0x38
 8004354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 8596 	bne.w	8004e88 <_strtod_l+0xbb8>
 800435c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800435e:	b1db      	cbz	r3, 8004398 <_strtod_l+0xc8>
 8004360:	4652      	mov	r2, sl
 8004362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004366:	ec43 2b10 	vmov	d0, r2, r3
 800436a:	b023      	add	sp, #140	; 0x8c
 800436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004370:	2a20      	cmp	r2, #32
 8004372:	d1ce      	bne.n	8004312 <_strtod_l+0x42>
 8004374:	3301      	adds	r3, #1
 8004376:	931d      	str	r3, [sp, #116]	; 0x74
 8004378:	e7c0      	b.n	80042fc <_strtod_l+0x2c>
 800437a:	2a2d      	cmp	r2, #45	; 0x2d
 800437c:	d1c9      	bne.n	8004312 <_strtod_l+0x42>
 800437e:	2201      	movs	r2, #1
 8004380:	920e      	str	r2, [sp, #56]	; 0x38
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	921d      	str	r2, [sp, #116]	; 0x74
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1c4      	bne.n	8004316 <_strtod_l+0x46>
 800438c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800438e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 8576 	bne.w	8004e84 <_strtod_l+0xbb4>
 8004398:	4652      	mov	r2, sl
 800439a:	465b      	mov	r3, fp
 800439c:	e7e3      	b.n	8004366 <_strtod_l+0x96>
 800439e:	2200      	movs	r2, #0
 80043a0:	e7ee      	b.n	8004380 <_strtod_l+0xb0>
 80043a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80043a4:	b13a      	cbz	r2, 80043b6 <_strtod_l+0xe6>
 80043a6:	2135      	movs	r1, #53	; 0x35
 80043a8:	a820      	add	r0, sp, #128	; 0x80
 80043aa:	f002 fce6 	bl	8006d7a <__copybits>
 80043ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80043b0:	4620      	mov	r0, r4
 80043b2:	f002 f8ab 	bl	800650c <_Bfree>
 80043b6:	3f01      	subs	r7, #1
 80043b8:	2f05      	cmp	r7, #5
 80043ba:	d807      	bhi.n	80043cc <_strtod_l+0xfc>
 80043bc:	e8df f007 	tbb	[pc, r7]
 80043c0:	1d180b0e 	.word	0x1d180b0e
 80043c4:	030e      	.short	0x030e
 80043c6:	f04f 0b00 	mov.w	fp, #0
 80043ca:	46da      	mov	sl, fp
 80043cc:	0728      	lsls	r0, r5, #28
 80043ce:	d5c1      	bpl.n	8004354 <_strtod_l+0x84>
 80043d0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80043d4:	e7be      	b.n	8004354 <_strtod_l+0x84>
 80043d6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80043da:	e7f7      	b.n	80043cc <_strtod_l+0xfc>
 80043dc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80043e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80043e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80043ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80043ee:	e7ed      	b.n	80043cc <_strtod_l+0xfc>
 80043f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004578 <_strtod_l+0x2a8>
 80043f4:	f04f 0a00 	mov.w	sl, #0
 80043f8:	e7e8      	b.n	80043cc <_strtod_l+0xfc>
 80043fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80043fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004402:	e7e3      	b.n	80043cc <_strtod_l+0xfc>
 8004404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	921d      	str	r2, [sp, #116]	; 0x74
 800440a:	785b      	ldrb	r3, [r3, #1]
 800440c:	2b30      	cmp	r3, #48	; 0x30
 800440e:	d0f9      	beq.n	8004404 <_strtod_l+0x134>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d09f      	beq.n	8004354 <_strtod_l+0x84>
 8004414:	2301      	movs	r3, #1
 8004416:	f04f 0900 	mov.w	r9, #0
 800441a:	9304      	str	r3, [sp, #16]
 800441c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800441e:	930a      	str	r3, [sp, #40]	; 0x28
 8004420:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004424:	464f      	mov	r7, r9
 8004426:	220a      	movs	r2, #10
 8004428:	981d      	ldr	r0, [sp, #116]	; 0x74
 800442a:	7806      	ldrb	r6, [r0, #0]
 800442c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004430:	b2d9      	uxtb	r1, r3
 8004432:	2909      	cmp	r1, #9
 8004434:	d92a      	bls.n	800448c <_strtod_l+0x1bc>
 8004436:	9907      	ldr	r1, [sp, #28]
 8004438:	462a      	mov	r2, r5
 800443a:	f003 fa7b 	bl	8007934 <strncmp>
 800443e:	b398      	cbz	r0, 80044a8 <_strtod_l+0x1d8>
 8004440:	2000      	movs	r0, #0
 8004442:	4633      	mov	r3, r6
 8004444:	463d      	mov	r5, r7
 8004446:	9007      	str	r0, [sp, #28]
 8004448:	4602      	mov	r2, r0
 800444a:	2b65      	cmp	r3, #101	; 0x65
 800444c:	d001      	beq.n	8004452 <_strtod_l+0x182>
 800444e:	2b45      	cmp	r3, #69	; 0x45
 8004450:	d118      	bne.n	8004484 <_strtod_l+0x1b4>
 8004452:	b91d      	cbnz	r5, 800445c <_strtod_l+0x18c>
 8004454:	9b04      	ldr	r3, [sp, #16]
 8004456:	4303      	orrs	r3, r0
 8004458:	d098      	beq.n	800438c <_strtod_l+0xbc>
 800445a:	2500      	movs	r5, #0
 800445c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004460:	f108 0301 	add.w	r3, r8, #1
 8004464:	931d      	str	r3, [sp, #116]	; 0x74
 8004466:	f898 3001 	ldrb.w	r3, [r8, #1]
 800446a:	2b2b      	cmp	r3, #43	; 0x2b
 800446c:	d075      	beq.n	800455a <_strtod_l+0x28a>
 800446e:	2b2d      	cmp	r3, #45	; 0x2d
 8004470:	d07b      	beq.n	800456a <_strtod_l+0x29a>
 8004472:	f04f 0c00 	mov.w	ip, #0
 8004476:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800447a:	2909      	cmp	r1, #9
 800447c:	f240 8082 	bls.w	8004584 <_strtod_l+0x2b4>
 8004480:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004484:	2600      	movs	r6, #0
 8004486:	e09d      	b.n	80045c4 <_strtod_l+0x2f4>
 8004488:	2300      	movs	r3, #0
 800448a:	e7c4      	b.n	8004416 <_strtod_l+0x146>
 800448c:	2f08      	cmp	r7, #8
 800448e:	bfd8      	it	le
 8004490:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004492:	f100 0001 	add.w	r0, r0, #1
 8004496:	bfda      	itte	le
 8004498:	fb02 3301 	mlale	r3, r2, r1, r3
 800449c:	9309      	strle	r3, [sp, #36]	; 0x24
 800449e:	fb02 3909 	mlagt	r9, r2, r9, r3
 80044a2:	3701      	adds	r7, #1
 80044a4:	901d      	str	r0, [sp, #116]	; 0x74
 80044a6:	e7bf      	b.n	8004428 <_strtod_l+0x158>
 80044a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80044aa:	195a      	adds	r2, r3, r5
 80044ac:	921d      	str	r2, [sp, #116]	; 0x74
 80044ae:	5d5b      	ldrb	r3, [r3, r5]
 80044b0:	2f00      	cmp	r7, #0
 80044b2:	d037      	beq.n	8004524 <_strtod_l+0x254>
 80044b4:	9007      	str	r0, [sp, #28]
 80044b6:	463d      	mov	r5, r7
 80044b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80044bc:	2a09      	cmp	r2, #9
 80044be:	d912      	bls.n	80044e6 <_strtod_l+0x216>
 80044c0:	2201      	movs	r2, #1
 80044c2:	e7c2      	b.n	800444a <_strtod_l+0x17a>
 80044c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	921d      	str	r2, [sp, #116]	; 0x74
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	3001      	adds	r0, #1
 80044ce:	2b30      	cmp	r3, #48	; 0x30
 80044d0:	d0f8      	beq.n	80044c4 <_strtod_l+0x1f4>
 80044d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80044d6:	2a08      	cmp	r2, #8
 80044d8:	f200 84db 	bhi.w	8004e92 <_strtod_l+0xbc2>
 80044dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80044de:	9007      	str	r0, [sp, #28]
 80044e0:	2000      	movs	r0, #0
 80044e2:	920a      	str	r2, [sp, #40]	; 0x28
 80044e4:	4605      	mov	r5, r0
 80044e6:	3b30      	subs	r3, #48	; 0x30
 80044e8:	f100 0201 	add.w	r2, r0, #1
 80044ec:	d014      	beq.n	8004518 <_strtod_l+0x248>
 80044ee:	9907      	ldr	r1, [sp, #28]
 80044f0:	4411      	add	r1, r2
 80044f2:	9107      	str	r1, [sp, #28]
 80044f4:	462a      	mov	r2, r5
 80044f6:	eb00 0e05 	add.w	lr, r0, r5
 80044fa:	210a      	movs	r1, #10
 80044fc:	4572      	cmp	r2, lr
 80044fe:	d113      	bne.n	8004528 <_strtod_l+0x258>
 8004500:	182a      	adds	r2, r5, r0
 8004502:	2a08      	cmp	r2, #8
 8004504:	f105 0501 	add.w	r5, r5, #1
 8004508:	4405      	add	r5, r0
 800450a:	dc1c      	bgt.n	8004546 <_strtod_l+0x276>
 800450c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800450e:	220a      	movs	r2, #10
 8004510:	fb02 3301 	mla	r3, r2, r1, r3
 8004514:	9309      	str	r3, [sp, #36]	; 0x24
 8004516:	2200      	movs	r2, #0
 8004518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	911d      	str	r1, [sp, #116]	; 0x74
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	4610      	mov	r0, r2
 8004522:	e7c9      	b.n	80044b8 <_strtod_l+0x1e8>
 8004524:	4638      	mov	r0, r7
 8004526:	e7d2      	b.n	80044ce <_strtod_l+0x1fe>
 8004528:	2a08      	cmp	r2, #8
 800452a:	dc04      	bgt.n	8004536 <_strtod_l+0x266>
 800452c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800452e:	434e      	muls	r6, r1
 8004530:	9609      	str	r6, [sp, #36]	; 0x24
 8004532:	3201      	adds	r2, #1
 8004534:	e7e2      	b.n	80044fc <_strtod_l+0x22c>
 8004536:	f102 0c01 	add.w	ip, r2, #1
 800453a:	f1bc 0f10 	cmp.w	ip, #16
 800453e:	bfd8      	it	le
 8004540:	fb01 f909 	mulle.w	r9, r1, r9
 8004544:	e7f5      	b.n	8004532 <_strtod_l+0x262>
 8004546:	2d10      	cmp	r5, #16
 8004548:	bfdc      	itt	le
 800454a:	220a      	movle	r2, #10
 800454c:	fb02 3909 	mlale	r9, r2, r9, r3
 8004550:	e7e1      	b.n	8004516 <_strtod_l+0x246>
 8004552:	2300      	movs	r3, #0
 8004554:	9307      	str	r3, [sp, #28]
 8004556:	2201      	movs	r2, #1
 8004558:	e77c      	b.n	8004454 <_strtod_l+0x184>
 800455a:	f04f 0c00 	mov.w	ip, #0
 800455e:	f108 0302 	add.w	r3, r8, #2
 8004562:	931d      	str	r3, [sp, #116]	; 0x74
 8004564:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004568:	e785      	b.n	8004476 <_strtod_l+0x1a6>
 800456a:	f04f 0c01 	mov.w	ip, #1
 800456e:	e7f6      	b.n	800455e <_strtod_l+0x28e>
 8004570:	08008910 	.word	0x08008910
 8004574:	080086c0 	.word	0x080086c0
 8004578:	7ff00000 	.word	0x7ff00000
 800457c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	911d      	str	r1, [sp, #116]	; 0x74
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	2b30      	cmp	r3, #48	; 0x30
 8004586:	d0f9      	beq.n	800457c <_strtod_l+0x2ac>
 8004588:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800458c:	2908      	cmp	r1, #8
 800458e:	f63f af79 	bhi.w	8004484 <_strtod_l+0x1b4>
 8004592:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004596:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004598:	9308      	str	r3, [sp, #32]
 800459a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800459c:	1c59      	adds	r1, r3, #1
 800459e:	911d      	str	r1, [sp, #116]	; 0x74
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80045a6:	2e09      	cmp	r6, #9
 80045a8:	d937      	bls.n	800461a <_strtod_l+0x34a>
 80045aa:	9e08      	ldr	r6, [sp, #32]
 80045ac:	1b89      	subs	r1, r1, r6
 80045ae:	2908      	cmp	r1, #8
 80045b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80045b4:	dc02      	bgt.n	80045bc <_strtod_l+0x2ec>
 80045b6:	4576      	cmp	r6, lr
 80045b8:	bfa8      	it	ge
 80045ba:	4676      	movge	r6, lr
 80045bc:	f1bc 0f00 	cmp.w	ip, #0
 80045c0:	d000      	beq.n	80045c4 <_strtod_l+0x2f4>
 80045c2:	4276      	negs	r6, r6
 80045c4:	2d00      	cmp	r5, #0
 80045c6:	d14f      	bne.n	8004668 <_strtod_l+0x398>
 80045c8:	9904      	ldr	r1, [sp, #16]
 80045ca:	4301      	orrs	r1, r0
 80045cc:	f47f aec2 	bne.w	8004354 <_strtod_l+0x84>
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	f47f aedb 	bne.w	800438c <_strtod_l+0xbc>
 80045d6:	2b69      	cmp	r3, #105	; 0x69
 80045d8:	d027      	beq.n	800462a <_strtod_l+0x35a>
 80045da:	dc24      	bgt.n	8004626 <_strtod_l+0x356>
 80045dc:	2b49      	cmp	r3, #73	; 0x49
 80045de:	d024      	beq.n	800462a <_strtod_l+0x35a>
 80045e0:	2b4e      	cmp	r3, #78	; 0x4e
 80045e2:	f47f aed3 	bne.w	800438c <_strtod_l+0xbc>
 80045e6:	499e      	ldr	r1, [pc, #632]	; (8004860 <_strtod_l+0x590>)
 80045e8:	a81d      	add	r0, sp, #116	; 0x74
 80045ea:	f001 fe61 	bl	80062b0 <__match>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f43f aecc 	beq.w	800438c <_strtod_l+0xbc>
 80045f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b28      	cmp	r3, #40	; 0x28
 80045fa:	d12d      	bne.n	8004658 <_strtod_l+0x388>
 80045fc:	4999      	ldr	r1, [pc, #612]	; (8004864 <_strtod_l+0x594>)
 80045fe:	aa20      	add	r2, sp, #128	; 0x80
 8004600:	a81d      	add	r0, sp, #116	; 0x74
 8004602:	f001 fe69 	bl	80062d8 <__hexnan>
 8004606:	2805      	cmp	r0, #5
 8004608:	d126      	bne.n	8004658 <_strtod_l+0x388>
 800460a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800460c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004610:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004614:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004618:	e69c      	b.n	8004354 <_strtod_l+0x84>
 800461a:	210a      	movs	r1, #10
 800461c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004620:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004624:	e7b9      	b.n	800459a <_strtod_l+0x2ca>
 8004626:	2b6e      	cmp	r3, #110	; 0x6e
 8004628:	e7db      	b.n	80045e2 <_strtod_l+0x312>
 800462a:	498f      	ldr	r1, [pc, #572]	; (8004868 <_strtod_l+0x598>)
 800462c:	a81d      	add	r0, sp, #116	; 0x74
 800462e:	f001 fe3f 	bl	80062b0 <__match>
 8004632:	2800      	cmp	r0, #0
 8004634:	f43f aeaa 	beq.w	800438c <_strtod_l+0xbc>
 8004638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800463a:	498c      	ldr	r1, [pc, #560]	; (800486c <_strtod_l+0x59c>)
 800463c:	3b01      	subs	r3, #1
 800463e:	a81d      	add	r0, sp, #116	; 0x74
 8004640:	931d      	str	r3, [sp, #116]	; 0x74
 8004642:	f001 fe35 	bl	80062b0 <__match>
 8004646:	b910      	cbnz	r0, 800464e <_strtod_l+0x37e>
 8004648:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800464a:	3301      	adds	r3, #1
 800464c:	931d      	str	r3, [sp, #116]	; 0x74
 800464e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800487c <_strtod_l+0x5ac>
 8004652:	f04f 0a00 	mov.w	sl, #0
 8004656:	e67d      	b.n	8004354 <_strtod_l+0x84>
 8004658:	4885      	ldr	r0, [pc, #532]	; (8004870 <_strtod_l+0x5a0>)
 800465a:	f003 f919 	bl	8007890 <nan>
 800465e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004662:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004666:	e675      	b.n	8004354 <_strtod_l+0x84>
 8004668:	9b07      	ldr	r3, [sp, #28]
 800466a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800466c:	1af3      	subs	r3, r6, r3
 800466e:	2f00      	cmp	r7, #0
 8004670:	bf08      	it	eq
 8004672:	462f      	moveq	r7, r5
 8004674:	2d10      	cmp	r5, #16
 8004676:	9308      	str	r3, [sp, #32]
 8004678:	46a8      	mov	r8, r5
 800467a:	bfa8      	it	ge
 800467c:	f04f 0810 	movge.w	r8, #16
 8004680:	f7fb ff50 	bl	8000524 <__aeabi_ui2d>
 8004684:	2d09      	cmp	r5, #9
 8004686:	4682      	mov	sl, r0
 8004688:	468b      	mov	fp, r1
 800468a:	dd13      	ble.n	80046b4 <_strtod_l+0x3e4>
 800468c:	4b79      	ldr	r3, [pc, #484]	; (8004874 <_strtod_l+0x5a4>)
 800468e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004692:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004696:	f7fb ffbf 	bl	8000618 <__aeabi_dmul>
 800469a:	4682      	mov	sl, r0
 800469c:	4648      	mov	r0, r9
 800469e:	468b      	mov	fp, r1
 80046a0:	f7fb ff40 	bl	8000524 <__aeabi_ui2d>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4650      	mov	r0, sl
 80046aa:	4659      	mov	r1, fp
 80046ac:	f7fb fdfe 	bl	80002ac <__adddf3>
 80046b0:	4682      	mov	sl, r0
 80046b2:	468b      	mov	fp, r1
 80046b4:	2d0f      	cmp	r5, #15
 80046b6:	dc38      	bgt.n	800472a <_strtod_l+0x45a>
 80046b8:	9b08      	ldr	r3, [sp, #32]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f43f ae4a 	beq.w	8004354 <_strtod_l+0x84>
 80046c0:	dd24      	ble.n	800470c <_strtod_l+0x43c>
 80046c2:	2b16      	cmp	r3, #22
 80046c4:	dc0b      	bgt.n	80046de <_strtod_l+0x40e>
 80046c6:	4d6b      	ldr	r5, [pc, #428]	; (8004874 <_strtod_l+0x5a4>)
 80046c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80046cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80046d0:	4652      	mov	r2, sl
 80046d2:	465b      	mov	r3, fp
 80046d4:	f7fb ffa0 	bl	8000618 <__aeabi_dmul>
 80046d8:	4682      	mov	sl, r0
 80046da:	468b      	mov	fp, r1
 80046dc:	e63a      	b.n	8004354 <_strtod_l+0x84>
 80046de:	9a08      	ldr	r2, [sp, #32]
 80046e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80046e4:	4293      	cmp	r3, r2
 80046e6:	db20      	blt.n	800472a <_strtod_l+0x45a>
 80046e8:	4c62      	ldr	r4, [pc, #392]	; (8004874 <_strtod_l+0x5a4>)
 80046ea:	f1c5 050f 	rsb	r5, r5, #15
 80046ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80046f2:	4652      	mov	r2, sl
 80046f4:	465b      	mov	r3, fp
 80046f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046fa:	f7fb ff8d 	bl	8000618 <__aeabi_dmul>
 80046fe:	9b08      	ldr	r3, [sp, #32]
 8004700:	1b5d      	subs	r5, r3, r5
 8004702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800470a:	e7e3      	b.n	80046d4 <_strtod_l+0x404>
 800470c:	9b08      	ldr	r3, [sp, #32]
 800470e:	3316      	adds	r3, #22
 8004710:	db0b      	blt.n	800472a <_strtod_l+0x45a>
 8004712:	9b07      	ldr	r3, [sp, #28]
 8004714:	4a57      	ldr	r2, [pc, #348]	; (8004874 <_strtod_l+0x5a4>)
 8004716:	1b9e      	subs	r6, r3, r6
 8004718:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800471c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004720:	4650      	mov	r0, sl
 8004722:	4659      	mov	r1, fp
 8004724:	f7fc f8a2 	bl	800086c <__aeabi_ddiv>
 8004728:	e7d6      	b.n	80046d8 <_strtod_l+0x408>
 800472a:	9b08      	ldr	r3, [sp, #32]
 800472c:	eba5 0808 	sub.w	r8, r5, r8
 8004730:	4498      	add	r8, r3
 8004732:	f1b8 0f00 	cmp.w	r8, #0
 8004736:	dd71      	ble.n	800481c <_strtod_l+0x54c>
 8004738:	f018 030f 	ands.w	r3, r8, #15
 800473c:	d00a      	beq.n	8004754 <_strtod_l+0x484>
 800473e:	494d      	ldr	r1, [pc, #308]	; (8004874 <_strtod_l+0x5a4>)
 8004740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004744:	4652      	mov	r2, sl
 8004746:	465b      	mov	r3, fp
 8004748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800474c:	f7fb ff64 	bl	8000618 <__aeabi_dmul>
 8004750:	4682      	mov	sl, r0
 8004752:	468b      	mov	fp, r1
 8004754:	f038 080f 	bics.w	r8, r8, #15
 8004758:	d04d      	beq.n	80047f6 <_strtod_l+0x526>
 800475a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800475e:	dd22      	ble.n	80047a6 <_strtod_l+0x4d6>
 8004760:	2500      	movs	r5, #0
 8004762:	462e      	mov	r6, r5
 8004764:	9509      	str	r5, [sp, #36]	; 0x24
 8004766:	9507      	str	r5, [sp, #28]
 8004768:	2322      	movs	r3, #34	; 0x22
 800476a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800487c <_strtod_l+0x5ac>
 800476e:	6023      	str	r3, [r4, #0]
 8004770:	f04f 0a00 	mov.w	sl, #0
 8004774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	f43f adec 	beq.w	8004354 <_strtod_l+0x84>
 800477c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800477e:	4620      	mov	r0, r4
 8004780:	f001 fec4 	bl	800650c <_Bfree>
 8004784:	9907      	ldr	r1, [sp, #28]
 8004786:	4620      	mov	r0, r4
 8004788:	f001 fec0 	bl	800650c <_Bfree>
 800478c:	4631      	mov	r1, r6
 800478e:	4620      	mov	r0, r4
 8004790:	f001 febc 	bl	800650c <_Bfree>
 8004794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004796:	4620      	mov	r0, r4
 8004798:	f001 feb8 	bl	800650c <_Bfree>
 800479c:	4629      	mov	r1, r5
 800479e:	4620      	mov	r0, r4
 80047a0:	f001 feb4 	bl	800650c <_Bfree>
 80047a4:	e5d6      	b.n	8004354 <_strtod_l+0x84>
 80047a6:	2300      	movs	r3, #0
 80047a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80047ac:	4650      	mov	r0, sl
 80047ae:	4659      	mov	r1, fp
 80047b0:	4699      	mov	r9, r3
 80047b2:	f1b8 0f01 	cmp.w	r8, #1
 80047b6:	dc21      	bgt.n	80047fc <_strtod_l+0x52c>
 80047b8:	b10b      	cbz	r3, 80047be <_strtod_l+0x4ee>
 80047ba:	4682      	mov	sl, r0
 80047bc:	468b      	mov	fp, r1
 80047be:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <_strtod_l+0x5a8>)
 80047c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80047c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80047c8:	4652      	mov	r2, sl
 80047ca:	465b      	mov	r3, fp
 80047cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80047d0:	f7fb ff22 	bl	8000618 <__aeabi_dmul>
 80047d4:	4b29      	ldr	r3, [pc, #164]	; (800487c <_strtod_l+0x5ac>)
 80047d6:	460a      	mov	r2, r1
 80047d8:	400b      	ands	r3, r1
 80047da:	4929      	ldr	r1, [pc, #164]	; (8004880 <_strtod_l+0x5b0>)
 80047dc:	428b      	cmp	r3, r1
 80047de:	4682      	mov	sl, r0
 80047e0:	d8be      	bhi.n	8004760 <_strtod_l+0x490>
 80047e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80047e6:	428b      	cmp	r3, r1
 80047e8:	bf86      	itte	hi
 80047ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004884 <_strtod_l+0x5b4>
 80047ee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80047f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80047f6:	2300      	movs	r3, #0
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	e081      	b.n	8004900 <_strtod_l+0x630>
 80047fc:	f018 0f01 	tst.w	r8, #1
 8004800:	d007      	beq.n	8004812 <_strtod_l+0x542>
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <_strtod_l+0x5a8>)
 8004804:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f7fb ff04 	bl	8000618 <__aeabi_dmul>
 8004810:	2301      	movs	r3, #1
 8004812:	f109 0901 	add.w	r9, r9, #1
 8004816:	ea4f 0868 	mov.w	r8, r8, asr #1
 800481a:	e7ca      	b.n	80047b2 <_strtod_l+0x4e2>
 800481c:	d0eb      	beq.n	80047f6 <_strtod_l+0x526>
 800481e:	f1c8 0800 	rsb	r8, r8, #0
 8004822:	f018 020f 	ands.w	r2, r8, #15
 8004826:	d00a      	beq.n	800483e <_strtod_l+0x56e>
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <_strtod_l+0x5a4>)
 800482a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800482e:	4650      	mov	r0, sl
 8004830:	4659      	mov	r1, fp
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f7fc f819 	bl	800086c <__aeabi_ddiv>
 800483a:	4682      	mov	sl, r0
 800483c:	468b      	mov	fp, r1
 800483e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004842:	d0d8      	beq.n	80047f6 <_strtod_l+0x526>
 8004844:	f1b8 0f1f 	cmp.w	r8, #31
 8004848:	dd1e      	ble.n	8004888 <_strtod_l+0x5b8>
 800484a:	2500      	movs	r5, #0
 800484c:	462e      	mov	r6, r5
 800484e:	9509      	str	r5, [sp, #36]	; 0x24
 8004850:	9507      	str	r5, [sp, #28]
 8004852:	2322      	movs	r3, #34	; 0x22
 8004854:	f04f 0a00 	mov.w	sl, #0
 8004858:	f04f 0b00 	mov.w	fp, #0
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	e789      	b.n	8004774 <_strtod_l+0x4a4>
 8004860:	08008695 	.word	0x08008695
 8004864:	080086d4 	.word	0x080086d4
 8004868:	0800868d 	.word	0x0800868d
 800486c:	08008814 	.word	0x08008814
 8004870:	08008aeb 	.word	0x08008aeb
 8004874:	080089b0 	.word	0x080089b0
 8004878:	08008988 	.word	0x08008988
 800487c:	7ff00000 	.word	0x7ff00000
 8004880:	7ca00000 	.word	0x7ca00000
 8004884:	7fefffff 	.word	0x7fefffff
 8004888:	f018 0310 	ands.w	r3, r8, #16
 800488c:	bf18      	it	ne
 800488e:	236a      	movne	r3, #106	; 0x6a
 8004890:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004c48 <_strtod_l+0x978>
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	4650      	mov	r0, sl
 8004898:	4659      	mov	r1, fp
 800489a:	2300      	movs	r3, #0
 800489c:	f018 0f01 	tst.w	r8, #1
 80048a0:	d004      	beq.n	80048ac <_strtod_l+0x5dc>
 80048a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80048a6:	f7fb feb7 	bl	8000618 <__aeabi_dmul>
 80048aa:	2301      	movs	r3, #1
 80048ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80048b0:	f109 0908 	add.w	r9, r9, #8
 80048b4:	d1f2      	bne.n	800489c <_strtod_l+0x5cc>
 80048b6:	b10b      	cbz	r3, 80048bc <_strtod_l+0x5ec>
 80048b8:	4682      	mov	sl, r0
 80048ba:	468b      	mov	fp, r1
 80048bc:	9b04      	ldr	r3, [sp, #16]
 80048be:	b1bb      	cbz	r3, 80048f0 <_strtod_l+0x620>
 80048c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80048c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	4659      	mov	r1, fp
 80048cc:	dd10      	ble.n	80048f0 <_strtod_l+0x620>
 80048ce:	2b1f      	cmp	r3, #31
 80048d0:	f340 8128 	ble.w	8004b24 <_strtod_l+0x854>
 80048d4:	2b34      	cmp	r3, #52	; 0x34
 80048d6:	bfde      	ittt	le
 80048d8:	3b20      	suble	r3, #32
 80048da:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80048de:	fa02 f303 	lslle.w	r3, r2, r3
 80048e2:	f04f 0a00 	mov.w	sl, #0
 80048e6:	bfcc      	ite	gt
 80048e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80048ec:	ea03 0b01 	andle.w	fp, r3, r1
 80048f0:	2200      	movs	r2, #0
 80048f2:	2300      	movs	r3, #0
 80048f4:	4650      	mov	r0, sl
 80048f6:	4659      	mov	r1, fp
 80048f8:	f7fc f8f6 	bl	8000ae8 <__aeabi_dcmpeq>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d1a4      	bne.n	800484a <_strtod_l+0x57a>
 8004900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004906:	462b      	mov	r3, r5
 8004908:	463a      	mov	r2, r7
 800490a:	4620      	mov	r0, r4
 800490c:	f001 fe6a 	bl	80065e4 <__s2b>
 8004910:	9009      	str	r0, [sp, #36]	; 0x24
 8004912:	2800      	cmp	r0, #0
 8004914:	f43f af24 	beq.w	8004760 <_strtod_l+0x490>
 8004918:	9b07      	ldr	r3, [sp, #28]
 800491a:	1b9e      	subs	r6, r3, r6
 800491c:	9b08      	ldr	r3, [sp, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfb4      	ite	lt
 8004922:	4633      	movlt	r3, r6
 8004924:	2300      	movge	r3, #0
 8004926:	9310      	str	r3, [sp, #64]	; 0x40
 8004928:	9b08      	ldr	r3, [sp, #32]
 800492a:	2500      	movs	r5, #0
 800492c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004930:	9318      	str	r3, [sp, #96]	; 0x60
 8004932:	462e      	mov	r6, r5
 8004934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004936:	4620      	mov	r0, r4
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	f001 fda7 	bl	800648c <_Balloc>
 800493e:	9007      	str	r0, [sp, #28]
 8004940:	2800      	cmp	r0, #0
 8004942:	f43f af11 	beq.w	8004768 <_strtod_l+0x498>
 8004946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	3202      	adds	r2, #2
 800494c:	f103 010c 	add.w	r1, r3, #12
 8004950:	0092      	lsls	r2, r2, #2
 8004952:	300c      	adds	r0, #12
 8004954:	f001 fd8c 	bl	8006470 <memcpy>
 8004958:	ec4b ab10 	vmov	d0, sl, fp
 800495c:	aa20      	add	r2, sp, #128	; 0x80
 800495e:	a91f      	add	r1, sp, #124	; 0x7c
 8004960:	4620      	mov	r0, r4
 8004962:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004966:	f002 f979 	bl	8006c5c <__d2b>
 800496a:	901e      	str	r0, [sp, #120]	; 0x78
 800496c:	2800      	cmp	r0, #0
 800496e:	f43f aefb 	beq.w	8004768 <_strtod_l+0x498>
 8004972:	2101      	movs	r1, #1
 8004974:	4620      	mov	r0, r4
 8004976:	f001 fecf 	bl	8006718 <__i2b>
 800497a:	4606      	mov	r6, r0
 800497c:	2800      	cmp	r0, #0
 800497e:	f43f aef3 	beq.w	8004768 <_strtod_l+0x498>
 8004982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004984:	9904      	ldr	r1, [sp, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	bfab      	itete	ge
 800498a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800498c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800498e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004990:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004994:	bfac      	ite	ge
 8004996:	eb03 0902 	addge.w	r9, r3, r2
 800499a:	1ad7      	sublt	r7, r2, r3
 800499c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800499e:	eba3 0801 	sub.w	r8, r3, r1
 80049a2:	4490      	add	r8, r2
 80049a4:	4ba3      	ldr	r3, [pc, #652]	; (8004c34 <_strtod_l+0x964>)
 80049a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80049aa:	4598      	cmp	r8, r3
 80049ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80049b0:	f280 80cc 	bge.w	8004b4c <_strtod_l+0x87c>
 80049b4:	eba3 0308 	sub.w	r3, r3, r8
 80049b8:	2b1f      	cmp	r3, #31
 80049ba:	eba2 0203 	sub.w	r2, r2, r3
 80049be:	f04f 0101 	mov.w	r1, #1
 80049c2:	f300 80b6 	bgt.w	8004b32 <_strtod_l+0x862>
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	9311      	str	r3, [sp, #68]	; 0x44
 80049cc:	2300      	movs	r3, #0
 80049ce:	930c      	str	r3, [sp, #48]	; 0x30
 80049d0:	eb09 0802 	add.w	r8, r9, r2
 80049d4:	9b04      	ldr	r3, [sp, #16]
 80049d6:	45c1      	cmp	r9, r8
 80049d8:	4417      	add	r7, r2
 80049da:	441f      	add	r7, r3
 80049dc:	464b      	mov	r3, r9
 80049de:	bfa8      	it	ge
 80049e0:	4643      	movge	r3, r8
 80049e2:	42bb      	cmp	r3, r7
 80049e4:	bfa8      	it	ge
 80049e6:	463b      	movge	r3, r7
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bfc2      	ittt	gt
 80049ec:	eba8 0803 	subgt.w	r8, r8, r3
 80049f0:	1aff      	subgt	r7, r7, r3
 80049f2:	eba9 0903 	subgt.w	r9, r9, r3
 80049f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dd17      	ble.n	8004a2c <_strtod_l+0x75c>
 80049fc:	4631      	mov	r1, r6
 80049fe:	461a      	mov	r2, r3
 8004a00:	4620      	mov	r0, r4
 8004a02:	f001 ff45 	bl	8006890 <__pow5mult>
 8004a06:	4606      	mov	r6, r0
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	f43f aead 	beq.w	8004768 <_strtod_l+0x498>
 8004a0e:	4601      	mov	r1, r0
 8004a10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a12:	4620      	mov	r0, r4
 8004a14:	f001 fe96 	bl	8006744 <__multiply>
 8004a18:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f43f aea4 	beq.w	8004768 <_strtod_l+0x498>
 8004a20:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004a22:	4620      	mov	r0, r4
 8004a24:	f001 fd72 	bl	800650c <_Bfree>
 8004a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a2a:	931e      	str	r3, [sp, #120]	; 0x78
 8004a2c:	f1b8 0f00 	cmp.w	r8, #0
 8004a30:	f300 8091 	bgt.w	8004b56 <_strtod_l+0x886>
 8004a34:	9b08      	ldr	r3, [sp, #32]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dd08      	ble.n	8004a4c <_strtod_l+0x77c>
 8004a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004a3c:	9907      	ldr	r1, [sp, #28]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f001 ff26 	bl	8006890 <__pow5mult>
 8004a44:	9007      	str	r0, [sp, #28]
 8004a46:	2800      	cmp	r0, #0
 8004a48:	f43f ae8e 	beq.w	8004768 <_strtod_l+0x498>
 8004a4c:	2f00      	cmp	r7, #0
 8004a4e:	dd08      	ble.n	8004a62 <_strtod_l+0x792>
 8004a50:	9907      	ldr	r1, [sp, #28]
 8004a52:	463a      	mov	r2, r7
 8004a54:	4620      	mov	r0, r4
 8004a56:	f001 ff75 	bl	8006944 <__lshift>
 8004a5a:	9007      	str	r0, [sp, #28]
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	f43f ae83 	beq.w	8004768 <_strtod_l+0x498>
 8004a62:	f1b9 0f00 	cmp.w	r9, #0
 8004a66:	dd08      	ble.n	8004a7a <_strtod_l+0x7aa>
 8004a68:	4631      	mov	r1, r6
 8004a6a:	464a      	mov	r2, r9
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f001 ff69 	bl	8006944 <__lshift>
 8004a72:	4606      	mov	r6, r0
 8004a74:	2800      	cmp	r0, #0
 8004a76:	f43f ae77 	beq.w	8004768 <_strtod_l+0x498>
 8004a7a:	9a07      	ldr	r2, [sp, #28]
 8004a7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f001 ffe8 	bl	8006a54 <__mdiff>
 8004a84:	4605      	mov	r5, r0
 8004a86:	2800      	cmp	r0, #0
 8004a88:	f43f ae6e 	beq.w	8004768 <_strtod_l+0x498>
 8004a8c:	68c3      	ldr	r3, [r0, #12]
 8004a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a90:	2300      	movs	r3, #0
 8004a92:	60c3      	str	r3, [r0, #12]
 8004a94:	4631      	mov	r1, r6
 8004a96:	f001 ffc1 	bl	8006a1c <__mcmp>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	da65      	bge.n	8004b6a <_strtod_l+0x89a>
 8004a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aa0:	ea53 030a 	orrs.w	r3, r3, sl
 8004aa4:	f040 8087 	bne.w	8004bb6 <_strtod_l+0x8e6>
 8004aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 8082 	bne.w	8004bb6 <_strtod_l+0x8e6>
 8004ab2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ab6:	0d1b      	lsrs	r3, r3, #20
 8004ab8:	051b      	lsls	r3, r3, #20
 8004aba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004abe:	d97a      	bls.n	8004bb6 <_strtod_l+0x8e6>
 8004ac0:	696b      	ldr	r3, [r5, #20]
 8004ac2:	b913      	cbnz	r3, 8004aca <_strtod_l+0x7fa>
 8004ac4:	692b      	ldr	r3, [r5, #16]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	dd75      	ble.n	8004bb6 <_strtod_l+0x8e6>
 8004aca:	4629      	mov	r1, r5
 8004acc:	2201      	movs	r2, #1
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f001 ff38 	bl	8006944 <__lshift>
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	f001 ffa0 	bl	8006a1c <__mcmp>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	dd6a      	ble.n	8004bb6 <_strtod_l+0x8e6>
 8004ae0:	9904      	ldr	r1, [sp, #16]
 8004ae2:	4a55      	ldr	r2, [pc, #340]	; (8004c38 <_strtod_l+0x968>)
 8004ae4:	465b      	mov	r3, fp
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	f000 8085 	beq.w	8004bf6 <_strtod_l+0x926>
 8004aec:	ea02 010b 	and.w	r1, r2, fp
 8004af0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004af4:	dc7f      	bgt.n	8004bf6 <_strtod_l+0x926>
 8004af6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004afa:	f77f aeaa 	ble.w	8004852 <_strtod_l+0x582>
 8004afe:	4a4f      	ldr	r2, [pc, #316]	; (8004c3c <_strtod_l+0x96c>)
 8004b00:	2300      	movs	r3, #0
 8004b02:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004b06:	4650      	mov	r0, sl
 8004b08:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	f7fb fd83 	bl	8000618 <__aeabi_dmul>
 8004b12:	460b      	mov	r3, r1
 8004b14:	4303      	orrs	r3, r0
 8004b16:	bf08      	it	eq
 8004b18:	2322      	moveq	r3, #34	; 0x22
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	468b      	mov	fp, r1
 8004b1e:	bf08      	it	eq
 8004b20:	6023      	streq	r3, [r4, #0]
 8004b22:	e62b      	b.n	800477c <_strtod_l+0x4ac>
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	ea03 0a0a 	and.w	sl, r3, sl
 8004b30:	e6de      	b.n	80048f0 <_strtod_l+0x620>
 8004b32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004b36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004b3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004b3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004b42:	fa01 f308 	lsl.w	r3, r1, r8
 8004b46:	930c      	str	r3, [sp, #48]	; 0x30
 8004b48:	9111      	str	r1, [sp, #68]	; 0x44
 8004b4a:	e741      	b.n	80049d0 <_strtod_l+0x700>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8004b50:	2301      	movs	r3, #1
 8004b52:	9311      	str	r3, [sp, #68]	; 0x44
 8004b54:	e73c      	b.n	80049d0 <_strtod_l+0x700>
 8004b56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004b58:	4642      	mov	r2, r8
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f001 fef2 	bl	8006944 <__lshift>
 8004b60:	901e      	str	r0, [sp, #120]	; 0x78
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f47f af66 	bne.w	8004a34 <_strtod_l+0x764>
 8004b68:	e5fe      	b.n	8004768 <_strtod_l+0x498>
 8004b6a:	465f      	mov	r7, fp
 8004b6c:	d16e      	bne.n	8004c4c <_strtod_l+0x97c>
 8004b6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b74:	b342      	cbz	r2, 8004bc8 <_strtod_l+0x8f8>
 8004b76:	4a32      	ldr	r2, [pc, #200]	; (8004c40 <_strtod_l+0x970>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d128      	bne.n	8004bce <_strtod_l+0x8fe>
 8004b7c:	9b04      	ldr	r3, [sp, #16]
 8004b7e:	4650      	mov	r0, sl
 8004b80:	b1eb      	cbz	r3, 8004bbe <_strtod_l+0x8ee>
 8004b82:	4a2d      	ldr	r2, [pc, #180]	; (8004c38 <_strtod_l+0x968>)
 8004b84:	403a      	ands	r2, r7
 8004b86:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004b8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b8e:	d819      	bhi.n	8004bc4 <_strtod_l+0x8f4>
 8004b90:	0d12      	lsrs	r2, r2, #20
 8004b92:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004b96:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	d117      	bne.n	8004bce <_strtod_l+0x8fe>
 8004b9e:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <_strtod_l+0x974>)
 8004ba0:	429f      	cmp	r7, r3
 8004ba2:	d102      	bne.n	8004baa <_strtod_l+0x8da>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f43f addf 	beq.w	8004768 <_strtod_l+0x498>
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <_strtod_l+0x968>)
 8004bac:	403b      	ands	r3, r7
 8004bae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004bb2:	f04f 0a00 	mov.w	sl, #0
 8004bb6:	9b04      	ldr	r3, [sp, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1a0      	bne.n	8004afe <_strtod_l+0x82e>
 8004bbc:	e5de      	b.n	800477c <_strtod_l+0x4ac>
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bc2:	e7ea      	b.n	8004b9a <_strtod_l+0x8ca>
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	e7e8      	b.n	8004b9a <_strtod_l+0x8ca>
 8004bc8:	ea53 030a 	orrs.w	r3, r3, sl
 8004bcc:	d088      	beq.n	8004ae0 <_strtod_l+0x810>
 8004bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bd0:	b1db      	cbz	r3, 8004c0a <_strtod_l+0x93a>
 8004bd2:	423b      	tst	r3, r7
 8004bd4:	d0ef      	beq.n	8004bb6 <_strtod_l+0x8e6>
 8004bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bd8:	9a04      	ldr	r2, [sp, #16]
 8004bda:	4650      	mov	r0, sl
 8004bdc:	4659      	mov	r1, fp
 8004bde:	b1c3      	cbz	r3, 8004c12 <_strtod_l+0x942>
 8004be0:	f7ff fb57 	bl	8004292 <sulp>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bec:	f7fb fb5e 	bl	80002ac <__adddf3>
 8004bf0:	4682      	mov	sl, r0
 8004bf2:	468b      	mov	fp, r1
 8004bf4:	e7df      	b.n	8004bb6 <_strtod_l+0x8e6>
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004bfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004c00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004c04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004c08:	e7d5      	b.n	8004bb6 <_strtod_l+0x8e6>
 8004c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c0c:	ea13 0f0a 	tst.w	r3, sl
 8004c10:	e7e0      	b.n	8004bd4 <_strtod_l+0x904>
 8004c12:	f7ff fb3e 	bl	8004292 <sulp>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c1e:	f7fb fb43 	bl	80002a8 <__aeabi_dsub>
 8004c22:	2200      	movs	r2, #0
 8004c24:	2300      	movs	r3, #0
 8004c26:	4682      	mov	sl, r0
 8004c28:	468b      	mov	fp, r1
 8004c2a:	f7fb ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d0c1      	beq.n	8004bb6 <_strtod_l+0x8e6>
 8004c32:	e60e      	b.n	8004852 <_strtod_l+0x582>
 8004c34:	fffffc02 	.word	0xfffffc02
 8004c38:	7ff00000 	.word	0x7ff00000
 8004c3c:	39500000 	.word	0x39500000
 8004c40:	000fffff 	.word	0x000fffff
 8004c44:	7fefffff 	.word	0x7fefffff
 8004c48:	080086e8 	.word	0x080086e8
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f002 f860 	bl	8006d14 <__ratio>
 8004c54:	ec59 8b10 	vmov	r8, r9, d0
 8004c58:	ee10 0a10 	vmov	r0, s0
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c62:	4649      	mov	r1, r9
 8004c64:	f7fb ff54 	bl	8000b10 <__aeabi_dcmple>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d07c      	beq.n	8004d66 <_strtod_l+0xa96>
 8004c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d04c      	beq.n	8004d0c <_strtod_l+0xa3c>
 8004c72:	4b95      	ldr	r3, [pc, #596]	; (8004ec8 <_strtod_l+0xbf8>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004c7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004ec8 <_strtod_l+0xbf8>
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	4b92      	ldr	r3, [pc, #584]	; (8004ecc <_strtod_l+0xbfc>)
 8004c84:	403b      	ands	r3, r7
 8004c86:	9311      	str	r3, [sp, #68]	; 0x44
 8004c88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c8a:	4b91      	ldr	r3, [pc, #580]	; (8004ed0 <_strtod_l+0xc00>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	f040 80b2 	bne.w	8004df6 <_strtod_l+0xb26>
 8004c92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c9a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004c9e:	ec4b ab10 	vmov	d0, sl, fp
 8004ca2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8004ca6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004caa:	f001 ff5b 	bl	8006b64 <__ulp>
 8004cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cb2:	ec53 2b10 	vmov	r2, r3, d0
 8004cb6:	f7fb fcaf 	bl	8000618 <__aeabi_dmul>
 8004cba:	4652      	mov	r2, sl
 8004cbc:	465b      	mov	r3, fp
 8004cbe:	f7fb faf5 	bl	80002ac <__adddf3>
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4981      	ldr	r1, [pc, #516]	; (8004ecc <_strtod_l+0xbfc>)
 8004cc6:	4a83      	ldr	r2, [pc, #524]	; (8004ed4 <_strtod_l+0xc04>)
 8004cc8:	4019      	ands	r1, r3
 8004cca:	4291      	cmp	r1, r2
 8004ccc:	4682      	mov	sl, r0
 8004cce:	d95e      	bls.n	8004d8e <_strtod_l+0xabe>
 8004cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cd2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d103      	bne.n	8004ce2 <_strtod_l+0xa12>
 8004cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cdc:	3301      	adds	r3, #1
 8004cde:	f43f ad43 	beq.w	8004768 <_strtod_l+0x498>
 8004ce2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004ee0 <_strtod_l+0xc10>
 8004ce6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004cea:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004cec:	4620      	mov	r0, r4
 8004cee:	f001 fc0d 	bl	800650c <_Bfree>
 8004cf2:	9907      	ldr	r1, [sp, #28]
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f001 fc09 	bl	800650c <_Bfree>
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f001 fc05 	bl	800650c <_Bfree>
 8004d02:	4629      	mov	r1, r5
 8004d04:	4620      	mov	r0, r4
 8004d06:	f001 fc01 	bl	800650c <_Bfree>
 8004d0a:	e613      	b.n	8004934 <_strtod_l+0x664>
 8004d0c:	f1ba 0f00 	cmp.w	sl, #0
 8004d10:	d11b      	bne.n	8004d4a <_strtod_l+0xa7a>
 8004d12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d16:	b9f3      	cbnz	r3, 8004d56 <_strtod_l+0xa86>
 8004d18:	4b6b      	ldr	r3, [pc, #428]	; (8004ec8 <_strtod_l+0xbf8>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	f7fb feec 	bl	8000afc <__aeabi_dcmplt>
 8004d24:	b9d0      	cbnz	r0, 8004d5c <_strtod_l+0xa8c>
 8004d26:	4640      	mov	r0, r8
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4b6b      	ldr	r3, [pc, #428]	; (8004ed8 <_strtod_l+0xc08>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f7fb fc73 	bl	8000618 <__aeabi_dmul>
 8004d32:	4680      	mov	r8, r0
 8004d34:	4689      	mov	r9, r1
 8004d36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d3a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8004d3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d40:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8004d44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004d48:	e79b      	b.n	8004c82 <_strtod_l+0x9b2>
 8004d4a:	f1ba 0f01 	cmp.w	sl, #1
 8004d4e:	d102      	bne.n	8004d56 <_strtod_l+0xa86>
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	f43f ad7e 	beq.w	8004852 <_strtod_l+0x582>
 8004d56:	4b61      	ldr	r3, [pc, #388]	; (8004edc <_strtod_l+0xc0c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	e78c      	b.n	8004c76 <_strtod_l+0x9a6>
 8004d5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004ed8 <_strtod_l+0xc08>
 8004d60:	f04f 0800 	mov.w	r8, #0
 8004d64:	e7e7      	b.n	8004d36 <_strtod_l+0xa66>
 8004d66:	4b5c      	ldr	r3, [pc, #368]	; (8004ed8 <_strtod_l+0xc08>)
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f7fb fc53 	bl	8000618 <__aeabi_dmul>
 8004d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d74:	4680      	mov	r8, r0
 8004d76:	4689      	mov	r9, r1
 8004d78:	b933      	cbnz	r3, 8004d88 <_strtod_l+0xab8>
 8004d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d7e:	9012      	str	r0, [sp, #72]	; 0x48
 8004d80:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004d86:	e7dd      	b.n	8004d44 <_strtod_l+0xa74>
 8004d88:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004d8c:	e7f9      	b.n	8004d82 <_strtod_l+0xab2>
 8004d8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004d92:	9b04      	ldr	r3, [sp, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1a8      	bne.n	8004cea <_strtod_l+0xa1a>
 8004d98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004d9e:	0d1b      	lsrs	r3, r3, #20
 8004da0:	051b      	lsls	r3, r3, #20
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d1a1      	bne.n	8004cea <_strtod_l+0xa1a>
 8004da6:	4640      	mov	r0, r8
 8004da8:	4649      	mov	r1, r9
 8004daa:	f7fb ff95 	bl	8000cd8 <__aeabi_d2lz>
 8004dae:	f7fb fc05 	bl	80005bc <__aeabi_l2d>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4640      	mov	r0, r8
 8004db8:	4649      	mov	r1, r9
 8004dba:	f7fb fa75 	bl	80002a8 <__aeabi_dsub>
 8004dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004dc4:	ea43 030a 	orr.w	r3, r3, sl
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	4680      	mov	r8, r0
 8004dcc:	4689      	mov	r9, r1
 8004dce:	d053      	beq.n	8004e78 <_strtod_l+0xba8>
 8004dd0:	a335      	add	r3, pc, #212	; (adr r3, 8004ea8 <_strtod_l+0xbd8>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fe91 	bl	8000afc <__aeabi_dcmplt>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	f47f acce 	bne.w	800477c <_strtod_l+0x4ac>
 8004de0:	a333      	add	r3, pc, #204	; (adr r3, 8004eb0 <_strtod_l+0xbe0>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	4640      	mov	r0, r8
 8004de8:	4649      	mov	r1, r9
 8004dea:	f7fb fea5 	bl	8000b38 <__aeabi_dcmpgt>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f43f af7b 	beq.w	8004cea <_strtod_l+0xa1a>
 8004df4:	e4c2      	b.n	800477c <_strtod_l+0x4ac>
 8004df6:	9b04      	ldr	r3, [sp, #16]
 8004df8:	b333      	cbz	r3, 8004e48 <_strtod_l+0xb78>
 8004dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004e00:	d822      	bhi.n	8004e48 <_strtod_l+0xb78>
 8004e02:	a32d      	add	r3, pc, #180	; (adr r3, 8004eb8 <_strtod_l+0xbe8>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	4640      	mov	r0, r8
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	f7fb fe80 	bl	8000b10 <__aeabi_dcmple>
 8004e10:	b1a0      	cbz	r0, 8004e3c <_strtod_l+0xb6c>
 8004e12:	4649      	mov	r1, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	f7fb fed7 	bl	8000bc8 <__aeabi_d2uiz>
 8004e1a:	2801      	cmp	r0, #1
 8004e1c:	bf38      	it	cc
 8004e1e:	2001      	movcc	r0, #1
 8004e20:	f7fb fb80 	bl	8000524 <__aeabi_ui2d>
 8004e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e26:	4680      	mov	r8, r0
 8004e28:	4689      	mov	r9, r1
 8004e2a:	bb13      	cbnz	r3, 8004e72 <_strtod_l+0xba2>
 8004e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e30:	9014      	str	r0, [sp, #80]	; 0x50
 8004e32:	9315      	str	r3, [sp, #84]	; 0x54
 8004e34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004e38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	930d      	str	r3, [sp, #52]	; 0x34
 8004e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e4c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e54:	f001 fe86 	bl	8006b64 <__ulp>
 8004e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e5c:	ec53 2b10 	vmov	r2, r3, d0
 8004e60:	f7fb fbda 	bl	8000618 <__aeabi_dmul>
 8004e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e68:	f7fb fa20 	bl	80002ac <__adddf3>
 8004e6c:	4682      	mov	sl, r0
 8004e6e:	468b      	mov	fp, r1
 8004e70:	e78f      	b.n	8004d92 <_strtod_l+0xac2>
 8004e72:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8004e76:	e7dd      	b.n	8004e34 <_strtod_l+0xb64>
 8004e78:	a311      	add	r3, pc, #68	; (adr r3, 8004ec0 <_strtod_l+0xbf0>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f7fb fe3d 	bl	8000afc <__aeabi_dcmplt>
 8004e82:	e7b4      	b.n	8004dee <_strtod_l+0xb1e>
 8004e84:	2300      	movs	r3, #0
 8004e86:	930e      	str	r3, [sp, #56]	; 0x38
 8004e88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004e8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	f7ff ba65 	b.w	800435c <_strtod_l+0x8c>
 8004e92:	2b65      	cmp	r3, #101	; 0x65
 8004e94:	f43f ab5d 	beq.w	8004552 <_strtod_l+0x282>
 8004e98:	2b45      	cmp	r3, #69	; 0x45
 8004e9a:	f43f ab5a 	beq.w	8004552 <_strtod_l+0x282>
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f7ff bb92 	b.w	80045c8 <_strtod_l+0x2f8>
 8004ea4:	f3af 8000 	nop.w
 8004ea8:	94a03595 	.word	0x94a03595
 8004eac:	3fdfffff 	.word	0x3fdfffff
 8004eb0:	35afe535 	.word	0x35afe535
 8004eb4:	3fe00000 	.word	0x3fe00000
 8004eb8:	ffc00000 	.word	0xffc00000
 8004ebc:	41dfffff 	.word	0x41dfffff
 8004ec0:	94a03595 	.word	0x94a03595
 8004ec4:	3fcfffff 	.word	0x3fcfffff
 8004ec8:	3ff00000 	.word	0x3ff00000
 8004ecc:	7ff00000 	.word	0x7ff00000
 8004ed0:	7fe00000 	.word	0x7fe00000
 8004ed4:	7c9fffff 	.word	0x7c9fffff
 8004ed8:	3fe00000 	.word	0x3fe00000
 8004edc:	bff00000 	.word	0xbff00000
 8004ee0:	7fefffff 	.word	0x7fefffff

08004ee4 <_strtod_r>:
 8004ee4:	4b01      	ldr	r3, [pc, #4]	; (8004eec <_strtod_r+0x8>)
 8004ee6:	f7ff b9f3 	b.w	80042d0 <_strtod_l>
 8004eea:	bf00      	nop
 8004eec:	20000078 	.word	0x20000078

08004ef0 <_strtol_l.isra.0>:
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef6:	d001      	beq.n	8004efc <_strtol_l.isra.0+0xc>
 8004ef8:	2b24      	cmp	r3, #36	; 0x24
 8004efa:	d906      	bls.n	8004f0a <_strtol_l.isra.0+0x1a>
 8004efc:	f7fe fa52 	bl	80033a4 <__errno>
 8004f00:	2316      	movs	r3, #22
 8004f02:	6003      	str	r3, [r0, #0]
 8004f04:	2000      	movs	r0, #0
 8004f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0a:	4f3a      	ldr	r7, [pc, #232]	; (8004ff4 <_strtol_l.isra.0+0x104>)
 8004f0c:	468e      	mov	lr, r1
 8004f0e:	4676      	mov	r6, lr
 8004f10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004f14:	5de5      	ldrb	r5, [r4, r7]
 8004f16:	f015 0508 	ands.w	r5, r5, #8
 8004f1a:	d1f8      	bne.n	8004f0e <_strtol_l.isra.0+0x1e>
 8004f1c:	2c2d      	cmp	r4, #45	; 0x2d
 8004f1e:	d134      	bne.n	8004f8a <_strtol_l.isra.0+0x9a>
 8004f20:	f89e 4000 	ldrb.w	r4, [lr]
 8004f24:	f04f 0801 	mov.w	r8, #1
 8004f28:	f106 0e02 	add.w	lr, r6, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05c      	beq.n	8004fea <_strtol_l.isra.0+0xfa>
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d10c      	bne.n	8004f4e <_strtol_l.isra.0+0x5e>
 8004f34:	2c30      	cmp	r4, #48	; 0x30
 8004f36:	d10a      	bne.n	8004f4e <_strtol_l.isra.0+0x5e>
 8004f38:	f89e 4000 	ldrb.w	r4, [lr]
 8004f3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004f40:	2c58      	cmp	r4, #88	; 0x58
 8004f42:	d14d      	bne.n	8004fe0 <_strtol_l.isra.0+0xf0>
 8004f44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f10e 0e02 	add.w	lr, lr, #2
 8004f4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004f52:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004f56:	2600      	movs	r6, #0
 8004f58:	fbbc f9f3 	udiv	r9, ip, r3
 8004f5c:	4635      	mov	r5, r6
 8004f5e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004f62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004f66:	2f09      	cmp	r7, #9
 8004f68:	d818      	bhi.n	8004f9c <_strtol_l.isra.0+0xac>
 8004f6a:	463c      	mov	r4, r7
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	dd24      	ble.n	8004fba <_strtol_l.isra.0+0xca>
 8004f70:	2e00      	cmp	r6, #0
 8004f72:	db1f      	blt.n	8004fb4 <_strtol_l.isra.0+0xc4>
 8004f74:	45a9      	cmp	r9, r5
 8004f76:	d31d      	bcc.n	8004fb4 <_strtol_l.isra.0+0xc4>
 8004f78:	d101      	bne.n	8004f7e <_strtol_l.isra.0+0x8e>
 8004f7a:	45a2      	cmp	sl, r4
 8004f7c:	db1a      	blt.n	8004fb4 <_strtol_l.isra.0+0xc4>
 8004f7e:	fb05 4503 	mla	r5, r5, r3, r4
 8004f82:	2601      	movs	r6, #1
 8004f84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004f88:	e7eb      	b.n	8004f62 <_strtol_l.isra.0+0x72>
 8004f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8004f8c:	bf08      	it	eq
 8004f8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004f92:	46a8      	mov	r8, r5
 8004f94:	bf08      	it	eq
 8004f96:	f106 0e02 	addeq.w	lr, r6, #2
 8004f9a:	e7c7      	b.n	8004f2c <_strtol_l.isra.0+0x3c>
 8004f9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004fa0:	2f19      	cmp	r7, #25
 8004fa2:	d801      	bhi.n	8004fa8 <_strtol_l.isra.0+0xb8>
 8004fa4:	3c37      	subs	r4, #55	; 0x37
 8004fa6:	e7e1      	b.n	8004f6c <_strtol_l.isra.0+0x7c>
 8004fa8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004fac:	2f19      	cmp	r7, #25
 8004fae:	d804      	bhi.n	8004fba <_strtol_l.isra.0+0xca>
 8004fb0:	3c57      	subs	r4, #87	; 0x57
 8004fb2:	e7db      	b.n	8004f6c <_strtol_l.isra.0+0x7c>
 8004fb4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004fb8:	e7e4      	b.n	8004f84 <_strtol_l.isra.0+0x94>
 8004fba:	2e00      	cmp	r6, #0
 8004fbc:	da05      	bge.n	8004fca <_strtol_l.isra.0+0xda>
 8004fbe:	2322      	movs	r3, #34	; 0x22
 8004fc0:	6003      	str	r3, [r0, #0]
 8004fc2:	4665      	mov	r5, ip
 8004fc4:	b942      	cbnz	r2, 8004fd8 <_strtol_l.isra.0+0xe8>
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	e79d      	b.n	8004f06 <_strtol_l.isra.0+0x16>
 8004fca:	f1b8 0f00 	cmp.w	r8, #0
 8004fce:	d000      	beq.n	8004fd2 <_strtol_l.isra.0+0xe2>
 8004fd0:	426d      	negs	r5, r5
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	d0f7      	beq.n	8004fc6 <_strtol_l.isra.0+0xd6>
 8004fd6:	b10e      	cbz	r6, 8004fdc <_strtol_l.isra.0+0xec>
 8004fd8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8004fdc:	6011      	str	r1, [r2, #0]
 8004fde:	e7f2      	b.n	8004fc6 <_strtol_l.isra.0+0xd6>
 8004fe0:	2430      	movs	r4, #48	; 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1b3      	bne.n	8004f4e <_strtol_l.isra.0+0x5e>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	e7b1      	b.n	8004f4e <_strtol_l.isra.0+0x5e>
 8004fea:	2c30      	cmp	r4, #48	; 0x30
 8004fec:	d0a4      	beq.n	8004f38 <_strtol_l.isra.0+0x48>
 8004fee:	230a      	movs	r3, #10
 8004ff0:	e7ad      	b.n	8004f4e <_strtol_l.isra.0+0x5e>
 8004ff2:	bf00      	nop
 8004ff4:	08008711 	.word	0x08008711

08004ff8 <_strtol_r>:
 8004ff8:	f7ff bf7a 	b.w	8004ef0 <_strtol_l.isra.0>

08004ffc <_write_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d07      	ldr	r5, [pc, #28]	; (800501c <_write_r+0x20>)
 8005000:	4604      	mov	r4, r0
 8005002:	4608      	mov	r0, r1
 8005004:	4611      	mov	r1, r2
 8005006:	2200      	movs	r2, #0
 8005008:	602a      	str	r2, [r5, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f7fc fce1 	bl	80019d2 <_write>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_write_r+0x1e>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_write_r+0x1e>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	200002b4 	.word	0x200002b4

08005020 <_close_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4d06      	ldr	r5, [pc, #24]	; (800503c <_close_r+0x1c>)
 8005024:	2300      	movs	r3, #0
 8005026:	4604      	mov	r4, r0
 8005028:	4608      	mov	r0, r1
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	f7fc fced 	bl	8001a0a <_close>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_close_r+0x1a>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_close_r+0x1a>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	200002b4 	.word	0x200002b4

08005040 <quorem>:
 8005040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	6903      	ldr	r3, [r0, #16]
 8005046:	690c      	ldr	r4, [r1, #16]
 8005048:	42a3      	cmp	r3, r4
 800504a:	4607      	mov	r7, r0
 800504c:	f2c0 8081 	blt.w	8005152 <quorem+0x112>
 8005050:	3c01      	subs	r4, #1
 8005052:	f101 0814 	add.w	r8, r1, #20
 8005056:	f100 0514 	add.w	r5, r0, #20
 800505a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005068:	3301      	adds	r3, #1
 800506a:	429a      	cmp	r2, r3
 800506c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005074:	fbb2 f6f3 	udiv	r6, r2, r3
 8005078:	d331      	bcc.n	80050de <quorem+0x9e>
 800507a:	f04f 0e00 	mov.w	lr, #0
 800507e:	4640      	mov	r0, r8
 8005080:	46ac      	mov	ip, r5
 8005082:	46f2      	mov	sl, lr
 8005084:	f850 2b04 	ldr.w	r2, [r0], #4
 8005088:	b293      	uxth	r3, r2
 800508a:	fb06 e303 	mla	r3, r6, r3, lr
 800508e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005092:	b29b      	uxth	r3, r3
 8005094:	ebaa 0303 	sub.w	r3, sl, r3
 8005098:	0c12      	lsrs	r2, r2, #16
 800509a:	f8dc a000 	ldr.w	sl, [ip]
 800509e:	fb06 e202 	mla	r2, r6, r2, lr
 80050a2:	fa13 f38a 	uxtah	r3, r3, sl
 80050a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050aa:	fa1f fa82 	uxth.w	sl, r2
 80050ae:	f8dc 2000 	ldr.w	r2, [ip]
 80050b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80050b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c0:	4581      	cmp	r9, r0
 80050c2:	f84c 3b04 	str.w	r3, [ip], #4
 80050c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050ca:	d2db      	bcs.n	8005084 <quorem+0x44>
 80050cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80050d0:	b92b      	cbnz	r3, 80050de <quorem+0x9e>
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	3b04      	subs	r3, #4
 80050d6:	429d      	cmp	r5, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	d32e      	bcc.n	800513a <quorem+0xfa>
 80050dc:	613c      	str	r4, [r7, #16]
 80050de:	4638      	mov	r0, r7
 80050e0:	f001 fc9c 	bl	8006a1c <__mcmp>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	db24      	blt.n	8005132 <quorem+0xf2>
 80050e8:	3601      	adds	r6, #1
 80050ea:	4628      	mov	r0, r5
 80050ec:	f04f 0c00 	mov.w	ip, #0
 80050f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80050f4:	f8d0 e000 	ldr.w	lr, [r0]
 80050f8:	b293      	uxth	r3, r2
 80050fa:	ebac 0303 	sub.w	r3, ip, r3
 80050fe:	0c12      	lsrs	r2, r2, #16
 8005100:	fa13 f38e 	uxtah	r3, r3, lr
 8005104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005112:	45c1      	cmp	r9, r8
 8005114:	f840 3b04 	str.w	r3, [r0], #4
 8005118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800511c:	d2e8      	bcs.n	80050f0 <quorem+0xb0>
 800511e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005126:	b922      	cbnz	r2, 8005132 <quorem+0xf2>
 8005128:	3b04      	subs	r3, #4
 800512a:	429d      	cmp	r5, r3
 800512c:	461a      	mov	r2, r3
 800512e:	d30a      	bcc.n	8005146 <quorem+0x106>
 8005130:	613c      	str	r4, [r7, #16]
 8005132:	4630      	mov	r0, r6
 8005134:	b003      	add	sp, #12
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	3b04      	subs	r3, #4
 800513e:	2a00      	cmp	r2, #0
 8005140:	d1cc      	bne.n	80050dc <quorem+0x9c>
 8005142:	3c01      	subs	r4, #1
 8005144:	e7c7      	b.n	80050d6 <quorem+0x96>
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	3b04      	subs	r3, #4
 800514a:	2a00      	cmp	r2, #0
 800514c:	d1f0      	bne.n	8005130 <quorem+0xf0>
 800514e:	3c01      	subs	r4, #1
 8005150:	e7eb      	b.n	800512a <quorem+0xea>
 8005152:	2000      	movs	r0, #0
 8005154:	e7ee      	b.n	8005134 <quorem+0xf4>
	...

08005158 <_dtoa_r>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	ed2d 8b02 	vpush	{d8}
 8005160:	ec57 6b10 	vmov	r6, r7, d0
 8005164:	b095      	sub	sp, #84	; 0x54
 8005166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005172:	4604      	mov	r4, r0
 8005174:	9209      	str	r2, [sp, #36]	; 0x24
 8005176:	930f      	str	r3, [sp, #60]	; 0x3c
 8005178:	b975      	cbnz	r5, 8005198 <_dtoa_r+0x40>
 800517a:	2010      	movs	r0, #16
 800517c:	f001 f95e 	bl	800643c <malloc>
 8005180:	4602      	mov	r2, r0
 8005182:	6260      	str	r0, [r4, #36]	; 0x24
 8005184:	b920      	cbnz	r0, 8005190 <_dtoa_r+0x38>
 8005186:	4bb2      	ldr	r3, [pc, #712]	; (8005450 <_dtoa_r+0x2f8>)
 8005188:	21ea      	movs	r1, #234	; 0xea
 800518a:	48b2      	ldr	r0, [pc, #712]	; (8005454 <_dtoa_r+0x2fc>)
 800518c:	f002 fcaa 	bl	8007ae4 <__assert_func>
 8005190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005194:	6005      	str	r5, [r0, #0]
 8005196:	60c5      	str	r5, [r0, #12]
 8005198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	b151      	cbz	r1, 80051b4 <_dtoa_r+0x5c>
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	604a      	str	r2, [r1, #4]
 80051a2:	2301      	movs	r3, #1
 80051a4:	4093      	lsls	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f001 f9af 	bl	800650c <_Bfree>
 80051ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	1e3b      	subs	r3, r7, #0
 80051b6:	bfb9      	ittee	lt
 80051b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051bc:	9303      	strlt	r3, [sp, #12]
 80051be:	2300      	movge	r3, #0
 80051c0:	f8c8 3000 	strge.w	r3, [r8]
 80051c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80051c8:	4ba3      	ldr	r3, [pc, #652]	; (8005458 <_dtoa_r+0x300>)
 80051ca:	bfbc      	itt	lt
 80051cc:	2201      	movlt	r2, #1
 80051ce:	f8c8 2000 	strlt.w	r2, [r8]
 80051d2:	ea33 0309 	bics.w	r3, r3, r9
 80051d6:	d11b      	bne.n	8005210 <_dtoa_r+0xb8>
 80051d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051da:	f242 730f 	movw	r3, #9999	; 0x270f
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051e4:	4333      	orrs	r3, r6
 80051e6:	f000 857a 	beq.w	8005cde <_dtoa_r+0xb86>
 80051ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051ec:	b963      	cbnz	r3, 8005208 <_dtoa_r+0xb0>
 80051ee:	4b9b      	ldr	r3, [pc, #620]	; (800545c <_dtoa_r+0x304>)
 80051f0:	e024      	b.n	800523c <_dtoa_r+0xe4>
 80051f2:	4b9b      	ldr	r3, [pc, #620]	; (8005460 <_dtoa_r+0x308>)
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	3308      	adds	r3, #8
 80051f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	9800      	ldr	r0, [sp, #0]
 80051fe:	b015      	add	sp, #84	; 0x54
 8005200:	ecbd 8b02 	vpop	{d8}
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4b94      	ldr	r3, [pc, #592]	; (800545c <_dtoa_r+0x304>)
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	3303      	adds	r3, #3
 800520e:	e7f3      	b.n	80051f8 <_dtoa_r+0xa0>
 8005210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	ec51 0b17 	vmov	r0, r1, d7
 800521a:	2300      	movs	r3, #0
 800521c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005220:	f7fb fc62 	bl	8000ae8 <__aeabi_dcmpeq>
 8005224:	4680      	mov	r8, r0
 8005226:	b158      	cbz	r0, 8005240 <_dtoa_r+0xe8>
 8005228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800522a:	2301      	movs	r3, #1
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8551 	beq.w	8005cd8 <_dtoa_r+0xb80>
 8005236:	488b      	ldr	r0, [pc, #556]	; (8005464 <_dtoa_r+0x30c>)
 8005238:	6018      	str	r0, [r3, #0]
 800523a:	1e43      	subs	r3, r0, #1
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	e7dd      	b.n	80051fc <_dtoa_r+0xa4>
 8005240:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005244:	aa12      	add	r2, sp, #72	; 0x48
 8005246:	a913      	add	r1, sp, #76	; 0x4c
 8005248:	4620      	mov	r0, r4
 800524a:	f001 fd07 	bl	8006c5c <__d2b>
 800524e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005252:	4683      	mov	fp, r0
 8005254:	2d00      	cmp	r5, #0
 8005256:	d07c      	beq.n	8005352 <_dtoa_r+0x1fa>
 8005258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800525a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800525e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005262:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005266:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800526a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800526e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005272:	4b7d      	ldr	r3, [pc, #500]	; (8005468 <_dtoa_r+0x310>)
 8005274:	2200      	movs	r2, #0
 8005276:	4630      	mov	r0, r6
 8005278:	4639      	mov	r1, r7
 800527a:	f7fb f815 	bl	80002a8 <__aeabi_dsub>
 800527e:	a36e      	add	r3, pc, #440	; (adr r3, 8005438 <_dtoa_r+0x2e0>)
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f7fb f9c8 	bl	8000618 <__aeabi_dmul>
 8005288:	a36d      	add	r3, pc, #436	; (adr r3, 8005440 <_dtoa_r+0x2e8>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	f7fb f80d 	bl	80002ac <__adddf3>
 8005292:	4606      	mov	r6, r0
 8005294:	4628      	mov	r0, r5
 8005296:	460f      	mov	r7, r1
 8005298:	f7fb f954 	bl	8000544 <__aeabi_i2d>
 800529c:	a36a      	add	r3, pc, #424	; (adr r3, 8005448 <_dtoa_r+0x2f0>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fb f9b9 	bl	8000618 <__aeabi_dmul>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fa fffd 	bl	80002ac <__adddf3>
 80052b2:	4606      	mov	r6, r0
 80052b4:	460f      	mov	r7, r1
 80052b6:	f7fb fc5f 	bl	8000b78 <__aeabi_d2iz>
 80052ba:	2200      	movs	r2, #0
 80052bc:	4682      	mov	sl, r0
 80052be:	2300      	movs	r3, #0
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	f7fb fc1a 	bl	8000afc <__aeabi_dcmplt>
 80052c8:	b148      	cbz	r0, 80052de <_dtoa_r+0x186>
 80052ca:	4650      	mov	r0, sl
 80052cc:	f7fb f93a 	bl	8000544 <__aeabi_i2d>
 80052d0:	4632      	mov	r2, r6
 80052d2:	463b      	mov	r3, r7
 80052d4:	f7fb fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80052d8:	b908      	cbnz	r0, 80052de <_dtoa_r+0x186>
 80052da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80052de:	f1ba 0f16 	cmp.w	sl, #22
 80052e2:	d854      	bhi.n	800538e <_dtoa_r+0x236>
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <_dtoa_r+0x314>)
 80052e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052f2:	f7fb fc03 	bl	8000afc <__aeabi_dcmplt>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d04b      	beq.n	8005392 <_dtoa_r+0x23a>
 80052fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80052fe:	2300      	movs	r3, #0
 8005300:	930e      	str	r3, [sp, #56]	; 0x38
 8005302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005304:	1b5d      	subs	r5, r3, r5
 8005306:	1e6b      	subs	r3, r5, #1
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	bf43      	ittte	mi
 800530c:	2300      	movmi	r3, #0
 800530e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005312:	9304      	strmi	r3, [sp, #16]
 8005314:	f04f 0800 	movpl.w	r8, #0
 8005318:	f1ba 0f00 	cmp.w	sl, #0
 800531c:	db3b      	blt.n	8005396 <_dtoa_r+0x23e>
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005324:	4453      	add	r3, sl
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	2300      	movs	r3, #0
 800532a:	9306      	str	r3, [sp, #24]
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	2b09      	cmp	r3, #9
 8005330:	d869      	bhi.n	8005406 <_dtoa_r+0x2ae>
 8005332:	2b05      	cmp	r3, #5
 8005334:	bfc4      	itt	gt
 8005336:	3b04      	subgt	r3, #4
 8005338:	9305      	strgt	r3, [sp, #20]
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	f1a3 0302 	sub.w	r3, r3, #2
 8005340:	bfcc      	ite	gt
 8005342:	2500      	movgt	r5, #0
 8005344:	2501      	movle	r5, #1
 8005346:	2b03      	cmp	r3, #3
 8005348:	d869      	bhi.n	800541e <_dtoa_r+0x2c6>
 800534a:	e8df f003 	tbb	[pc, r3]
 800534e:	4e2c      	.short	0x4e2c
 8005350:	5a4c      	.short	0x5a4c
 8005352:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005356:	441d      	add	r5, r3
 8005358:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800535c:	2b20      	cmp	r3, #32
 800535e:	bfc1      	itttt	gt
 8005360:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005364:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005368:	fa09 f303 	lslgt.w	r3, r9, r3
 800536c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005370:	bfda      	itte	le
 8005372:	f1c3 0320 	rsble	r3, r3, #32
 8005376:	fa06 f003 	lslle.w	r0, r6, r3
 800537a:	4318      	orrgt	r0, r3
 800537c:	f7fb f8d2 	bl	8000524 <__aeabi_ui2d>
 8005380:	2301      	movs	r3, #1
 8005382:	4606      	mov	r6, r0
 8005384:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005388:	3d01      	subs	r5, #1
 800538a:	9310      	str	r3, [sp, #64]	; 0x40
 800538c:	e771      	b.n	8005272 <_dtoa_r+0x11a>
 800538e:	2301      	movs	r3, #1
 8005390:	e7b6      	b.n	8005300 <_dtoa_r+0x1a8>
 8005392:	900e      	str	r0, [sp, #56]	; 0x38
 8005394:	e7b5      	b.n	8005302 <_dtoa_r+0x1aa>
 8005396:	f1ca 0300 	rsb	r3, sl, #0
 800539a:	9306      	str	r3, [sp, #24]
 800539c:	2300      	movs	r3, #0
 800539e:	eba8 080a 	sub.w	r8, r8, sl
 80053a2:	930d      	str	r3, [sp, #52]	; 0x34
 80053a4:	e7c2      	b.n	800532c <_dtoa_r+0x1d4>
 80053a6:	2300      	movs	r3, #0
 80053a8:	9308      	str	r3, [sp, #32]
 80053aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	dc39      	bgt.n	8005424 <_dtoa_r+0x2cc>
 80053b0:	f04f 0901 	mov.w	r9, #1
 80053b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80053b8:	464b      	mov	r3, r9
 80053ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80053be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80053c0:	2200      	movs	r2, #0
 80053c2:	6042      	str	r2, [r0, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	f102 0614 	add.w	r6, r2, #20
 80053ca:	429e      	cmp	r6, r3
 80053cc:	6841      	ldr	r1, [r0, #4]
 80053ce:	d92f      	bls.n	8005430 <_dtoa_r+0x2d8>
 80053d0:	4620      	mov	r0, r4
 80053d2:	f001 f85b 	bl	800648c <_Balloc>
 80053d6:	9000      	str	r0, [sp, #0]
 80053d8:	2800      	cmp	r0, #0
 80053da:	d14b      	bne.n	8005474 <_dtoa_r+0x31c>
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <_dtoa_r+0x318>)
 80053de:	4602      	mov	r2, r0
 80053e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053e4:	e6d1      	b.n	800518a <_dtoa_r+0x32>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e7de      	b.n	80053a8 <_dtoa_r+0x250>
 80053ea:	2300      	movs	r3, #0
 80053ec:	9308      	str	r3, [sp, #32]
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	eb0a 0903 	add.w	r9, sl, r3
 80053f4:	f109 0301 	add.w	r3, r9, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	bfb8      	it	lt
 80053fe:	2301      	movlt	r3, #1
 8005400:	e7dd      	b.n	80053be <_dtoa_r+0x266>
 8005402:	2301      	movs	r3, #1
 8005404:	e7f2      	b.n	80053ec <_dtoa_r+0x294>
 8005406:	2501      	movs	r5, #1
 8005408:	2300      	movs	r3, #0
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	9508      	str	r5, [sp, #32]
 800540e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005412:	2200      	movs	r2, #0
 8005414:	f8cd 9004 	str.w	r9, [sp, #4]
 8005418:	2312      	movs	r3, #18
 800541a:	9209      	str	r2, [sp, #36]	; 0x24
 800541c:	e7cf      	b.n	80053be <_dtoa_r+0x266>
 800541e:	2301      	movs	r3, #1
 8005420:	9308      	str	r3, [sp, #32]
 8005422:	e7f4      	b.n	800540e <_dtoa_r+0x2b6>
 8005424:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005428:	f8cd 9004 	str.w	r9, [sp, #4]
 800542c:	464b      	mov	r3, r9
 800542e:	e7c6      	b.n	80053be <_dtoa_r+0x266>
 8005430:	3101      	adds	r1, #1
 8005432:	6041      	str	r1, [r0, #4]
 8005434:	0052      	lsls	r2, r2, #1
 8005436:	e7c6      	b.n	80053c6 <_dtoa_r+0x26e>
 8005438:	636f4361 	.word	0x636f4361
 800543c:	3fd287a7 	.word	0x3fd287a7
 8005440:	8b60c8b3 	.word	0x8b60c8b3
 8005444:	3fc68a28 	.word	0x3fc68a28
 8005448:	509f79fb 	.word	0x509f79fb
 800544c:	3fd34413 	.word	0x3fd34413
 8005450:	0800881e 	.word	0x0800881e
 8005454:	08008835 	.word	0x08008835
 8005458:	7ff00000 	.word	0x7ff00000
 800545c:	0800881a 	.word	0x0800881a
 8005460:	08008811 	.word	0x08008811
 8005464:	08008a9a 	.word	0x08008a9a
 8005468:	3ff80000 	.word	0x3ff80000
 800546c:	080089b0 	.word	0x080089b0
 8005470:	08008894 	.word	0x08008894
 8005474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005476:	9a00      	ldr	r2, [sp, #0]
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	2b0e      	cmp	r3, #14
 800547e:	f200 80ad 	bhi.w	80055dc <_dtoa_r+0x484>
 8005482:	2d00      	cmp	r5, #0
 8005484:	f000 80aa 	beq.w	80055dc <_dtoa_r+0x484>
 8005488:	f1ba 0f00 	cmp.w	sl, #0
 800548c:	dd36      	ble.n	80054fc <_dtoa_r+0x3a4>
 800548e:	4ac3      	ldr	r2, [pc, #780]	; (800579c <_dtoa_r+0x644>)
 8005490:	f00a 030f 	and.w	r3, sl, #15
 8005494:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005498:	ed93 7b00 	vldr	d7, [r3]
 800549c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80054a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80054a4:	eeb0 8a47 	vmov.f32	s16, s14
 80054a8:	eef0 8a67 	vmov.f32	s17, s15
 80054ac:	d016      	beq.n	80054dc <_dtoa_r+0x384>
 80054ae:	4bbc      	ldr	r3, [pc, #752]	; (80057a0 <_dtoa_r+0x648>)
 80054b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054b8:	f7fb f9d8 	bl	800086c <__aeabi_ddiv>
 80054bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c0:	f007 070f 	and.w	r7, r7, #15
 80054c4:	2503      	movs	r5, #3
 80054c6:	4eb6      	ldr	r6, [pc, #728]	; (80057a0 <_dtoa_r+0x648>)
 80054c8:	b957      	cbnz	r7, 80054e0 <_dtoa_r+0x388>
 80054ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ce:	ec53 2b18 	vmov	r2, r3, d8
 80054d2:	f7fb f9cb 	bl	800086c <__aeabi_ddiv>
 80054d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054da:	e029      	b.n	8005530 <_dtoa_r+0x3d8>
 80054dc:	2502      	movs	r5, #2
 80054de:	e7f2      	b.n	80054c6 <_dtoa_r+0x36e>
 80054e0:	07f9      	lsls	r1, r7, #31
 80054e2:	d508      	bpl.n	80054f6 <_dtoa_r+0x39e>
 80054e4:	ec51 0b18 	vmov	r0, r1, d8
 80054e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ec:	f7fb f894 	bl	8000618 <__aeabi_dmul>
 80054f0:	ec41 0b18 	vmov	d8, r0, r1
 80054f4:	3501      	adds	r5, #1
 80054f6:	107f      	asrs	r7, r7, #1
 80054f8:	3608      	adds	r6, #8
 80054fa:	e7e5      	b.n	80054c8 <_dtoa_r+0x370>
 80054fc:	f000 80a6 	beq.w	800564c <_dtoa_r+0x4f4>
 8005500:	f1ca 0600 	rsb	r6, sl, #0
 8005504:	4ba5      	ldr	r3, [pc, #660]	; (800579c <_dtoa_r+0x644>)
 8005506:	4fa6      	ldr	r7, [pc, #664]	; (80057a0 <_dtoa_r+0x648>)
 8005508:	f006 020f 	and.w	r2, r6, #15
 800550c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005518:	f7fb f87e 	bl	8000618 <__aeabi_dmul>
 800551c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005520:	1136      	asrs	r6, r6, #4
 8005522:	2300      	movs	r3, #0
 8005524:	2502      	movs	r5, #2
 8005526:	2e00      	cmp	r6, #0
 8005528:	f040 8085 	bne.w	8005636 <_dtoa_r+0x4de>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1d2      	bne.n	80054d6 <_dtoa_r+0x37e>
 8005530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 808c 	beq.w	8005650 <_dtoa_r+0x4f8>
 8005538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800553c:	4b99      	ldr	r3, [pc, #612]	; (80057a4 <_dtoa_r+0x64c>)
 800553e:	2200      	movs	r2, #0
 8005540:	4630      	mov	r0, r6
 8005542:	4639      	mov	r1, r7
 8005544:	f7fb fada 	bl	8000afc <__aeabi_dcmplt>
 8005548:	2800      	cmp	r0, #0
 800554a:	f000 8081 	beq.w	8005650 <_dtoa_r+0x4f8>
 800554e:	9b01      	ldr	r3, [sp, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07d      	beq.n	8005650 <_dtoa_r+0x4f8>
 8005554:	f1b9 0f00 	cmp.w	r9, #0
 8005558:	dd3c      	ble.n	80055d4 <_dtoa_r+0x47c>
 800555a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800555e:	9307      	str	r3, [sp, #28]
 8005560:	2200      	movs	r2, #0
 8005562:	4b91      	ldr	r3, [pc, #580]	; (80057a8 <_dtoa_r+0x650>)
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fb f856 	bl	8000618 <__aeabi_dmul>
 800556c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005570:	3501      	adds	r5, #1
 8005572:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005576:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa ffe2 	bl	8000544 <__aeabi_i2d>
 8005580:	4632      	mov	r2, r6
 8005582:	463b      	mov	r3, r7
 8005584:	f7fb f848 	bl	8000618 <__aeabi_dmul>
 8005588:	4b88      	ldr	r3, [pc, #544]	; (80057ac <_dtoa_r+0x654>)
 800558a:	2200      	movs	r2, #0
 800558c:	f7fa fe8e 	bl	80002ac <__adddf3>
 8005590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005598:	9303      	str	r3, [sp, #12]
 800559a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800559c:	2b00      	cmp	r3, #0
 800559e:	d15c      	bne.n	800565a <_dtoa_r+0x502>
 80055a0:	4b83      	ldr	r3, [pc, #524]	; (80057b0 <_dtoa_r+0x658>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fa fe7e 	bl	80002a8 <__aeabi_dsub>
 80055ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b0:	4606      	mov	r6, r0
 80055b2:	460f      	mov	r7, r1
 80055b4:	f7fb fac0 	bl	8000b38 <__aeabi_dcmpgt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f040 8296 	bne.w	8005aea <_dtoa_r+0x992>
 80055be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80055c2:	4630      	mov	r0, r6
 80055c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fb fa97 	bl	8000afc <__aeabi_dcmplt>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 8288 	bne.w	8005ae4 <_dtoa_r+0x98c>
 80055d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f2c0 8158 	blt.w	8005894 <_dtoa_r+0x73c>
 80055e4:	f1ba 0f0e 	cmp.w	sl, #14
 80055e8:	f300 8154 	bgt.w	8005894 <_dtoa_r+0x73c>
 80055ec:	4b6b      	ldr	r3, [pc, #428]	; (800579c <_dtoa_r+0x644>)
 80055ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f280 80e3 	bge.w	80057c4 <_dtoa_r+0x66c>
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f300 80df 	bgt.w	80057c4 <_dtoa_r+0x66c>
 8005606:	f040 826d 	bne.w	8005ae4 <_dtoa_r+0x98c>
 800560a:	4b69      	ldr	r3, [pc, #420]	; (80057b0 <_dtoa_r+0x658>)
 800560c:	2200      	movs	r2, #0
 800560e:	4640      	mov	r0, r8
 8005610:	4649      	mov	r1, r9
 8005612:	f7fb f801 	bl	8000618 <__aeabi_dmul>
 8005616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561a:	f7fb fa83 	bl	8000b24 <__aeabi_dcmpge>
 800561e:	9e01      	ldr	r6, [sp, #4]
 8005620:	4637      	mov	r7, r6
 8005622:	2800      	cmp	r0, #0
 8005624:	f040 8243 	bne.w	8005aae <_dtoa_r+0x956>
 8005628:	9d00      	ldr	r5, [sp, #0]
 800562a:	2331      	movs	r3, #49	; 0x31
 800562c:	f805 3b01 	strb.w	r3, [r5], #1
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	e23f      	b.n	8005ab6 <_dtoa_r+0x95e>
 8005636:	07f2      	lsls	r2, r6, #31
 8005638:	d505      	bpl.n	8005646 <_dtoa_r+0x4ee>
 800563a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800563e:	f7fa ffeb 	bl	8000618 <__aeabi_dmul>
 8005642:	3501      	adds	r5, #1
 8005644:	2301      	movs	r3, #1
 8005646:	1076      	asrs	r6, r6, #1
 8005648:	3708      	adds	r7, #8
 800564a:	e76c      	b.n	8005526 <_dtoa_r+0x3ce>
 800564c:	2502      	movs	r5, #2
 800564e:	e76f      	b.n	8005530 <_dtoa_r+0x3d8>
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	f8cd a01c 	str.w	sl, [sp, #28]
 8005656:	930c      	str	r3, [sp, #48]	; 0x30
 8005658:	e78d      	b.n	8005576 <_dtoa_r+0x41e>
 800565a:	9900      	ldr	r1, [sp, #0]
 800565c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800565e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005660:	4b4e      	ldr	r3, [pc, #312]	; (800579c <_dtoa_r+0x644>)
 8005662:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005666:	4401      	add	r1, r0
 8005668:	9102      	str	r1, [sp, #8]
 800566a:	9908      	ldr	r1, [sp, #32]
 800566c:	eeb0 8a47 	vmov.f32	s16, s14
 8005670:	eef0 8a67 	vmov.f32	s17, s15
 8005674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800567c:	2900      	cmp	r1, #0
 800567e:	d045      	beq.n	800570c <_dtoa_r+0x5b4>
 8005680:	494c      	ldr	r1, [pc, #304]	; (80057b4 <_dtoa_r+0x65c>)
 8005682:	2000      	movs	r0, #0
 8005684:	f7fb f8f2 	bl	800086c <__aeabi_ddiv>
 8005688:	ec53 2b18 	vmov	r2, r3, d8
 800568c:	f7fa fe0c 	bl	80002a8 <__aeabi_dsub>
 8005690:	9d00      	ldr	r5, [sp, #0]
 8005692:	ec41 0b18 	vmov	d8, r0, r1
 8005696:	4639      	mov	r1, r7
 8005698:	4630      	mov	r0, r6
 800569a:	f7fb fa6d 	bl	8000b78 <__aeabi_d2iz>
 800569e:	900c      	str	r0, [sp, #48]	; 0x30
 80056a0:	f7fa ff50 	bl	8000544 <__aeabi_i2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4630      	mov	r0, r6
 80056aa:	4639      	mov	r1, r7
 80056ac:	f7fa fdfc 	bl	80002a8 <__aeabi_dsub>
 80056b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b2:	3330      	adds	r3, #48	; 0x30
 80056b4:	f805 3b01 	strb.w	r3, [r5], #1
 80056b8:	ec53 2b18 	vmov	r2, r3, d8
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	f7fb fa1c 	bl	8000afc <__aeabi_dcmplt>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d165      	bne.n	8005794 <_dtoa_r+0x63c>
 80056c8:	4632      	mov	r2, r6
 80056ca:	463b      	mov	r3, r7
 80056cc:	4935      	ldr	r1, [pc, #212]	; (80057a4 <_dtoa_r+0x64c>)
 80056ce:	2000      	movs	r0, #0
 80056d0:	f7fa fdea 	bl	80002a8 <__aeabi_dsub>
 80056d4:	ec53 2b18 	vmov	r2, r3, d8
 80056d8:	f7fb fa10 	bl	8000afc <__aeabi_dcmplt>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 80b9 	bne.w	8005854 <_dtoa_r+0x6fc>
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	429d      	cmp	r5, r3
 80056e6:	f43f af75 	beq.w	80055d4 <_dtoa_r+0x47c>
 80056ea:	4b2f      	ldr	r3, [pc, #188]	; (80057a8 <_dtoa_r+0x650>)
 80056ec:	ec51 0b18 	vmov	r0, r1, d8
 80056f0:	2200      	movs	r2, #0
 80056f2:	f7fa ff91 	bl	8000618 <__aeabi_dmul>
 80056f6:	4b2c      	ldr	r3, [pc, #176]	; (80057a8 <_dtoa_r+0x650>)
 80056f8:	ec41 0b18 	vmov	d8, r0, r1
 80056fc:	2200      	movs	r2, #0
 80056fe:	4630      	mov	r0, r6
 8005700:	4639      	mov	r1, r7
 8005702:	f7fa ff89 	bl	8000618 <__aeabi_dmul>
 8005706:	4606      	mov	r6, r0
 8005708:	460f      	mov	r7, r1
 800570a:	e7c4      	b.n	8005696 <_dtoa_r+0x53e>
 800570c:	ec51 0b17 	vmov	r0, r1, d7
 8005710:	f7fa ff82 	bl	8000618 <__aeabi_dmul>
 8005714:	9b02      	ldr	r3, [sp, #8]
 8005716:	9d00      	ldr	r5, [sp, #0]
 8005718:	930c      	str	r3, [sp, #48]	; 0x30
 800571a:	ec41 0b18 	vmov	d8, r0, r1
 800571e:	4639      	mov	r1, r7
 8005720:	4630      	mov	r0, r6
 8005722:	f7fb fa29 	bl	8000b78 <__aeabi_d2iz>
 8005726:	9011      	str	r0, [sp, #68]	; 0x44
 8005728:	f7fa ff0c 	bl	8000544 <__aeabi_i2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4630      	mov	r0, r6
 8005732:	4639      	mov	r1, r7
 8005734:	f7fa fdb8 	bl	80002a8 <__aeabi_dsub>
 8005738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800573a:	3330      	adds	r3, #48	; 0x30
 800573c:	f805 3b01 	strb.w	r3, [r5], #1
 8005740:	9b02      	ldr	r3, [sp, #8]
 8005742:	429d      	cmp	r5, r3
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	d134      	bne.n	80057b8 <_dtoa_r+0x660>
 800574e:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <_dtoa_r+0x65c>)
 8005750:	ec51 0b18 	vmov	r0, r1, d8
 8005754:	f7fa fdaa 	bl	80002ac <__adddf3>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fb f9ea 	bl	8000b38 <__aeabi_dcmpgt>
 8005764:	2800      	cmp	r0, #0
 8005766:	d175      	bne.n	8005854 <_dtoa_r+0x6fc>
 8005768:	ec53 2b18 	vmov	r2, r3, d8
 800576c:	4911      	ldr	r1, [pc, #68]	; (80057b4 <_dtoa_r+0x65c>)
 800576e:	2000      	movs	r0, #0
 8005770:	f7fa fd9a 	bl	80002a8 <__aeabi_dsub>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fb f9be 	bl	8000afc <__aeabi_dcmplt>
 8005780:	2800      	cmp	r0, #0
 8005782:	f43f af27 	beq.w	80055d4 <_dtoa_r+0x47c>
 8005786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005788:	1e6b      	subs	r3, r5, #1
 800578a:	930c      	str	r3, [sp, #48]	; 0x30
 800578c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005790:	2b30      	cmp	r3, #48	; 0x30
 8005792:	d0f8      	beq.n	8005786 <_dtoa_r+0x62e>
 8005794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005798:	e04a      	b.n	8005830 <_dtoa_r+0x6d8>
 800579a:	bf00      	nop
 800579c:	080089b0 	.word	0x080089b0
 80057a0:	08008988 	.word	0x08008988
 80057a4:	3ff00000 	.word	0x3ff00000
 80057a8:	40240000 	.word	0x40240000
 80057ac:	401c0000 	.word	0x401c0000
 80057b0:	40140000 	.word	0x40140000
 80057b4:	3fe00000 	.word	0x3fe00000
 80057b8:	4baf      	ldr	r3, [pc, #700]	; (8005a78 <_dtoa_r+0x920>)
 80057ba:	f7fa ff2d 	bl	8000618 <__aeabi_dmul>
 80057be:	4606      	mov	r6, r0
 80057c0:	460f      	mov	r7, r1
 80057c2:	e7ac      	b.n	800571e <_dtoa_r+0x5c6>
 80057c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057c8:	9d00      	ldr	r5, [sp, #0]
 80057ca:	4642      	mov	r2, r8
 80057cc:	464b      	mov	r3, r9
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fb f84b 	bl	800086c <__aeabi_ddiv>
 80057d6:	f7fb f9cf 	bl	8000b78 <__aeabi_d2iz>
 80057da:	9002      	str	r0, [sp, #8]
 80057dc:	f7fa feb2 	bl	8000544 <__aeabi_i2d>
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	f7fa ff18 	bl	8000618 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4630      	mov	r0, r6
 80057ee:	4639      	mov	r1, r7
 80057f0:	f7fa fd5a 	bl	80002a8 <__aeabi_dsub>
 80057f4:	9e02      	ldr	r6, [sp, #8]
 80057f6:	9f01      	ldr	r7, [sp, #4]
 80057f8:	3630      	adds	r6, #48	; 0x30
 80057fa:	f805 6b01 	strb.w	r6, [r5], #1
 80057fe:	9e00      	ldr	r6, [sp, #0]
 8005800:	1bae      	subs	r6, r5, r6
 8005802:	42b7      	cmp	r7, r6
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	d137      	bne.n	800587a <_dtoa_r+0x722>
 800580a:	f7fa fd4f 	bl	80002ac <__adddf3>
 800580e:	4642      	mov	r2, r8
 8005810:	464b      	mov	r3, r9
 8005812:	4606      	mov	r6, r0
 8005814:	460f      	mov	r7, r1
 8005816:	f7fb f98f 	bl	8000b38 <__aeabi_dcmpgt>
 800581a:	b9c8      	cbnz	r0, 8005850 <_dtoa_r+0x6f8>
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	f7fb f960 	bl	8000ae8 <__aeabi_dcmpeq>
 8005828:	b110      	cbz	r0, 8005830 <_dtoa_r+0x6d8>
 800582a:	9b02      	ldr	r3, [sp, #8]
 800582c:	07d9      	lsls	r1, r3, #31
 800582e:	d40f      	bmi.n	8005850 <_dtoa_r+0x6f8>
 8005830:	4620      	mov	r0, r4
 8005832:	4659      	mov	r1, fp
 8005834:	f000 fe6a 	bl	800650c <_Bfree>
 8005838:	2300      	movs	r3, #0
 800583a:	702b      	strb	r3, [r5, #0]
 800583c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800583e:	f10a 0001 	add.w	r0, sl, #1
 8005842:	6018      	str	r0, [r3, #0]
 8005844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005846:	2b00      	cmp	r3, #0
 8005848:	f43f acd8 	beq.w	80051fc <_dtoa_r+0xa4>
 800584c:	601d      	str	r5, [r3, #0]
 800584e:	e4d5      	b.n	80051fc <_dtoa_r+0xa4>
 8005850:	f8cd a01c 	str.w	sl, [sp, #28]
 8005854:	462b      	mov	r3, r5
 8005856:	461d      	mov	r5, r3
 8005858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800585c:	2a39      	cmp	r2, #57	; 0x39
 800585e:	d108      	bne.n	8005872 <_dtoa_r+0x71a>
 8005860:	9a00      	ldr	r2, [sp, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d1f7      	bne.n	8005856 <_dtoa_r+0x6fe>
 8005866:	9a07      	ldr	r2, [sp, #28]
 8005868:	9900      	ldr	r1, [sp, #0]
 800586a:	3201      	adds	r2, #1
 800586c:	9207      	str	r2, [sp, #28]
 800586e:	2230      	movs	r2, #48	; 0x30
 8005870:	700a      	strb	r2, [r1, #0]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	3201      	adds	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e78c      	b.n	8005794 <_dtoa_r+0x63c>
 800587a:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <_dtoa_r+0x920>)
 800587c:	2200      	movs	r2, #0
 800587e:	f7fa fecb 	bl	8000618 <__aeabi_dmul>
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	4606      	mov	r6, r0
 8005888:	460f      	mov	r7, r1
 800588a:	f7fb f92d 	bl	8000ae8 <__aeabi_dcmpeq>
 800588e:	2800      	cmp	r0, #0
 8005890:	d09b      	beq.n	80057ca <_dtoa_r+0x672>
 8005892:	e7cd      	b.n	8005830 <_dtoa_r+0x6d8>
 8005894:	9a08      	ldr	r2, [sp, #32]
 8005896:	2a00      	cmp	r2, #0
 8005898:	f000 80c4 	beq.w	8005a24 <_dtoa_r+0x8cc>
 800589c:	9a05      	ldr	r2, [sp, #20]
 800589e:	2a01      	cmp	r2, #1
 80058a0:	f300 80a8 	bgt.w	80059f4 <_dtoa_r+0x89c>
 80058a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	f000 80a0 	beq.w	80059ec <_dtoa_r+0x894>
 80058ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058b0:	9e06      	ldr	r6, [sp, #24]
 80058b2:	4645      	mov	r5, r8
 80058b4:	9a04      	ldr	r2, [sp, #16]
 80058b6:	2101      	movs	r1, #1
 80058b8:	441a      	add	r2, r3
 80058ba:	4620      	mov	r0, r4
 80058bc:	4498      	add	r8, r3
 80058be:	9204      	str	r2, [sp, #16]
 80058c0:	f000 ff2a 	bl	8006718 <__i2b>
 80058c4:	4607      	mov	r7, r0
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	dd0b      	ble.n	80058e2 <_dtoa_r+0x78a>
 80058ca:	9b04      	ldr	r3, [sp, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dd08      	ble.n	80058e2 <_dtoa_r+0x78a>
 80058d0:	42ab      	cmp	r3, r5
 80058d2:	9a04      	ldr	r2, [sp, #16]
 80058d4:	bfa8      	it	ge
 80058d6:	462b      	movge	r3, r5
 80058d8:	eba8 0803 	sub.w	r8, r8, r3
 80058dc:	1aed      	subs	r5, r5, r3
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	9304      	str	r3, [sp, #16]
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	b1fb      	cbz	r3, 8005926 <_dtoa_r+0x7ce>
 80058e6:	9b08      	ldr	r3, [sp, #32]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 809f 	beq.w	8005a2c <_dtoa_r+0x8d4>
 80058ee:	2e00      	cmp	r6, #0
 80058f0:	dd11      	ble.n	8005916 <_dtoa_r+0x7be>
 80058f2:	4639      	mov	r1, r7
 80058f4:	4632      	mov	r2, r6
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 ffca 	bl	8006890 <__pow5mult>
 80058fc:	465a      	mov	r2, fp
 80058fe:	4601      	mov	r1, r0
 8005900:	4607      	mov	r7, r0
 8005902:	4620      	mov	r0, r4
 8005904:	f000 ff1e 	bl	8006744 <__multiply>
 8005908:	4659      	mov	r1, fp
 800590a:	9007      	str	r0, [sp, #28]
 800590c:	4620      	mov	r0, r4
 800590e:	f000 fdfd 	bl	800650c <_Bfree>
 8005912:	9b07      	ldr	r3, [sp, #28]
 8005914:	469b      	mov	fp, r3
 8005916:	9b06      	ldr	r3, [sp, #24]
 8005918:	1b9a      	subs	r2, r3, r6
 800591a:	d004      	beq.n	8005926 <_dtoa_r+0x7ce>
 800591c:	4659      	mov	r1, fp
 800591e:	4620      	mov	r0, r4
 8005920:	f000 ffb6 	bl	8006890 <__pow5mult>
 8005924:	4683      	mov	fp, r0
 8005926:	2101      	movs	r1, #1
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fef5 	bl	8006718 <__i2b>
 800592e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005930:	2b00      	cmp	r3, #0
 8005932:	4606      	mov	r6, r0
 8005934:	dd7c      	ble.n	8005a30 <_dtoa_r+0x8d8>
 8005936:	461a      	mov	r2, r3
 8005938:	4601      	mov	r1, r0
 800593a:	4620      	mov	r0, r4
 800593c:	f000 ffa8 	bl	8006890 <__pow5mult>
 8005940:	9b05      	ldr	r3, [sp, #20]
 8005942:	2b01      	cmp	r3, #1
 8005944:	4606      	mov	r6, r0
 8005946:	dd76      	ble.n	8005a36 <_dtoa_r+0x8de>
 8005948:	2300      	movs	r3, #0
 800594a:	9306      	str	r3, [sp, #24]
 800594c:	6933      	ldr	r3, [r6, #16]
 800594e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005952:	6918      	ldr	r0, [r3, #16]
 8005954:	f000 fe90 	bl	8006678 <__hi0bits>
 8005958:	f1c0 0020 	rsb	r0, r0, #32
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	4418      	add	r0, r3
 8005960:	f010 001f 	ands.w	r0, r0, #31
 8005964:	f000 8086 	beq.w	8005a74 <_dtoa_r+0x91c>
 8005968:	f1c0 0320 	rsb	r3, r0, #32
 800596c:	2b04      	cmp	r3, #4
 800596e:	dd7f      	ble.n	8005a70 <_dtoa_r+0x918>
 8005970:	f1c0 001c 	rsb	r0, r0, #28
 8005974:	9b04      	ldr	r3, [sp, #16]
 8005976:	4403      	add	r3, r0
 8005978:	4480      	add	r8, r0
 800597a:	4405      	add	r5, r0
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	f1b8 0f00 	cmp.w	r8, #0
 8005982:	dd05      	ble.n	8005990 <_dtoa_r+0x838>
 8005984:	4659      	mov	r1, fp
 8005986:	4642      	mov	r2, r8
 8005988:	4620      	mov	r0, r4
 800598a:	f000 ffdb 	bl	8006944 <__lshift>
 800598e:	4683      	mov	fp, r0
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd05      	ble.n	80059a2 <_dtoa_r+0x84a>
 8005996:	4631      	mov	r1, r6
 8005998:	461a      	mov	r2, r3
 800599a:	4620      	mov	r0, r4
 800599c:	f000 ffd2 	bl	8006944 <__lshift>
 80059a0:	4606      	mov	r6, r0
 80059a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d069      	beq.n	8005a7c <_dtoa_r+0x924>
 80059a8:	4631      	mov	r1, r6
 80059aa:	4658      	mov	r0, fp
 80059ac:	f001 f836 	bl	8006a1c <__mcmp>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	da63      	bge.n	8005a7c <_dtoa_r+0x924>
 80059b4:	2300      	movs	r3, #0
 80059b6:	4659      	mov	r1, fp
 80059b8:	220a      	movs	r2, #10
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fdc8 	bl	8006550 <__multadd>
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80059c6:	4683      	mov	fp, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 818f 	beq.w	8005cec <_dtoa_r+0xb94>
 80059ce:	4639      	mov	r1, r7
 80059d0:	2300      	movs	r3, #0
 80059d2:	220a      	movs	r2, #10
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 fdbb 	bl	8006550 <__multadd>
 80059da:	f1b9 0f00 	cmp.w	r9, #0
 80059de:	4607      	mov	r7, r0
 80059e0:	f300 808e 	bgt.w	8005b00 <_dtoa_r+0x9a8>
 80059e4:	9b05      	ldr	r3, [sp, #20]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	dc50      	bgt.n	8005a8c <_dtoa_r+0x934>
 80059ea:	e089      	b.n	8005b00 <_dtoa_r+0x9a8>
 80059ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059f2:	e75d      	b.n	80058b0 <_dtoa_r+0x758>
 80059f4:	9b01      	ldr	r3, [sp, #4]
 80059f6:	1e5e      	subs	r6, r3, #1
 80059f8:	9b06      	ldr	r3, [sp, #24]
 80059fa:	42b3      	cmp	r3, r6
 80059fc:	bfbf      	itttt	lt
 80059fe:	9b06      	ldrlt	r3, [sp, #24]
 8005a00:	9606      	strlt	r6, [sp, #24]
 8005a02:	1af2      	sublt	r2, r6, r3
 8005a04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005a06:	bfb6      	itet	lt
 8005a08:	189b      	addlt	r3, r3, r2
 8005a0a:	1b9e      	subge	r6, r3, r6
 8005a0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	bfb8      	it	lt
 8005a12:	2600      	movlt	r6, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfb5      	itete	lt
 8005a18:	eba8 0503 	sublt.w	r5, r8, r3
 8005a1c:	9b01      	ldrge	r3, [sp, #4]
 8005a1e:	2300      	movlt	r3, #0
 8005a20:	4645      	movge	r5, r8
 8005a22:	e747      	b.n	80058b4 <_dtoa_r+0x75c>
 8005a24:	9e06      	ldr	r6, [sp, #24]
 8005a26:	9f08      	ldr	r7, [sp, #32]
 8005a28:	4645      	mov	r5, r8
 8005a2a:	e74c      	b.n	80058c6 <_dtoa_r+0x76e>
 8005a2c:	9a06      	ldr	r2, [sp, #24]
 8005a2e:	e775      	b.n	800591c <_dtoa_r+0x7c4>
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	dc18      	bgt.n	8005a68 <_dtoa_r+0x910>
 8005a36:	9b02      	ldr	r3, [sp, #8]
 8005a38:	b9b3      	cbnz	r3, 8005a68 <_dtoa_r+0x910>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a40:	b9a3      	cbnz	r3, 8005a6c <_dtoa_r+0x914>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	0d1b      	lsrs	r3, r3, #20
 8005a4a:	051b      	lsls	r3, r3, #20
 8005a4c:	b12b      	cbz	r3, 8005a5a <_dtoa_r+0x902>
 8005a4e:	9b04      	ldr	r3, [sp, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	f108 0801 	add.w	r8, r8, #1
 8005a58:	2301      	movs	r3, #1
 8005a5a:	9306      	str	r3, [sp, #24]
 8005a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f47f af74 	bne.w	800594c <_dtoa_r+0x7f4>
 8005a64:	2001      	movs	r0, #1
 8005a66:	e779      	b.n	800595c <_dtoa_r+0x804>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e7f6      	b.n	8005a5a <_dtoa_r+0x902>
 8005a6c:	9b02      	ldr	r3, [sp, #8]
 8005a6e:	e7f4      	b.n	8005a5a <_dtoa_r+0x902>
 8005a70:	d085      	beq.n	800597e <_dtoa_r+0x826>
 8005a72:	4618      	mov	r0, r3
 8005a74:	301c      	adds	r0, #28
 8005a76:	e77d      	b.n	8005974 <_dtoa_r+0x81c>
 8005a78:	40240000 	.word	0x40240000
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dc38      	bgt.n	8005af4 <_dtoa_r+0x99c>
 8005a82:	9b05      	ldr	r3, [sp, #20]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	dd35      	ble.n	8005af4 <_dtoa_r+0x99c>
 8005a88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a8c:	f1b9 0f00 	cmp.w	r9, #0
 8005a90:	d10d      	bne.n	8005aae <_dtoa_r+0x956>
 8005a92:	4631      	mov	r1, r6
 8005a94:	464b      	mov	r3, r9
 8005a96:	2205      	movs	r2, #5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fd59 	bl	8006550 <__multadd>
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	4658      	mov	r0, fp
 8005aa4:	f000 ffba 	bl	8006a1c <__mcmp>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f73f adbd 	bgt.w	8005628 <_dtoa_r+0x4d0>
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	9d00      	ldr	r5, [sp, #0]
 8005ab2:	ea6f 0a03 	mvn.w	sl, r3
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	4631      	mov	r1, r6
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 fd25 	bl	800650c <_Bfree>
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	f43f aeb4 	beq.w	8005830 <_dtoa_r+0x6d8>
 8005ac8:	f1b8 0f00 	cmp.w	r8, #0
 8005acc:	d005      	beq.n	8005ada <_dtoa_r+0x982>
 8005ace:	45b8      	cmp	r8, r7
 8005ad0:	d003      	beq.n	8005ada <_dtoa_r+0x982>
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fd19 	bl	800650c <_Bfree>
 8005ada:	4639      	mov	r1, r7
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fd15 	bl	800650c <_Bfree>
 8005ae2:	e6a5      	b.n	8005830 <_dtoa_r+0x6d8>
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	4637      	mov	r7, r6
 8005ae8:	e7e1      	b.n	8005aae <_dtoa_r+0x956>
 8005aea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005aec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005af0:	4637      	mov	r7, r6
 8005af2:	e599      	b.n	8005628 <_dtoa_r+0x4d0>
 8005af4:	9b08      	ldr	r3, [sp, #32]
 8005af6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80fd 	beq.w	8005cfa <_dtoa_r+0xba2>
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	dd05      	ble.n	8005b10 <_dtoa_r+0x9b8>
 8005b04:	4639      	mov	r1, r7
 8005b06:	462a      	mov	r2, r5
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 ff1b 	bl	8006944 <__lshift>
 8005b0e:	4607      	mov	r7, r0
 8005b10:	9b06      	ldr	r3, [sp, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d05c      	beq.n	8005bd0 <_dtoa_r+0xa78>
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fcb7 	bl	800648c <_Balloc>
 8005b1e:	4605      	mov	r5, r0
 8005b20:	b928      	cbnz	r0, 8005b2e <_dtoa_r+0x9d6>
 8005b22:	4b80      	ldr	r3, [pc, #512]	; (8005d24 <_dtoa_r+0xbcc>)
 8005b24:	4602      	mov	r2, r0
 8005b26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b2a:	f7ff bb2e 	b.w	800518a <_dtoa_r+0x32>
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	3202      	adds	r2, #2
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	f107 010c 	add.w	r1, r7, #12
 8005b38:	300c      	adds	r0, #12
 8005b3a:	f000 fc99 	bl	8006470 <memcpy>
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4629      	mov	r1, r5
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fefe 	bl	8006944 <__lshift>
 8005b48:	9b00      	ldr	r3, [sp, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	9b00      	ldr	r3, [sp, #0]
 8005b50:	444b      	add	r3, r9
 8005b52:	9307      	str	r3, [sp, #28]
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	46b8      	mov	r8, r7
 8005b5c:	9306      	str	r3, [sp, #24]
 8005b5e:	4607      	mov	r7, r0
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	4631      	mov	r1, r6
 8005b64:	3b01      	subs	r3, #1
 8005b66:	4658      	mov	r0, fp
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	f7ff fa69 	bl	8005040 <quorem>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	3330      	adds	r3, #48	; 0x30
 8005b72:	9004      	str	r0, [sp, #16]
 8005b74:	4641      	mov	r1, r8
 8005b76:	4658      	mov	r0, fp
 8005b78:	9308      	str	r3, [sp, #32]
 8005b7a:	f000 ff4f 	bl	8006a1c <__mcmp>
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4681      	mov	r9, r0
 8005b82:	4631      	mov	r1, r6
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 ff65 	bl	8006a54 <__mdiff>
 8005b8a:	68c2      	ldr	r2, [r0, #12]
 8005b8c:	9b08      	ldr	r3, [sp, #32]
 8005b8e:	4605      	mov	r5, r0
 8005b90:	bb02      	cbnz	r2, 8005bd4 <_dtoa_r+0xa7c>
 8005b92:	4601      	mov	r1, r0
 8005b94:	4658      	mov	r0, fp
 8005b96:	f000 ff41 	bl	8006a1c <__mcmp>
 8005b9a:	9b08      	ldr	r3, [sp, #32]
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005ba6:	f000 fcb1 	bl	800650c <_Bfree>
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bae:	9d01      	ldr	r5, [sp, #4]
 8005bb0:	ea43 0102 	orr.w	r1, r3, r2
 8005bb4:	9b06      	ldr	r3, [sp, #24]
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	9b08      	ldr	r3, [sp, #32]
 8005bba:	d10d      	bne.n	8005bd8 <_dtoa_r+0xa80>
 8005bbc:	2b39      	cmp	r3, #57	; 0x39
 8005bbe:	d029      	beq.n	8005c14 <_dtoa_r+0xabc>
 8005bc0:	f1b9 0f00 	cmp.w	r9, #0
 8005bc4:	dd01      	ble.n	8005bca <_dtoa_r+0xa72>
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	3331      	adds	r3, #49	; 0x31
 8005bca:	9a02      	ldr	r2, [sp, #8]
 8005bcc:	7013      	strb	r3, [r2, #0]
 8005bce:	e774      	b.n	8005aba <_dtoa_r+0x962>
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	e7b9      	b.n	8005b48 <_dtoa_r+0x9f0>
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	e7e2      	b.n	8005b9e <_dtoa_r+0xa46>
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	db06      	blt.n	8005bec <_dtoa_r+0xa94>
 8005bde:	9905      	ldr	r1, [sp, #20]
 8005be0:	ea41 0909 	orr.w	r9, r1, r9
 8005be4:	9906      	ldr	r1, [sp, #24]
 8005be6:	ea59 0101 	orrs.w	r1, r9, r1
 8005bea:	d120      	bne.n	8005c2e <_dtoa_r+0xad6>
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	ddec      	ble.n	8005bca <_dtoa_r+0xa72>
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	f000 fea4 	bl	8006944 <__lshift>
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4683      	mov	fp, r0
 8005c00:	f000 ff0c 	bl	8006a1c <__mcmp>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	dc02      	bgt.n	8005c10 <_dtoa_r+0xab8>
 8005c0a:	d1de      	bne.n	8005bca <_dtoa_r+0xa72>
 8005c0c:	07da      	lsls	r2, r3, #31
 8005c0e:	d5dc      	bpl.n	8005bca <_dtoa_r+0xa72>
 8005c10:	2b39      	cmp	r3, #57	; 0x39
 8005c12:	d1d8      	bne.n	8005bc6 <_dtoa_r+0xa6e>
 8005c14:	9a02      	ldr	r2, [sp, #8]
 8005c16:	2339      	movs	r3, #57	; 0x39
 8005c18:	7013      	strb	r3, [r2, #0]
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c24:	2a39      	cmp	r2, #57	; 0x39
 8005c26:	d050      	beq.n	8005cca <_dtoa_r+0xb72>
 8005c28:	3201      	adds	r2, #1
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e745      	b.n	8005aba <_dtoa_r+0x962>
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	dd03      	ble.n	8005c3a <_dtoa_r+0xae2>
 8005c32:	2b39      	cmp	r3, #57	; 0x39
 8005c34:	d0ee      	beq.n	8005c14 <_dtoa_r+0xabc>
 8005c36:	3301      	adds	r3, #1
 8005c38:	e7c7      	b.n	8005bca <_dtoa_r+0xa72>
 8005c3a:	9a01      	ldr	r2, [sp, #4]
 8005c3c:	9907      	ldr	r1, [sp, #28]
 8005c3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c42:	428a      	cmp	r2, r1
 8005c44:	d02a      	beq.n	8005c9c <_dtoa_r+0xb44>
 8005c46:	4659      	mov	r1, fp
 8005c48:	2300      	movs	r3, #0
 8005c4a:	220a      	movs	r2, #10
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 fc7f 	bl	8006550 <__multadd>
 8005c52:	45b8      	cmp	r8, r7
 8005c54:	4683      	mov	fp, r0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	f04f 020a 	mov.w	r2, #10
 8005c5e:	4641      	mov	r1, r8
 8005c60:	4620      	mov	r0, r4
 8005c62:	d107      	bne.n	8005c74 <_dtoa_r+0xb1c>
 8005c64:	f000 fc74 	bl	8006550 <__multadd>
 8005c68:	4680      	mov	r8, r0
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	e775      	b.n	8005b60 <_dtoa_r+0xa08>
 8005c74:	f000 fc6c 	bl	8006550 <__multadd>
 8005c78:	4639      	mov	r1, r7
 8005c7a:	4680      	mov	r8, r0
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	220a      	movs	r2, #10
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fc65 	bl	8006550 <__multadd>
 8005c86:	4607      	mov	r7, r0
 8005c88:	e7f0      	b.n	8005c6c <_dtoa_r+0xb14>
 8005c8a:	f1b9 0f00 	cmp.w	r9, #0
 8005c8e:	9a00      	ldr	r2, [sp, #0]
 8005c90:	bfcc      	ite	gt
 8005c92:	464d      	movgt	r5, r9
 8005c94:	2501      	movle	r5, #1
 8005c96:	4415      	add	r5, r2
 8005c98:	f04f 0800 	mov.w	r8, #0
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	f000 fe4e 	bl	8006944 <__lshift>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4683      	mov	fp, r0
 8005cac:	f000 feb6 	bl	8006a1c <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dcb2      	bgt.n	8005c1a <_dtoa_r+0xac2>
 8005cb4:	d102      	bne.n	8005cbc <_dtoa_r+0xb64>
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	07db      	lsls	r3, r3, #31
 8005cba:	d4ae      	bmi.n	8005c1a <_dtoa_r+0xac2>
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	461d      	mov	r5, r3
 8005cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc4:	2a30      	cmp	r2, #48	; 0x30
 8005cc6:	d0fa      	beq.n	8005cbe <_dtoa_r+0xb66>
 8005cc8:	e6f7      	b.n	8005aba <_dtoa_r+0x962>
 8005cca:	9a00      	ldr	r2, [sp, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1a5      	bne.n	8005c1c <_dtoa_r+0xac4>
 8005cd0:	f10a 0a01 	add.w	sl, sl, #1
 8005cd4:	2331      	movs	r3, #49	; 0x31
 8005cd6:	e779      	b.n	8005bcc <_dtoa_r+0xa74>
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <_dtoa_r+0xbd0>)
 8005cda:	f7ff baaf 	b.w	800523c <_dtoa_r+0xe4>
 8005cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f47f aa86 	bne.w	80051f2 <_dtoa_r+0x9a>
 8005ce6:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <_dtoa_r+0xbd4>)
 8005ce8:	f7ff baa8 	b.w	800523c <_dtoa_r+0xe4>
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	dc03      	bgt.n	8005cfa <_dtoa_r+0xba2>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	f73f aec9 	bgt.w	8005a8c <_dtoa_r+0x934>
 8005cfa:	9d00      	ldr	r5, [sp, #0]
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4658      	mov	r0, fp
 8005d00:	f7ff f99e 	bl	8005040 <quorem>
 8005d04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d08:	f805 3b01 	strb.w	r3, [r5], #1
 8005d0c:	9a00      	ldr	r2, [sp, #0]
 8005d0e:	1aaa      	subs	r2, r5, r2
 8005d10:	4591      	cmp	r9, r2
 8005d12:	ddba      	ble.n	8005c8a <_dtoa_r+0xb32>
 8005d14:	4659      	mov	r1, fp
 8005d16:	2300      	movs	r3, #0
 8005d18:	220a      	movs	r2, #10
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 fc18 	bl	8006550 <__multadd>
 8005d20:	4683      	mov	fp, r0
 8005d22:	e7eb      	b.n	8005cfc <_dtoa_r+0xba4>
 8005d24:	08008894 	.word	0x08008894
 8005d28:	08008a99 	.word	0x08008a99
 8005d2c:	08008811 	.word	0x08008811

08005d30 <rshift>:
 8005d30:	6903      	ldr	r3, [r0, #16]
 8005d32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005d3e:	f100 0414 	add.w	r4, r0, #20
 8005d42:	dd45      	ble.n	8005dd0 <rshift+0xa0>
 8005d44:	f011 011f 	ands.w	r1, r1, #31
 8005d48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005d4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005d50:	d10c      	bne.n	8005d6c <rshift+0x3c>
 8005d52:	f100 0710 	add.w	r7, r0, #16
 8005d56:	4629      	mov	r1, r5
 8005d58:	42b1      	cmp	r1, r6
 8005d5a:	d334      	bcc.n	8005dc6 <rshift+0x96>
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	1eea      	subs	r2, r5, #3
 8005d62:	4296      	cmp	r6, r2
 8005d64:	bf38      	it	cc
 8005d66:	2300      	movcc	r3, #0
 8005d68:	4423      	add	r3, r4
 8005d6a:	e015      	b.n	8005d98 <rshift+0x68>
 8005d6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005d70:	f1c1 0820 	rsb	r8, r1, #32
 8005d74:	40cf      	lsrs	r7, r1
 8005d76:	f105 0e04 	add.w	lr, r5, #4
 8005d7a:	46a1      	mov	r9, r4
 8005d7c:	4576      	cmp	r6, lr
 8005d7e:	46f4      	mov	ip, lr
 8005d80:	d815      	bhi.n	8005dae <rshift+0x7e>
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	009a      	lsls	r2, r3, #2
 8005d86:	3a04      	subs	r2, #4
 8005d88:	3501      	adds	r5, #1
 8005d8a:	42ae      	cmp	r6, r5
 8005d8c:	bf38      	it	cc
 8005d8e:	2200      	movcc	r2, #0
 8005d90:	18a3      	adds	r3, r4, r2
 8005d92:	50a7      	str	r7, [r4, r2]
 8005d94:	b107      	cbz	r7, 8005d98 <rshift+0x68>
 8005d96:	3304      	adds	r3, #4
 8005d98:	1b1a      	subs	r2, r3, r4
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005da0:	bf08      	it	eq
 8005da2:	2300      	moveq	r3, #0
 8005da4:	6102      	str	r2, [r0, #16]
 8005da6:	bf08      	it	eq
 8005da8:	6143      	streq	r3, [r0, #20]
 8005daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dae:	f8dc c000 	ldr.w	ip, [ip]
 8005db2:	fa0c fc08 	lsl.w	ip, ip, r8
 8005db6:	ea4c 0707 	orr.w	r7, ip, r7
 8005dba:	f849 7b04 	str.w	r7, [r9], #4
 8005dbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dc2:	40cf      	lsrs	r7, r1
 8005dc4:	e7da      	b.n	8005d7c <rshift+0x4c>
 8005dc6:	f851 cb04 	ldr.w	ip, [r1], #4
 8005dca:	f847 cf04 	str.w	ip, [r7, #4]!
 8005dce:	e7c3      	b.n	8005d58 <rshift+0x28>
 8005dd0:	4623      	mov	r3, r4
 8005dd2:	e7e1      	b.n	8005d98 <rshift+0x68>

08005dd4 <__hexdig_fun>:
 8005dd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	d802      	bhi.n	8005de2 <__hexdig_fun+0xe>
 8005ddc:	3820      	subs	r0, #32
 8005dde:	b2c0      	uxtb	r0, r0
 8005de0:	4770      	bx	lr
 8005de2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d801      	bhi.n	8005dee <__hexdig_fun+0x1a>
 8005dea:	3847      	subs	r0, #71	; 0x47
 8005dec:	e7f7      	b.n	8005dde <__hexdig_fun+0xa>
 8005dee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d801      	bhi.n	8005dfa <__hexdig_fun+0x26>
 8005df6:	3827      	subs	r0, #39	; 0x27
 8005df8:	e7f1      	b.n	8005dde <__hexdig_fun+0xa>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	4770      	bx	lr
	...

08005e00 <__gethex>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	ed2d 8b02 	vpush	{d8}
 8005e08:	b089      	sub	sp, #36	; 0x24
 8005e0a:	ee08 0a10 	vmov	s16, r0
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	4bbc      	ldr	r3, [pc, #752]	; (8006104 <__gethex+0x304>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	4618      	mov	r0, r3
 8005e18:	468b      	mov	fp, r1
 8005e1a:	4690      	mov	r8, r2
 8005e1c:	f7fa f9e8 	bl	80001f0 <strlen>
 8005e20:	9b01      	ldr	r3, [sp, #4]
 8005e22:	f8db 2000 	ldr.w	r2, [fp]
 8005e26:	4403      	add	r3, r0
 8005e28:	4682      	mov	sl, r0
 8005e2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005e2e:	9305      	str	r3, [sp, #20]
 8005e30:	1c93      	adds	r3, r2, #2
 8005e32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005e36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005e3a:	32fe      	adds	r2, #254	; 0xfe
 8005e3c:	18d1      	adds	r1, r2, r3
 8005e3e:	461f      	mov	r7, r3
 8005e40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e44:	9100      	str	r1, [sp, #0]
 8005e46:	2830      	cmp	r0, #48	; 0x30
 8005e48:	d0f8      	beq.n	8005e3c <__gethex+0x3c>
 8005e4a:	f7ff ffc3 	bl	8005dd4 <__hexdig_fun>
 8005e4e:	4604      	mov	r4, r0
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d13a      	bne.n	8005eca <__gethex+0xca>
 8005e54:	9901      	ldr	r1, [sp, #4]
 8005e56:	4652      	mov	r2, sl
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f001 fd6b 	bl	8007934 <strncmp>
 8005e5e:	4605      	mov	r5, r0
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d168      	bne.n	8005f36 <__gethex+0x136>
 8005e64:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005e68:	eb07 060a 	add.w	r6, r7, sl
 8005e6c:	f7ff ffb2 	bl	8005dd4 <__hexdig_fun>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d062      	beq.n	8005f3a <__gethex+0x13a>
 8005e74:	4633      	mov	r3, r6
 8005e76:	7818      	ldrb	r0, [r3, #0]
 8005e78:	2830      	cmp	r0, #48	; 0x30
 8005e7a:	461f      	mov	r7, r3
 8005e7c:	f103 0301 	add.w	r3, r3, #1
 8005e80:	d0f9      	beq.n	8005e76 <__gethex+0x76>
 8005e82:	f7ff ffa7 	bl	8005dd4 <__hexdig_fun>
 8005e86:	2301      	movs	r3, #1
 8005e88:	fab0 f480 	clz	r4, r0
 8005e8c:	0964      	lsrs	r4, r4, #5
 8005e8e:	4635      	mov	r5, r6
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	463a      	mov	r2, r7
 8005e94:	4616      	mov	r6, r2
 8005e96:	3201      	adds	r2, #1
 8005e98:	7830      	ldrb	r0, [r6, #0]
 8005e9a:	f7ff ff9b 	bl	8005dd4 <__hexdig_fun>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d1f8      	bne.n	8005e94 <__gethex+0x94>
 8005ea2:	9901      	ldr	r1, [sp, #4]
 8005ea4:	4652      	mov	r2, sl
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f001 fd44 	bl	8007934 <strncmp>
 8005eac:	b980      	cbnz	r0, 8005ed0 <__gethex+0xd0>
 8005eae:	b94d      	cbnz	r5, 8005ec4 <__gethex+0xc4>
 8005eb0:	eb06 050a 	add.w	r5, r6, sl
 8005eb4:	462a      	mov	r2, r5
 8005eb6:	4616      	mov	r6, r2
 8005eb8:	3201      	adds	r2, #1
 8005eba:	7830      	ldrb	r0, [r6, #0]
 8005ebc:	f7ff ff8a 	bl	8005dd4 <__hexdig_fun>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d1f8      	bne.n	8005eb6 <__gethex+0xb6>
 8005ec4:	1bad      	subs	r5, r5, r6
 8005ec6:	00ad      	lsls	r5, r5, #2
 8005ec8:	e004      	b.n	8005ed4 <__gethex+0xd4>
 8005eca:	2400      	movs	r4, #0
 8005ecc:	4625      	mov	r5, r4
 8005ece:	e7e0      	b.n	8005e92 <__gethex+0x92>
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	d1f7      	bne.n	8005ec4 <__gethex+0xc4>
 8005ed4:	7833      	ldrb	r3, [r6, #0]
 8005ed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005eda:	2b50      	cmp	r3, #80	; 0x50
 8005edc:	d13b      	bne.n	8005f56 <__gethex+0x156>
 8005ede:	7873      	ldrb	r3, [r6, #1]
 8005ee0:	2b2b      	cmp	r3, #43	; 0x2b
 8005ee2:	d02c      	beq.n	8005f3e <__gethex+0x13e>
 8005ee4:	2b2d      	cmp	r3, #45	; 0x2d
 8005ee6:	d02e      	beq.n	8005f46 <__gethex+0x146>
 8005ee8:	1c71      	adds	r1, r6, #1
 8005eea:	f04f 0900 	mov.w	r9, #0
 8005eee:	7808      	ldrb	r0, [r1, #0]
 8005ef0:	f7ff ff70 	bl	8005dd4 <__hexdig_fun>
 8005ef4:	1e43      	subs	r3, r0, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b18      	cmp	r3, #24
 8005efa:	d82c      	bhi.n	8005f56 <__gethex+0x156>
 8005efc:	f1a0 0210 	sub.w	r2, r0, #16
 8005f00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005f04:	f7ff ff66 	bl	8005dd4 <__hexdig_fun>
 8005f08:	1e43      	subs	r3, r0, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b18      	cmp	r3, #24
 8005f0e:	d91d      	bls.n	8005f4c <__gethex+0x14c>
 8005f10:	f1b9 0f00 	cmp.w	r9, #0
 8005f14:	d000      	beq.n	8005f18 <__gethex+0x118>
 8005f16:	4252      	negs	r2, r2
 8005f18:	4415      	add	r5, r2
 8005f1a:	f8cb 1000 	str.w	r1, [fp]
 8005f1e:	b1e4      	cbz	r4, 8005f5a <__gethex+0x15a>
 8005f20:	9b00      	ldr	r3, [sp, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bf14      	ite	ne
 8005f26:	2700      	movne	r7, #0
 8005f28:	2706      	moveq	r7, #6
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	b009      	add	sp, #36	; 0x24
 8005f2e:	ecbd 8b02 	vpop	{d8}
 8005f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f36:	463e      	mov	r6, r7
 8005f38:	4625      	mov	r5, r4
 8005f3a:	2401      	movs	r4, #1
 8005f3c:	e7ca      	b.n	8005ed4 <__gethex+0xd4>
 8005f3e:	f04f 0900 	mov.w	r9, #0
 8005f42:	1cb1      	adds	r1, r6, #2
 8005f44:	e7d3      	b.n	8005eee <__gethex+0xee>
 8005f46:	f04f 0901 	mov.w	r9, #1
 8005f4a:	e7fa      	b.n	8005f42 <__gethex+0x142>
 8005f4c:	230a      	movs	r3, #10
 8005f4e:	fb03 0202 	mla	r2, r3, r2, r0
 8005f52:	3a10      	subs	r2, #16
 8005f54:	e7d4      	b.n	8005f00 <__gethex+0x100>
 8005f56:	4631      	mov	r1, r6
 8005f58:	e7df      	b.n	8005f1a <__gethex+0x11a>
 8005f5a:	1bf3      	subs	r3, r6, r7
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4621      	mov	r1, r4
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	dc0b      	bgt.n	8005f7c <__gethex+0x17c>
 8005f64:	ee18 0a10 	vmov	r0, s16
 8005f68:	f000 fa90 	bl	800648c <_Balloc>
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	b940      	cbnz	r0, 8005f82 <__gethex+0x182>
 8005f70:	4b65      	ldr	r3, [pc, #404]	; (8006108 <__gethex+0x308>)
 8005f72:	4602      	mov	r2, r0
 8005f74:	21de      	movs	r1, #222	; 0xde
 8005f76:	4865      	ldr	r0, [pc, #404]	; (800610c <__gethex+0x30c>)
 8005f78:	f001 fdb4 	bl	8007ae4 <__assert_func>
 8005f7c:	3101      	adds	r1, #1
 8005f7e:	105b      	asrs	r3, r3, #1
 8005f80:	e7ee      	b.n	8005f60 <__gethex+0x160>
 8005f82:	f100 0914 	add.w	r9, r0, #20
 8005f86:	f04f 0b00 	mov.w	fp, #0
 8005f8a:	f1ca 0301 	rsb	r3, sl, #1
 8005f8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005f92:	f8cd b000 	str.w	fp, [sp]
 8005f96:	9306      	str	r3, [sp, #24]
 8005f98:	42b7      	cmp	r7, r6
 8005f9a:	d340      	bcc.n	800601e <__gethex+0x21e>
 8005f9c:	9802      	ldr	r0, [sp, #8]
 8005f9e:	9b00      	ldr	r3, [sp, #0]
 8005fa0:	f840 3b04 	str.w	r3, [r0], #4
 8005fa4:	eba0 0009 	sub.w	r0, r0, r9
 8005fa8:	1080      	asrs	r0, r0, #2
 8005faa:	0146      	lsls	r6, r0, #5
 8005fac:	6120      	str	r0, [r4, #16]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fb62 	bl	8006678 <__hi0bits>
 8005fb4:	1a30      	subs	r0, r6, r0
 8005fb6:	f8d8 6000 	ldr.w	r6, [r8]
 8005fba:	42b0      	cmp	r0, r6
 8005fbc:	dd63      	ble.n	8006086 <__gethex+0x286>
 8005fbe:	1b87      	subs	r7, r0, r6
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fefc 	bl	8006dc0 <__any_on>
 8005fc8:	4682      	mov	sl, r0
 8005fca:	b1a8      	cbz	r0, 8005ff8 <__gethex+0x1f8>
 8005fcc:	1e7b      	subs	r3, r7, #1
 8005fce:	1159      	asrs	r1, r3, #5
 8005fd0:	f003 021f 	and.w	r2, r3, #31
 8005fd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005fd8:	f04f 0a01 	mov.w	sl, #1
 8005fdc:	fa0a f202 	lsl.w	r2, sl, r2
 8005fe0:	420a      	tst	r2, r1
 8005fe2:	d009      	beq.n	8005ff8 <__gethex+0x1f8>
 8005fe4:	4553      	cmp	r3, sl
 8005fe6:	dd05      	ble.n	8005ff4 <__gethex+0x1f4>
 8005fe8:	1eb9      	subs	r1, r7, #2
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fee8 	bl	8006dc0 <__any_on>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d145      	bne.n	8006080 <__gethex+0x280>
 8005ff4:	f04f 0a02 	mov.w	sl, #2
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff fe98 	bl	8005d30 <rshift>
 8006000:	443d      	add	r5, r7
 8006002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006006:	42ab      	cmp	r3, r5
 8006008:	da4c      	bge.n	80060a4 <__gethex+0x2a4>
 800600a:	ee18 0a10 	vmov	r0, s16
 800600e:	4621      	mov	r1, r4
 8006010:	f000 fa7c 	bl	800650c <_Bfree>
 8006014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006016:	2300      	movs	r3, #0
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	27a3      	movs	r7, #163	; 0xa3
 800601c:	e785      	b.n	8005f2a <__gethex+0x12a>
 800601e:	1e73      	subs	r3, r6, #1
 8006020:	9a05      	ldr	r2, [sp, #20]
 8006022:	9303      	str	r3, [sp, #12]
 8006024:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006028:	4293      	cmp	r3, r2
 800602a:	d019      	beq.n	8006060 <__gethex+0x260>
 800602c:	f1bb 0f20 	cmp.w	fp, #32
 8006030:	d107      	bne.n	8006042 <__gethex+0x242>
 8006032:	9b02      	ldr	r3, [sp, #8]
 8006034:	9a00      	ldr	r2, [sp, #0]
 8006036:	f843 2b04 	str.w	r2, [r3], #4
 800603a:	9302      	str	r3, [sp, #8]
 800603c:	2300      	movs	r3, #0
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	469b      	mov	fp, r3
 8006042:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006046:	f7ff fec5 	bl	8005dd4 <__hexdig_fun>
 800604a:	9b00      	ldr	r3, [sp, #0]
 800604c:	f000 000f 	and.w	r0, r0, #15
 8006050:	fa00 f00b 	lsl.w	r0, r0, fp
 8006054:	4303      	orrs	r3, r0
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	f10b 0b04 	add.w	fp, fp, #4
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	e00d      	b.n	800607c <__gethex+0x27c>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	9a06      	ldr	r2, [sp, #24]
 8006064:	4413      	add	r3, r2
 8006066:	42bb      	cmp	r3, r7
 8006068:	d3e0      	bcc.n	800602c <__gethex+0x22c>
 800606a:	4618      	mov	r0, r3
 800606c:	9901      	ldr	r1, [sp, #4]
 800606e:	9307      	str	r3, [sp, #28]
 8006070:	4652      	mov	r2, sl
 8006072:	f001 fc5f 	bl	8007934 <strncmp>
 8006076:	9b07      	ldr	r3, [sp, #28]
 8006078:	2800      	cmp	r0, #0
 800607a:	d1d7      	bne.n	800602c <__gethex+0x22c>
 800607c:	461e      	mov	r6, r3
 800607e:	e78b      	b.n	8005f98 <__gethex+0x198>
 8006080:	f04f 0a03 	mov.w	sl, #3
 8006084:	e7b8      	b.n	8005ff8 <__gethex+0x1f8>
 8006086:	da0a      	bge.n	800609e <__gethex+0x29e>
 8006088:	1a37      	subs	r7, r6, r0
 800608a:	4621      	mov	r1, r4
 800608c:	ee18 0a10 	vmov	r0, s16
 8006090:	463a      	mov	r2, r7
 8006092:	f000 fc57 	bl	8006944 <__lshift>
 8006096:	1bed      	subs	r5, r5, r7
 8006098:	4604      	mov	r4, r0
 800609a:	f100 0914 	add.w	r9, r0, #20
 800609e:	f04f 0a00 	mov.w	sl, #0
 80060a2:	e7ae      	b.n	8006002 <__gethex+0x202>
 80060a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80060a8:	42a8      	cmp	r0, r5
 80060aa:	dd72      	ble.n	8006192 <__gethex+0x392>
 80060ac:	1b45      	subs	r5, r0, r5
 80060ae:	42ae      	cmp	r6, r5
 80060b0:	dc36      	bgt.n	8006120 <__gethex+0x320>
 80060b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d02a      	beq.n	8006110 <__gethex+0x310>
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d02c      	beq.n	8006118 <__gethex+0x318>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d115      	bne.n	80060ee <__gethex+0x2ee>
 80060c2:	42ae      	cmp	r6, r5
 80060c4:	d113      	bne.n	80060ee <__gethex+0x2ee>
 80060c6:	2e01      	cmp	r6, #1
 80060c8:	d10b      	bne.n	80060e2 <__gethex+0x2e2>
 80060ca:	9a04      	ldr	r2, [sp, #16]
 80060cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	2301      	movs	r3, #1
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	f8c9 3000 	str.w	r3, [r9]
 80060da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060dc:	2762      	movs	r7, #98	; 0x62
 80060de:	601c      	str	r4, [r3, #0]
 80060e0:	e723      	b.n	8005f2a <__gethex+0x12a>
 80060e2:	1e71      	subs	r1, r6, #1
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 fe6b 	bl	8006dc0 <__any_on>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d1ed      	bne.n	80060ca <__gethex+0x2ca>
 80060ee:	ee18 0a10 	vmov	r0, s16
 80060f2:	4621      	mov	r1, r4
 80060f4:	f000 fa0a 	bl	800650c <_Bfree>
 80060f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060fa:	2300      	movs	r3, #0
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	2750      	movs	r7, #80	; 0x50
 8006100:	e713      	b.n	8005f2a <__gethex+0x12a>
 8006102:	bf00      	nop
 8006104:	08008910 	.word	0x08008910
 8006108:	08008894 	.word	0x08008894
 800610c:	080088a5 	.word	0x080088a5
 8006110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1eb      	bne.n	80060ee <__gethex+0x2ee>
 8006116:	e7d8      	b.n	80060ca <__gethex+0x2ca>
 8006118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1d5      	bne.n	80060ca <__gethex+0x2ca>
 800611e:	e7e6      	b.n	80060ee <__gethex+0x2ee>
 8006120:	1e6f      	subs	r7, r5, #1
 8006122:	f1ba 0f00 	cmp.w	sl, #0
 8006126:	d131      	bne.n	800618c <__gethex+0x38c>
 8006128:	b127      	cbz	r7, 8006134 <__gethex+0x334>
 800612a:	4639      	mov	r1, r7
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fe47 	bl	8006dc0 <__any_on>
 8006132:	4682      	mov	sl, r0
 8006134:	117b      	asrs	r3, r7, #5
 8006136:	2101      	movs	r1, #1
 8006138:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800613c:	f007 071f 	and.w	r7, r7, #31
 8006140:	fa01 f707 	lsl.w	r7, r1, r7
 8006144:	421f      	tst	r7, r3
 8006146:	4629      	mov	r1, r5
 8006148:	4620      	mov	r0, r4
 800614a:	bf18      	it	ne
 800614c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006150:	1b76      	subs	r6, r6, r5
 8006152:	f7ff fded 	bl	8005d30 <rshift>
 8006156:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800615a:	2702      	movs	r7, #2
 800615c:	f1ba 0f00 	cmp.w	sl, #0
 8006160:	d048      	beq.n	80061f4 <__gethex+0x3f4>
 8006162:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d015      	beq.n	8006196 <__gethex+0x396>
 800616a:	2b03      	cmp	r3, #3
 800616c:	d017      	beq.n	800619e <__gethex+0x39e>
 800616e:	2b01      	cmp	r3, #1
 8006170:	d109      	bne.n	8006186 <__gethex+0x386>
 8006172:	f01a 0f02 	tst.w	sl, #2
 8006176:	d006      	beq.n	8006186 <__gethex+0x386>
 8006178:	f8d9 0000 	ldr.w	r0, [r9]
 800617c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006180:	f01a 0f01 	tst.w	sl, #1
 8006184:	d10e      	bne.n	80061a4 <__gethex+0x3a4>
 8006186:	f047 0710 	orr.w	r7, r7, #16
 800618a:	e033      	b.n	80061f4 <__gethex+0x3f4>
 800618c:	f04f 0a01 	mov.w	sl, #1
 8006190:	e7d0      	b.n	8006134 <__gethex+0x334>
 8006192:	2701      	movs	r7, #1
 8006194:	e7e2      	b.n	800615c <__gethex+0x35c>
 8006196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006198:	f1c3 0301 	rsb	r3, r3, #1
 800619c:	9315      	str	r3, [sp, #84]	; 0x54
 800619e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0f0      	beq.n	8006186 <__gethex+0x386>
 80061a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80061a8:	f104 0314 	add.w	r3, r4, #20
 80061ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80061b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80061b4:	f04f 0c00 	mov.w	ip, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80061be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80061c2:	d01c      	beq.n	80061fe <__gethex+0x3fe>
 80061c4:	3201      	adds	r2, #1
 80061c6:	6002      	str	r2, [r0, #0]
 80061c8:	2f02      	cmp	r7, #2
 80061ca:	f104 0314 	add.w	r3, r4, #20
 80061ce:	d13f      	bne.n	8006250 <__gethex+0x450>
 80061d0:	f8d8 2000 	ldr.w	r2, [r8]
 80061d4:	3a01      	subs	r2, #1
 80061d6:	42b2      	cmp	r2, r6
 80061d8:	d10a      	bne.n	80061f0 <__gethex+0x3f0>
 80061da:	1171      	asrs	r1, r6, #5
 80061dc:	2201      	movs	r2, #1
 80061de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061e2:	f006 061f 	and.w	r6, r6, #31
 80061e6:	fa02 f606 	lsl.w	r6, r2, r6
 80061ea:	421e      	tst	r6, r3
 80061ec:	bf18      	it	ne
 80061ee:	4617      	movne	r7, r2
 80061f0:	f047 0720 	orr.w	r7, r7, #32
 80061f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061f6:	601c      	str	r4, [r3, #0]
 80061f8:	9b04      	ldr	r3, [sp, #16]
 80061fa:	601d      	str	r5, [r3, #0]
 80061fc:	e695      	b.n	8005f2a <__gethex+0x12a>
 80061fe:	4299      	cmp	r1, r3
 8006200:	f843 cc04 	str.w	ip, [r3, #-4]
 8006204:	d8d8      	bhi.n	80061b8 <__gethex+0x3b8>
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	459b      	cmp	fp, r3
 800620a:	db19      	blt.n	8006240 <__gethex+0x440>
 800620c:	6861      	ldr	r1, [r4, #4]
 800620e:	ee18 0a10 	vmov	r0, s16
 8006212:	3101      	adds	r1, #1
 8006214:	f000 f93a 	bl	800648c <_Balloc>
 8006218:	4681      	mov	r9, r0
 800621a:	b918      	cbnz	r0, 8006224 <__gethex+0x424>
 800621c:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <__gethex+0x488>)
 800621e:	4602      	mov	r2, r0
 8006220:	2184      	movs	r1, #132	; 0x84
 8006222:	e6a8      	b.n	8005f76 <__gethex+0x176>
 8006224:	6922      	ldr	r2, [r4, #16]
 8006226:	3202      	adds	r2, #2
 8006228:	f104 010c 	add.w	r1, r4, #12
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	300c      	adds	r0, #12
 8006230:	f000 f91e 	bl	8006470 <memcpy>
 8006234:	4621      	mov	r1, r4
 8006236:	ee18 0a10 	vmov	r0, s16
 800623a:	f000 f967 	bl	800650c <_Bfree>
 800623e:	464c      	mov	r4, r9
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006248:	6122      	str	r2, [r4, #16]
 800624a:	2201      	movs	r2, #1
 800624c:	615a      	str	r2, [r3, #20]
 800624e:	e7bb      	b.n	80061c8 <__gethex+0x3c8>
 8006250:	6922      	ldr	r2, [r4, #16]
 8006252:	455a      	cmp	r2, fp
 8006254:	dd0b      	ble.n	800626e <__gethex+0x46e>
 8006256:	2101      	movs	r1, #1
 8006258:	4620      	mov	r0, r4
 800625a:	f7ff fd69 	bl	8005d30 <rshift>
 800625e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006262:	3501      	adds	r5, #1
 8006264:	42ab      	cmp	r3, r5
 8006266:	f6ff aed0 	blt.w	800600a <__gethex+0x20a>
 800626a:	2701      	movs	r7, #1
 800626c:	e7c0      	b.n	80061f0 <__gethex+0x3f0>
 800626e:	f016 061f 	ands.w	r6, r6, #31
 8006272:	d0fa      	beq.n	800626a <__gethex+0x46a>
 8006274:	449a      	add	sl, r3
 8006276:	f1c6 0620 	rsb	r6, r6, #32
 800627a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800627e:	f000 f9fb 	bl	8006678 <__hi0bits>
 8006282:	42b0      	cmp	r0, r6
 8006284:	dbe7      	blt.n	8006256 <__gethex+0x456>
 8006286:	e7f0      	b.n	800626a <__gethex+0x46a>
 8006288:	08008894 	.word	0x08008894

0800628c <L_shift>:
 800628c:	f1c2 0208 	rsb	r2, r2, #8
 8006290:	0092      	lsls	r2, r2, #2
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	f1c2 0620 	rsb	r6, r2, #32
 8006298:	6843      	ldr	r3, [r0, #4]
 800629a:	6804      	ldr	r4, [r0, #0]
 800629c:	fa03 f506 	lsl.w	r5, r3, r6
 80062a0:	432c      	orrs	r4, r5
 80062a2:	40d3      	lsrs	r3, r2
 80062a4:	6004      	str	r4, [r0, #0]
 80062a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80062aa:	4288      	cmp	r0, r1
 80062ac:	d3f4      	bcc.n	8006298 <L_shift+0xc>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}

080062b0 <__match>:
 80062b0:	b530      	push	{r4, r5, lr}
 80062b2:	6803      	ldr	r3, [r0, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ba:	b914      	cbnz	r4, 80062c2 <__match+0x12>
 80062bc:	6003      	str	r3, [r0, #0]
 80062be:	2001      	movs	r0, #1
 80062c0:	bd30      	pop	{r4, r5, pc}
 80062c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80062ca:	2d19      	cmp	r5, #25
 80062cc:	bf98      	it	ls
 80062ce:	3220      	addls	r2, #32
 80062d0:	42a2      	cmp	r2, r4
 80062d2:	d0f0      	beq.n	80062b6 <__match+0x6>
 80062d4:	2000      	movs	r0, #0
 80062d6:	e7f3      	b.n	80062c0 <__match+0x10>

080062d8 <__hexnan>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	680b      	ldr	r3, [r1, #0]
 80062de:	6801      	ldr	r1, [r0, #0]
 80062e0:	115e      	asrs	r6, r3, #5
 80062e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80062e6:	f013 031f 	ands.w	r3, r3, #31
 80062ea:	b087      	sub	sp, #28
 80062ec:	bf18      	it	ne
 80062ee:	3604      	addne	r6, #4
 80062f0:	2500      	movs	r5, #0
 80062f2:	1f37      	subs	r7, r6, #4
 80062f4:	4682      	mov	sl, r0
 80062f6:	4690      	mov	r8, r2
 80062f8:	9301      	str	r3, [sp, #4]
 80062fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80062fe:	46b9      	mov	r9, r7
 8006300:	463c      	mov	r4, r7
 8006302:	9502      	str	r5, [sp, #8]
 8006304:	46ab      	mov	fp, r5
 8006306:	784a      	ldrb	r2, [r1, #1]
 8006308:	1c4b      	adds	r3, r1, #1
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	b342      	cbz	r2, 8006360 <__hexnan+0x88>
 800630e:	4610      	mov	r0, r2
 8006310:	9105      	str	r1, [sp, #20]
 8006312:	9204      	str	r2, [sp, #16]
 8006314:	f7ff fd5e 	bl	8005dd4 <__hexdig_fun>
 8006318:	2800      	cmp	r0, #0
 800631a:	d14f      	bne.n	80063bc <__hexnan+0xe4>
 800631c:	9a04      	ldr	r2, [sp, #16]
 800631e:	9905      	ldr	r1, [sp, #20]
 8006320:	2a20      	cmp	r2, #32
 8006322:	d818      	bhi.n	8006356 <__hexnan+0x7e>
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	459b      	cmp	fp, r3
 8006328:	dd13      	ble.n	8006352 <__hexnan+0x7a>
 800632a:	454c      	cmp	r4, r9
 800632c:	d206      	bcs.n	800633c <__hexnan+0x64>
 800632e:	2d07      	cmp	r5, #7
 8006330:	dc04      	bgt.n	800633c <__hexnan+0x64>
 8006332:	462a      	mov	r2, r5
 8006334:	4649      	mov	r1, r9
 8006336:	4620      	mov	r0, r4
 8006338:	f7ff ffa8 	bl	800628c <L_shift>
 800633c:	4544      	cmp	r4, r8
 800633e:	d950      	bls.n	80063e2 <__hexnan+0x10a>
 8006340:	2300      	movs	r3, #0
 8006342:	f1a4 0904 	sub.w	r9, r4, #4
 8006346:	f844 3c04 	str.w	r3, [r4, #-4]
 800634a:	f8cd b008 	str.w	fp, [sp, #8]
 800634e:	464c      	mov	r4, r9
 8006350:	461d      	mov	r5, r3
 8006352:	9903      	ldr	r1, [sp, #12]
 8006354:	e7d7      	b.n	8006306 <__hexnan+0x2e>
 8006356:	2a29      	cmp	r2, #41	; 0x29
 8006358:	d156      	bne.n	8006408 <__hexnan+0x130>
 800635a:	3102      	adds	r1, #2
 800635c:	f8ca 1000 	str.w	r1, [sl]
 8006360:	f1bb 0f00 	cmp.w	fp, #0
 8006364:	d050      	beq.n	8006408 <__hexnan+0x130>
 8006366:	454c      	cmp	r4, r9
 8006368:	d206      	bcs.n	8006378 <__hexnan+0xa0>
 800636a:	2d07      	cmp	r5, #7
 800636c:	dc04      	bgt.n	8006378 <__hexnan+0xa0>
 800636e:	462a      	mov	r2, r5
 8006370:	4649      	mov	r1, r9
 8006372:	4620      	mov	r0, r4
 8006374:	f7ff ff8a 	bl	800628c <L_shift>
 8006378:	4544      	cmp	r4, r8
 800637a:	d934      	bls.n	80063e6 <__hexnan+0x10e>
 800637c:	f1a8 0204 	sub.w	r2, r8, #4
 8006380:	4623      	mov	r3, r4
 8006382:	f853 1b04 	ldr.w	r1, [r3], #4
 8006386:	f842 1f04 	str.w	r1, [r2, #4]!
 800638a:	429f      	cmp	r7, r3
 800638c:	d2f9      	bcs.n	8006382 <__hexnan+0xaa>
 800638e:	1b3b      	subs	r3, r7, r4
 8006390:	f023 0303 	bic.w	r3, r3, #3
 8006394:	3304      	adds	r3, #4
 8006396:	3401      	adds	r4, #1
 8006398:	3e03      	subs	r6, #3
 800639a:	42b4      	cmp	r4, r6
 800639c:	bf88      	it	hi
 800639e:	2304      	movhi	r3, #4
 80063a0:	4443      	add	r3, r8
 80063a2:	2200      	movs	r2, #0
 80063a4:	f843 2b04 	str.w	r2, [r3], #4
 80063a8:	429f      	cmp	r7, r3
 80063aa:	d2fb      	bcs.n	80063a4 <__hexnan+0xcc>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	b91b      	cbnz	r3, 80063b8 <__hexnan+0xe0>
 80063b0:	4547      	cmp	r7, r8
 80063b2:	d127      	bne.n	8006404 <__hexnan+0x12c>
 80063b4:	2301      	movs	r3, #1
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	2005      	movs	r0, #5
 80063ba:	e026      	b.n	800640a <__hexnan+0x132>
 80063bc:	3501      	adds	r5, #1
 80063be:	2d08      	cmp	r5, #8
 80063c0:	f10b 0b01 	add.w	fp, fp, #1
 80063c4:	dd06      	ble.n	80063d4 <__hexnan+0xfc>
 80063c6:	4544      	cmp	r4, r8
 80063c8:	d9c3      	bls.n	8006352 <__hexnan+0x7a>
 80063ca:	2300      	movs	r3, #0
 80063cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80063d0:	2501      	movs	r5, #1
 80063d2:	3c04      	subs	r4, #4
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	f000 000f 	and.w	r0, r0, #15
 80063da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80063de:	6022      	str	r2, [r4, #0]
 80063e0:	e7b7      	b.n	8006352 <__hexnan+0x7a>
 80063e2:	2508      	movs	r5, #8
 80063e4:	e7b5      	b.n	8006352 <__hexnan+0x7a>
 80063e6:	9b01      	ldr	r3, [sp, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0df      	beq.n	80063ac <__hexnan+0xd4>
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063f0:	f1c3 0320 	rsb	r3, r3, #32
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
 80063f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80063fc:	401a      	ands	r2, r3
 80063fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8006402:	e7d3      	b.n	80063ac <__hexnan+0xd4>
 8006404:	3f04      	subs	r7, #4
 8006406:	e7d1      	b.n	80063ac <__hexnan+0xd4>
 8006408:	2004      	movs	r0, #4
 800640a:	b007      	add	sp, #28
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006410 <_localeconv_r>:
 8006410:	4800      	ldr	r0, [pc, #0]	; (8006414 <_localeconv_r+0x4>)
 8006412:	4770      	bx	lr
 8006414:	20000168 	.word	0x20000168

08006418 <_lseek_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d07      	ldr	r5, [pc, #28]	; (8006438 <_lseek_r+0x20>)
 800641c:	4604      	mov	r4, r0
 800641e:	4608      	mov	r0, r1
 8006420:	4611      	mov	r1, r2
 8006422:	2200      	movs	r2, #0
 8006424:	602a      	str	r2, [r5, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f7fb fb16 	bl	8001a58 <_lseek>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_lseek_r+0x1e>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_lseek_r+0x1e>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	200002b4 	.word	0x200002b4

0800643c <malloc>:
 800643c:	4b02      	ldr	r3, [pc, #8]	; (8006448 <malloc+0xc>)
 800643e:	4601      	mov	r1, r0
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	f000 bd3d 	b.w	8006ec0 <_malloc_r>
 8006446:	bf00      	nop
 8006448:	20000010 	.word	0x20000010

0800644c <__ascii_mbtowc>:
 800644c:	b082      	sub	sp, #8
 800644e:	b901      	cbnz	r1, 8006452 <__ascii_mbtowc+0x6>
 8006450:	a901      	add	r1, sp, #4
 8006452:	b142      	cbz	r2, 8006466 <__ascii_mbtowc+0x1a>
 8006454:	b14b      	cbz	r3, 800646a <__ascii_mbtowc+0x1e>
 8006456:	7813      	ldrb	r3, [r2, #0]
 8006458:	600b      	str	r3, [r1, #0]
 800645a:	7812      	ldrb	r2, [r2, #0]
 800645c:	1e10      	subs	r0, r2, #0
 800645e:	bf18      	it	ne
 8006460:	2001      	movne	r0, #1
 8006462:	b002      	add	sp, #8
 8006464:	4770      	bx	lr
 8006466:	4610      	mov	r0, r2
 8006468:	e7fb      	b.n	8006462 <__ascii_mbtowc+0x16>
 800646a:	f06f 0001 	mvn.w	r0, #1
 800646e:	e7f8      	b.n	8006462 <__ascii_mbtowc+0x16>

08006470 <memcpy>:
 8006470:	440a      	add	r2, r1
 8006472:	4291      	cmp	r1, r2
 8006474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006478:	d100      	bne.n	800647c <memcpy+0xc>
 800647a:	4770      	bx	lr
 800647c:	b510      	push	{r4, lr}
 800647e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006486:	4291      	cmp	r1, r2
 8006488:	d1f9      	bne.n	800647e <memcpy+0xe>
 800648a:	bd10      	pop	{r4, pc}

0800648c <_Balloc>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006490:	4604      	mov	r4, r0
 8006492:	460d      	mov	r5, r1
 8006494:	b976      	cbnz	r6, 80064b4 <_Balloc+0x28>
 8006496:	2010      	movs	r0, #16
 8006498:	f7ff ffd0 	bl	800643c <malloc>
 800649c:	4602      	mov	r2, r0
 800649e:	6260      	str	r0, [r4, #36]	; 0x24
 80064a0:	b920      	cbnz	r0, 80064ac <_Balloc+0x20>
 80064a2:	4b18      	ldr	r3, [pc, #96]	; (8006504 <_Balloc+0x78>)
 80064a4:	4818      	ldr	r0, [pc, #96]	; (8006508 <_Balloc+0x7c>)
 80064a6:	2166      	movs	r1, #102	; 0x66
 80064a8:	f001 fb1c 	bl	8007ae4 <__assert_func>
 80064ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b0:	6006      	str	r6, [r0, #0]
 80064b2:	60c6      	str	r6, [r0, #12]
 80064b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064b6:	68f3      	ldr	r3, [r6, #12]
 80064b8:	b183      	cbz	r3, 80064dc <_Balloc+0x50>
 80064ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064c2:	b9b8      	cbnz	r0, 80064f4 <_Balloc+0x68>
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f605 	lsl.w	r6, r1, r5
 80064ca:	1d72      	adds	r2, r6, #5
 80064cc:	0092      	lsls	r2, r2, #2
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 fc97 	bl	8006e02 <_calloc_r>
 80064d4:	b160      	cbz	r0, 80064f0 <_Balloc+0x64>
 80064d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064da:	e00e      	b.n	80064fa <_Balloc+0x6e>
 80064dc:	2221      	movs	r2, #33	; 0x21
 80064de:	2104      	movs	r1, #4
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fc8e 	bl	8006e02 <_calloc_r>
 80064e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064e8:	60f0      	str	r0, [r6, #12]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e4      	bne.n	80064ba <_Balloc+0x2e>
 80064f0:	2000      	movs	r0, #0
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	6802      	ldr	r2, [r0, #0]
 80064f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064fa:	2300      	movs	r3, #0
 80064fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006500:	e7f7      	b.n	80064f2 <_Balloc+0x66>
 8006502:	bf00      	nop
 8006504:	0800881e 	.word	0x0800881e
 8006508:	08008924 	.word	0x08008924

0800650c <_Bfree>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006510:	4605      	mov	r5, r0
 8006512:	460c      	mov	r4, r1
 8006514:	b976      	cbnz	r6, 8006534 <_Bfree+0x28>
 8006516:	2010      	movs	r0, #16
 8006518:	f7ff ff90 	bl	800643c <malloc>
 800651c:	4602      	mov	r2, r0
 800651e:	6268      	str	r0, [r5, #36]	; 0x24
 8006520:	b920      	cbnz	r0, 800652c <_Bfree+0x20>
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <_Bfree+0x3c>)
 8006524:	4809      	ldr	r0, [pc, #36]	; (800654c <_Bfree+0x40>)
 8006526:	218a      	movs	r1, #138	; 0x8a
 8006528:	f001 fadc 	bl	8007ae4 <__assert_func>
 800652c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006530:	6006      	str	r6, [r0, #0]
 8006532:	60c6      	str	r6, [r0, #12]
 8006534:	b13c      	cbz	r4, 8006546 <_Bfree+0x3a>
 8006536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006538:	6862      	ldr	r2, [r4, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006540:	6021      	str	r1, [r4, #0]
 8006542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006546:	bd70      	pop	{r4, r5, r6, pc}
 8006548:	0800881e 	.word	0x0800881e
 800654c:	08008924 	.word	0x08008924

08006550 <__multadd>:
 8006550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006554:	690e      	ldr	r6, [r1, #16]
 8006556:	4607      	mov	r7, r0
 8006558:	4698      	mov	r8, r3
 800655a:	460c      	mov	r4, r1
 800655c:	f101 0014 	add.w	r0, r1, #20
 8006560:	2300      	movs	r3, #0
 8006562:	6805      	ldr	r5, [r0, #0]
 8006564:	b2a9      	uxth	r1, r5
 8006566:	fb02 8101 	mla	r1, r2, r1, r8
 800656a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800656e:	0c2d      	lsrs	r5, r5, #16
 8006570:	fb02 c505 	mla	r5, r2, r5, ip
 8006574:	b289      	uxth	r1, r1
 8006576:	3301      	adds	r3, #1
 8006578:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800657c:	429e      	cmp	r6, r3
 800657e:	f840 1b04 	str.w	r1, [r0], #4
 8006582:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006586:	dcec      	bgt.n	8006562 <__multadd+0x12>
 8006588:	f1b8 0f00 	cmp.w	r8, #0
 800658c:	d022      	beq.n	80065d4 <__multadd+0x84>
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	42b3      	cmp	r3, r6
 8006592:	dc19      	bgt.n	80065c8 <__multadd+0x78>
 8006594:	6861      	ldr	r1, [r4, #4]
 8006596:	4638      	mov	r0, r7
 8006598:	3101      	adds	r1, #1
 800659a:	f7ff ff77 	bl	800648c <_Balloc>
 800659e:	4605      	mov	r5, r0
 80065a0:	b928      	cbnz	r0, 80065ae <__multadd+0x5e>
 80065a2:	4602      	mov	r2, r0
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <__multadd+0x8c>)
 80065a6:	480e      	ldr	r0, [pc, #56]	; (80065e0 <__multadd+0x90>)
 80065a8:	21b5      	movs	r1, #181	; 0xb5
 80065aa:	f001 fa9b 	bl	8007ae4 <__assert_func>
 80065ae:	6922      	ldr	r2, [r4, #16]
 80065b0:	3202      	adds	r2, #2
 80065b2:	f104 010c 	add.w	r1, r4, #12
 80065b6:	0092      	lsls	r2, r2, #2
 80065b8:	300c      	adds	r0, #12
 80065ba:	f7ff ff59 	bl	8006470 <memcpy>
 80065be:	4621      	mov	r1, r4
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff ffa3 	bl	800650c <_Bfree>
 80065c6:	462c      	mov	r4, r5
 80065c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80065cc:	3601      	adds	r6, #1
 80065ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80065d2:	6126      	str	r6, [r4, #16]
 80065d4:	4620      	mov	r0, r4
 80065d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065da:	bf00      	nop
 80065dc:	08008894 	.word	0x08008894
 80065e0:	08008924 	.word	0x08008924

080065e4 <__s2b>:
 80065e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e8:	460c      	mov	r4, r1
 80065ea:	4615      	mov	r5, r2
 80065ec:	461f      	mov	r7, r3
 80065ee:	2209      	movs	r2, #9
 80065f0:	3308      	adds	r3, #8
 80065f2:	4606      	mov	r6, r0
 80065f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f8:	2100      	movs	r1, #0
 80065fa:	2201      	movs	r2, #1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	db09      	blt.n	8006614 <__s2b+0x30>
 8006600:	4630      	mov	r0, r6
 8006602:	f7ff ff43 	bl	800648c <_Balloc>
 8006606:	b940      	cbnz	r0, 800661a <__s2b+0x36>
 8006608:	4602      	mov	r2, r0
 800660a:	4b19      	ldr	r3, [pc, #100]	; (8006670 <__s2b+0x8c>)
 800660c:	4819      	ldr	r0, [pc, #100]	; (8006674 <__s2b+0x90>)
 800660e:	21ce      	movs	r1, #206	; 0xce
 8006610:	f001 fa68 	bl	8007ae4 <__assert_func>
 8006614:	0052      	lsls	r2, r2, #1
 8006616:	3101      	adds	r1, #1
 8006618:	e7f0      	b.n	80065fc <__s2b+0x18>
 800661a:	9b08      	ldr	r3, [sp, #32]
 800661c:	6143      	str	r3, [r0, #20]
 800661e:	2d09      	cmp	r5, #9
 8006620:	f04f 0301 	mov.w	r3, #1
 8006624:	6103      	str	r3, [r0, #16]
 8006626:	dd16      	ble.n	8006656 <__s2b+0x72>
 8006628:	f104 0909 	add.w	r9, r4, #9
 800662c:	46c8      	mov	r8, r9
 800662e:	442c      	add	r4, r5
 8006630:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006634:	4601      	mov	r1, r0
 8006636:	3b30      	subs	r3, #48	; 0x30
 8006638:	220a      	movs	r2, #10
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff ff88 	bl	8006550 <__multadd>
 8006640:	45a0      	cmp	r8, r4
 8006642:	d1f5      	bne.n	8006630 <__s2b+0x4c>
 8006644:	f1a5 0408 	sub.w	r4, r5, #8
 8006648:	444c      	add	r4, r9
 800664a:	1b2d      	subs	r5, r5, r4
 800664c:	1963      	adds	r3, r4, r5
 800664e:	42bb      	cmp	r3, r7
 8006650:	db04      	blt.n	800665c <__s2b+0x78>
 8006652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006656:	340a      	adds	r4, #10
 8006658:	2509      	movs	r5, #9
 800665a:	e7f6      	b.n	800664a <__s2b+0x66>
 800665c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006660:	4601      	mov	r1, r0
 8006662:	3b30      	subs	r3, #48	; 0x30
 8006664:	220a      	movs	r2, #10
 8006666:	4630      	mov	r0, r6
 8006668:	f7ff ff72 	bl	8006550 <__multadd>
 800666c:	e7ee      	b.n	800664c <__s2b+0x68>
 800666e:	bf00      	nop
 8006670:	08008894 	.word	0x08008894
 8006674:	08008924 	.word	0x08008924

08006678 <__hi0bits>:
 8006678:	0c03      	lsrs	r3, r0, #16
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	b9d3      	cbnz	r3, 80066b4 <__hi0bits+0x3c>
 800667e:	0400      	lsls	r0, r0, #16
 8006680:	2310      	movs	r3, #16
 8006682:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006686:	bf04      	itt	eq
 8006688:	0200      	lsleq	r0, r0, #8
 800668a:	3308      	addeq	r3, #8
 800668c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006690:	bf04      	itt	eq
 8006692:	0100      	lsleq	r0, r0, #4
 8006694:	3304      	addeq	r3, #4
 8006696:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800669a:	bf04      	itt	eq
 800669c:	0080      	lsleq	r0, r0, #2
 800669e:	3302      	addeq	r3, #2
 80066a0:	2800      	cmp	r0, #0
 80066a2:	db05      	blt.n	80066b0 <__hi0bits+0x38>
 80066a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80066a8:	f103 0301 	add.w	r3, r3, #1
 80066ac:	bf08      	it	eq
 80066ae:	2320      	moveq	r3, #32
 80066b0:	4618      	mov	r0, r3
 80066b2:	4770      	bx	lr
 80066b4:	2300      	movs	r3, #0
 80066b6:	e7e4      	b.n	8006682 <__hi0bits+0xa>

080066b8 <__lo0bits>:
 80066b8:	6803      	ldr	r3, [r0, #0]
 80066ba:	f013 0207 	ands.w	r2, r3, #7
 80066be:	4601      	mov	r1, r0
 80066c0:	d00b      	beq.n	80066da <__lo0bits+0x22>
 80066c2:	07da      	lsls	r2, r3, #31
 80066c4:	d424      	bmi.n	8006710 <__lo0bits+0x58>
 80066c6:	0798      	lsls	r0, r3, #30
 80066c8:	bf49      	itett	mi
 80066ca:	085b      	lsrmi	r3, r3, #1
 80066cc:	089b      	lsrpl	r3, r3, #2
 80066ce:	2001      	movmi	r0, #1
 80066d0:	600b      	strmi	r3, [r1, #0]
 80066d2:	bf5c      	itt	pl
 80066d4:	600b      	strpl	r3, [r1, #0]
 80066d6:	2002      	movpl	r0, #2
 80066d8:	4770      	bx	lr
 80066da:	b298      	uxth	r0, r3
 80066dc:	b9b0      	cbnz	r0, 800670c <__lo0bits+0x54>
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	2010      	movs	r0, #16
 80066e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066e6:	bf04      	itt	eq
 80066e8:	0a1b      	lsreq	r3, r3, #8
 80066ea:	3008      	addeq	r0, #8
 80066ec:	071a      	lsls	r2, r3, #28
 80066ee:	bf04      	itt	eq
 80066f0:	091b      	lsreq	r3, r3, #4
 80066f2:	3004      	addeq	r0, #4
 80066f4:	079a      	lsls	r2, r3, #30
 80066f6:	bf04      	itt	eq
 80066f8:	089b      	lsreq	r3, r3, #2
 80066fa:	3002      	addeq	r0, #2
 80066fc:	07da      	lsls	r2, r3, #31
 80066fe:	d403      	bmi.n	8006708 <__lo0bits+0x50>
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	f100 0001 	add.w	r0, r0, #1
 8006706:	d005      	beq.n	8006714 <__lo0bits+0x5c>
 8006708:	600b      	str	r3, [r1, #0]
 800670a:	4770      	bx	lr
 800670c:	4610      	mov	r0, r2
 800670e:	e7e8      	b.n	80066e2 <__lo0bits+0x2a>
 8006710:	2000      	movs	r0, #0
 8006712:	4770      	bx	lr
 8006714:	2020      	movs	r0, #32
 8006716:	4770      	bx	lr

08006718 <__i2b>:
 8006718:	b510      	push	{r4, lr}
 800671a:	460c      	mov	r4, r1
 800671c:	2101      	movs	r1, #1
 800671e:	f7ff feb5 	bl	800648c <_Balloc>
 8006722:	4602      	mov	r2, r0
 8006724:	b928      	cbnz	r0, 8006732 <__i2b+0x1a>
 8006726:	4b05      	ldr	r3, [pc, #20]	; (800673c <__i2b+0x24>)
 8006728:	4805      	ldr	r0, [pc, #20]	; (8006740 <__i2b+0x28>)
 800672a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800672e:	f001 f9d9 	bl	8007ae4 <__assert_func>
 8006732:	2301      	movs	r3, #1
 8006734:	6144      	str	r4, [r0, #20]
 8006736:	6103      	str	r3, [r0, #16]
 8006738:	bd10      	pop	{r4, pc}
 800673a:	bf00      	nop
 800673c:	08008894 	.word	0x08008894
 8006740:	08008924 	.word	0x08008924

08006744 <__multiply>:
 8006744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	4614      	mov	r4, r2
 800674a:	690a      	ldr	r2, [r1, #16]
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	429a      	cmp	r2, r3
 8006750:	bfb8      	it	lt
 8006752:	460b      	movlt	r3, r1
 8006754:	460d      	mov	r5, r1
 8006756:	bfbc      	itt	lt
 8006758:	4625      	movlt	r5, r4
 800675a:	461c      	movlt	r4, r3
 800675c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006760:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006764:	68ab      	ldr	r3, [r5, #8]
 8006766:	6869      	ldr	r1, [r5, #4]
 8006768:	eb0a 0709 	add.w	r7, sl, r9
 800676c:	42bb      	cmp	r3, r7
 800676e:	b085      	sub	sp, #20
 8006770:	bfb8      	it	lt
 8006772:	3101      	addlt	r1, #1
 8006774:	f7ff fe8a 	bl	800648c <_Balloc>
 8006778:	b930      	cbnz	r0, 8006788 <__multiply+0x44>
 800677a:	4602      	mov	r2, r0
 800677c:	4b42      	ldr	r3, [pc, #264]	; (8006888 <__multiply+0x144>)
 800677e:	4843      	ldr	r0, [pc, #268]	; (800688c <__multiply+0x148>)
 8006780:	f240 115d 	movw	r1, #349	; 0x15d
 8006784:	f001 f9ae 	bl	8007ae4 <__assert_func>
 8006788:	f100 0614 	add.w	r6, r0, #20
 800678c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006790:	4633      	mov	r3, r6
 8006792:	2200      	movs	r2, #0
 8006794:	4543      	cmp	r3, r8
 8006796:	d31e      	bcc.n	80067d6 <__multiply+0x92>
 8006798:	f105 0c14 	add.w	ip, r5, #20
 800679c:	f104 0314 	add.w	r3, r4, #20
 80067a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80067a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80067a8:	9202      	str	r2, [sp, #8]
 80067aa:	ebac 0205 	sub.w	r2, ip, r5
 80067ae:	3a15      	subs	r2, #21
 80067b0:	f022 0203 	bic.w	r2, r2, #3
 80067b4:	3204      	adds	r2, #4
 80067b6:	f105 0115 	add.w	r1, r5, #21
 80067ba:	458c      	cmp	ip, r1
 80067bc:	bf38      	it	cc
 80067be:	2204      	movcc	r2, #4
 80067c0:	9201      	str	r2, [sp, #4]
 80067c2:	9a02      	ldr	r2, [sp, #8]
 80067c4:	9303      	str	r3, [sp, #12]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d808      	bhi.n	80067dc <__multiply+0x98>
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	dc55      	bgt.n	800687a <__multiply+0x136>
 80067ce:	6107      	str	r7, [r0, #16]
 80067d0:	b005      	add	sp, #20
 80067d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d6:	f843 2b04 	str.w	r2, [r3], #4
 80067da:	e7db      	b.n	8006794 <__multiply+0x50>
 80067dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80067e0:	f1ba 0f00 	cmp.w	sl, #0
 80067e4:	d020      	beq.n	8006828 <__multiply+0xe4>
 80067e6:	f105 0e14 	add.w	lr, r5, #20
 80067ea:	46b1      	mov	r9, r6
 80067ec:	2200      	movs	r2, #0
 80067ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 80067f2:	f8d9 b000 	ldr.w	fp, [r9]
 80067f6:	b2a1      	uxth	r1, r4
 80067f8:	fa1f fb8b 	uxth.w	fp, fp
 80067fc:	fb0a b101 	mla	r1, sl, r1, fp
 8006800:	4411      	add	r1, r2
 8006802:	f8d9 2000 	ldr.w	r2, [r9]
 8006806:	0c24      	lsrs	r4, r4, #16
 8006808:	0c12      	lsrs	r2, r2, #16
 800680a:	fb0a 2404 	mla	r4, sl, r4, r2
 800680e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006812:	b289      	uxth	r1, r1
 8006814:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006818:	45f4      	cmp	ip, lr
 800681a:	f849 1b04 	str.w	r1, [r9], #4
 800681e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006822:	d8e4      	bhi.n	80067ee <__multiply+0xaa>
 8006824:	9901      	ldr	r1, [sp, #4]
 8006826:	5072      	str	r2, [r6, r1]
 8006828:	9a03      	ldr	r2, [sp, #12]
 800682a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800682e:	3304      	adds	r3, #4
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	d01f      	beq.n	8006876 <__multiply+0x132>
 8006836:	6834      	ldr	r4, [r6, #0]
 8006838:	f105 0114 	add.w	r1, r5, #20
 800683c:	46b6      	mov	lr, r6
 800683e:	f04f 0a00 	mov.w	sl, #0
 8006842:	880a      	ldrh	r2, [r1, #0]
 8006844:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006848:	fb09 b202 	mla	r2, r9, r2, fp
 800684c:	4492      	add	sl, r2
 800684e:	b2a4      	uxth	r4, r4
 8006850:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006854:	f84e 4b04 	str.w	r4, [lr], #4
 8006858:	f851 4b04 	ldr.w	r4, [r1], #4
 800685c:	f8be 2000 	ldrh.w	r2, [lr]
 8006860:	0c24      	lsrs	r4, r4, #16
 8006862:	fb09 2404 	mla	r4, r9, r4, r2
 8006866:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800686a:	458c      	cmp	ip, r1
 800686c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006870:	d8e7      	bhi.n	8006842 <__multiply+0xfe>
 8006872:	9a01      	ldr	r2, [sp, #4]
 8006874:	50b4      	str	r4, [r6, r2]
 8006876:	3604      	adds	r6, #4
 8006878:	e7a3      	b.n	80067c2 <__multiply+0x7e>
 800687a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1a5      	bne.n	80067ce <__multiply+0x8a>
 8006882:	3f01      	subs	r7, #1
 8006884:	e7a1      	b.n	80067ca <__multiply+0x86>
 8006886:	bf00      	nop
 8006888:	08008894 	.word	0x08008894
 800688c:	08008924 	.word	0x08008924

08006890 <__pow5mult>:
 8006890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006894:	4615      	mov	r5, r2
 8006896:	f012 0203 	ands.w	r2, r2, #3
 800689a:	4606      	mov	r6, r0
 800689c:	460f      	mov	r7, r1
 800689e:	d007      	beq.n	80068b0 <__pow5mult+0x20>
 80068a0:	4c25      	ldr	r4, [pc, #148]	; (8006938 <__pow5mult+0xa8>)
 80068a2:	3a01      	subs	r2, #1
 80068a4:	2300      	movs	r3, #0
 80068a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068aa:	f7ff fe51 	bl	8006550 <__multadd>
 80068ae:	4607      	mov	r7, r0
 80068b0:	10ad      	asrs	r5, r5, #2
 80068b2:	d03d      	beq.n	8006930 <__pow5mult+0xa0>
 80068b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068b6:	b97c      	cbnz	r4, 80068d8 <__pow5mult+0x48>
 80068b8:	2010      	movs	r0, #16
 80068ba:	f7ff fdbf 	bl	800643c <malloc>
 80068be:	4602      	mov	r2, r0
 80068c0:	6270      	str	r0, [r6, #36]	; 0x24
 80068c2:	b928      	cbnz	r0, 80068d0 <__pow5mult+0x40>
 80068c4:	4b1d      	ldr	r3, [pc, #116]	; (800693c <__pow5mult+0xac>)
 80068c6:	481e      	ldr	r0, [pc, #120]	; (8006940 <__pow5mult+0xb0>)
 80068c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068cc:	f001 f90a 	bl	8007ae4 <__assert_func>
 80068d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068d4:	6004      	str	r4, [r0, #0]
 80068d6:	60c4      	str	r4, [r0, #12]
 80068d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068e0:	b94c      	cbnz	r4, 80068f6 <__pow5mult+0x66>
 80068e2:	f240 2171 	movw	r1, #625	; 0x271
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff ff16 	bl	8006718 <__i2b>
 80068ec:	2300      	movs	r3, #0
 80068ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80068f2:	4604      	mov	r4, r0
 80068f4:	6003      	str	r3, [r0, #0]
 80068f6:	f04f 0900 	mov.w	r9, #0
 80068fa:	07eb      	lsls	r3, r5, #31
 80068fc:	d50a      	bpl.n	8006914 <__pow5mult+0x84>
 80068fe:	4639      	mov	r1, r7
 8006900:	4622      	mov	r2, r4
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff ff1e 	bl	8006744 <__multiply>
 8006908:	4639      	mov	r1, r7
 800690a:	4680      	mov	r8, r0
 800690c:	4630      	mov	r0, r6
 800690e:	f7ff fdfd 	bl	800650c <_Bfree>
 8006912:	4647      	mov	r7, r8
 8006914:	106d      	asrs	r5, r5, #1
 8006916:	d00b      	beq.n	8006930 <__pow5mult+0xa0>
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	b938      	cbnz	r0, 800692c <__pow5mult+0x9c>
 800691c:	4622      	mov	r2, r4
 800691e:	4621      	mov	r1, r4
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff ff0f 	bl	8006744 <__multiply>
 8006926:	6020      	str	r0, [r4, #0]
 8006928:	f8c0 9000 	str.w	r9, [r0]
 800692c:	4604      	mov	r4, r0
 800692e:	e7e4      	b.n	80068fa <__pow5mult+0x6a>
 8006930:	4638      	mov	r0, r7
 8006932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006936:	bf00      	nop
 8006938:	08008a78 	.word	0x08008a78
 800693c:	0800881e 	.word	0x0800881e
 8006940:	08008924 	.word	0x08008924

08006944 <__lshift>:
 8006944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006948:	460c      	mov	r4, r1
 800694a:	6849      	ldr	r1, [r1, #4]
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006952:	68a3      	ldr	r3, [r4, #8]
 8006954:	4607      	mov	r7, r0
 8006956:	4691      	mov	r9, r2
 8006958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800695c:	f108 0601 	add.w	r6, r8, #1
 8006960:	42b3      	cmp	r3, r6
 8006962:	db0b      	blt.n	800697c <__lshift+0x38>
 8006964:	4638      	mov	r0, r7
 8006966:	f7ff fd91 	bl	800648c <_Balloc>
 800696a:	4605      	mov	r5, r0
 800696c:	b948      	cbnz	r0, 8006982 <__lshift+0x3e>
 800696e:	4602      	mov	r2, r0
 8006970:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <__lshift+0xd0>)
 8006972:	4829      	ldr	r0, [pc, #164]	; (8006a18 <__lshift+0xd4>)
 8006974:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006978:	f001 f8b4 	bl	8007ae4 <__assert_func>
 800697c:	3101      	adds	r1, #1
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	e7ee      	b.n	8006960 <__lshift+0x1c>
 8006982:	2300      	movs	r3, #0
 8006984:	f100 0114 	add.w	r1, r0, #20
 8006988:	f100 0210 	add.w	r2, r0, #16
 800698c:	4618      	mov	r0, r3
 800698e:	4553      	cmp	r3, sl
 8006990:	db33      	blt.n	80069fa <__lshift+0xb6>
 8006992:	6920      	ldr	r0, [r4, #16]
 8006994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006998:	f104 0314 	add.w	r3, r4, #20
 800699c:	f019 091f 	ands.w	r9, r9, #31
 80069a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069a8:	d02b      	beq.n	8006a02 <__lshift+0xbe>
 80069aa:	f1c9 0e20 	rsb	lr, r9, #32
 80069ae:	468a      	mov	sl, r1
 80069b0:	2200      	movs	r2, #0
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	fa00 f009 	lsl.w	r0, r0, r9
 80069b8:	4302      	orrs	r2, r0
 80069ba:	f84a 2b04 	str.w	r2, [sl], #4
 80069be:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c2:	459c      	cmp	ip, r3
 80069c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80069c8:	d8f3      	bhi.n	80069b2 <__lshift+0x6e>
 80069ca:	ebac 0304 	sub.w	r3, ip, r4
 80069ce:	3b15      	subs	r3, #21
 80069d0:	f023 0303 	bic.w	r3, r3, #3
 80069d4:	3304      	adds	r3, #4
 80069d6:	f104 0015 	add.w	r0, r4, #21
 80069da:	4584      	cmp	ip, r0
 80069dc:	bf38      	it	cc
 80069de:	2304      	movcc	r3, #4
 80069e0:	50ca      	str	r2, [r1, r3]
 80069e2:	b10a      	cbz	r2, 80069e8 <__lshift+0xa4>
 80069e4:	f108 0602 	add.w	r6, r8, #2
 80069e8:	3e01      	subs	r6, #1
 80069ea:	4638      	mov	r0, r7
 80069ec:	612e      	str	r6, [r5, #16]
 80069ee:	4621      	mov	r1, r4
 80069f0:	f7ff fd8c 	bl	800650c <_Bfree>
 80069f4:	4628      	mov	r0, r5
 80069f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80069fe:	3301      	adds	r3, #1
 8006a00:	e7c5      	b.n	800698e <__lshift+0x4a>
 8006a02:	3904      	subs	r1, #4
 8006a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a0c:	459c      	cmp	ip, r3
 8006a0e:	d8f9      	bhi.n	8006a04 <__lshift+0xc0>
 8006a10:	e7ea      	b.n	80069e8 <__lshift+0xa4>
 8006a12:	bf00      	nop
 8006a14:	08008894 	.word	0x08008894
 8006a18:	08008924 	.word	0x08008924

08006a1c <__mcmp>:
 8006a1c:	b530      	push	{r4, r5, lr}
 8006a1e:	6902      	ldr	r2, [r0, #16]
 8006a20:	690c      	ldr	r4, [r1, #16]
 8006a22:	1b12      	subs	r2, r2, r4
 8006a24:	d10e      	bne.n	8006a44 <__mcmp+0x28>
 8006a26:	f100 0314 	add.w	r3, r0, #20
 8006a2a:	3114      	adds	r1, #20
 8006a2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a3c:	42a5      	cmp	r5, r4
 8006a3e:	d003      	beq.n	8006a48 <__mcmp+0x2c>
 8006a40:	d305      	bcc.n	8006a4e <__mcmp+0x32>
 8006a42:	2201      	movs	r2, #1
 8006a44:	4610      	mov	r0, r2
 8006a46:	bd30      	pop	{r4, r5, pc}
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	d3f3      	bcc.n	8006a34 <__mcmp+0x18>
 8006a4c:	e7fa      	b.n	8006a44 <__mcmp+0x28>
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a52:	e7f7      	b.n	8006a44 <__mcmp+0x28>

08006a54 <__mdiff>:
 8006a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	460c      	mov	r4, r1
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4617      	mov	r7, r2
 8006a62:	f7ff ffdb 	bl	8006a1c <__mcmp>
 8006a66:	1e05      	subs	r5, r0, #0
 8006a68:	d110      	bne.n	8006a8c <__mdiff+0x38>
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7ff fd0d 	bl	800648c <_Balloc>
 8006a72:	b930      	cbnz	r0, 8006a82 <__mdiff+0x2e>
 8006a74:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <__mdiff+0x108>)
 8006a76:	4602      	mov	r2, r0
 8006a78:	f240 2132 	movw	r1, #562	; 0x232
 8006a7c:	4838      	ldr	r0, [pc, #224]	; (8006b60 <__mdiff+0x10c>)
 8006a7e:	f001 f831 	bl	8007ae4 <__assert_func>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	bfa4      	itt	ge
 8006a8e:	463b      	movge	r3, r7
 8006a90:	4627      	movge	r7, r4
 8006a92:	4630      	mov	r0, r6
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	bfa6      	itte	ge
 8006a98:	461c      	movge	r4, r3
 8006a9a:	2500      	movge	r5, #0
 8006a9c:	2501      	movlt	r5, #1
 8006a9e:	f7ff fcf5 	bl	800648c <_Balloc>
 8006aa2:	b920      	cbnz	r0, 8006aae <__mdiff+0x5a>
 8006aa4:	4b2d      	ldr	r3, [pc, #180]	; (8006b5c <__mdiff+0x108>)
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006aac:	e7e6      	b.n	8006a7c <__mdiff+0x28>
 8006aae:	693e      	ldr	r6, [r7, #16]
 8006ab0:	60c5      	str	r5, [r0, #12]
 8006ab2:	6925      	ldr	r5, [r4, #16]
 8006ab4:	f107 0114 	add.w	r1, r7, #20
 8006ab8:	f104 0914 	add.w	r9, r4, #20
 8006abc:	f100 0e14 	add.w	lr, r0, #20
 8006ac0:	f107 0210 	add.w	r2, r7, #16
 8006ac4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ac8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006acc:	46f2      	mov	sl, lr
 8006ace:	2700      	movs	r7, #0
 8006ad0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ad8:	fa1f f883 	uxth.w	r8, r3
 8006adc:	fa17 f78b 	uxtah	r7, r7, fp
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	eba7 0808 	sub.w	r8, r7, r8
 8006ae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006aea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006aee:	fa1f f888 	uxth.w	r8, r8
 8006af2:	141f      	asrs	r7, r3, #16
 8006af4:	454d      	cmp	r5, r9
 8006af6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006afa:	f84a 3b04 	str.w	r3, [sl], #4
 8006afe:	d8e7      	bhi.n	8006ad0 <__mdiff+0x7c>
 8006b00:	1b2b      	subs	r3, r5, r4
 8006b02:	3b15      	subs	r3, #21
 8006b04:	f023 0303 	bic.w	r3, r3, #3
 8006b08:	3304      	adds	r3, #4
 8006b0a:	3415      	adds	r4, #21
 8006b0c:	42a5      	cmp	r5, r4
 8006b0e:	bf38      	it	cc
 8006b10:	2304      	movcc	r3, #4
 8006b12:	4419      	add	r1, r3
 8006b14:	4473      	add	r3, lr
 8006b16:	469e      	mov	lr, r3
 8006b18:	460d      	mov	r5, r1
 8006b1a:	4565      	cmp	r5, ip
 8006b1c:	d30e      	bcc.n	8006b3c <__mdiff+0xe8>
 8006b1e:	f10c 0203 	add.w	r2, ip, #3
 8006b22:	1a52      	subs	r2, r2, r1
 8006b24:	f022 0203 	bic.w	r2, r2, #3
 8006b28:	3903      	subs	r1, #3
 8006b2a:	458c      	cmp	ip, r1
 8006b2c:	bf38      	it	cc
 8006b2e:	2200      	movcc	r2, #0
 8006b30:	441a      	add	r2, r3
 8006b32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b36:	b17b      	cbz	r3, 8006b58 <__mdiff+0x104>
 8006b38:	6106      	str	r6, [r0, #16]
 8006b3a:	e7a5      	b.n	8006a88 <__mdiff+0x34>
 8006b3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b40:	fa17 f488 	uxtah	r4, r7, r8
 8006b44:	1422      	asrs	r2, r4, #16
 8006b46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006b4a:	b2a4      	uxth	r4, r4
 8006b4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b50:	f84e 4b04 	str.w	r4, [lr], #4
 8006b54:	1417      	asrs	r7, r2, #16
 8006b56:	e7e0      	b.n	8006b1a <__mdiff+0xc6>
 8006b58:	3e01      	subs	r6, #1
 8006b5a:	e7ea      	b.n	8006b32 <__mdiff+0xde>
 8006b5c:	08008894 	.word	0x08008894
 8006b60:	08008924 	.word	0x08008924

08006b64 <__ulp>:
 8006b64:	b082      	sub	sp, #8
 8006b66:	ed8d 0b00 	vstr	d0, [sp]
 8006b6a:	9b01      	ldr	r3, [sp, #4]
 8006b6c:	4912      	ldr	r1, [pc, #72]	; (8006bb8 <__ulp+0x54>)
 8006b6e:	4019      	ands	r1, r3
 8006b70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006b74:	2900      	cmp	r1, #0
 8006b76:	dd05      	ble.n	8006b84 <__ulp+0x20>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	ec43 2b10 	vmov	d0, r2, r3
 8006b80:	b002      	add	sp, #8
 8006b82:	4770      	bx	lr
 8006b84:	4249      	negs	r1, r1
 8006b86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006b8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	da04      	bge.n	8006ba2 <__ulp+0x3e>
 8006b98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006b9c:	fa41 f300 	asr.w	r3, r1, r0
 8006ba0:	e7ec      	b.n	8006b7c <__ulp+0x18>
 8006ba2:	f1a0 0114 	sub.w	r1, r0, #20
 8006ba6:	291e      	cmp	r1, #30
 8006ba8:	bfda      	itte	le
 8006baa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006bae:	fa20 f101 	lsrle.w	r1, r0, r1
 8006bb2:	2101      	movgt	r1, #1
 8006bb4:	460a      	mov	r2, r1
 8006bb6:	e7e1      	b.n	8006b7c <__ulp+0x18>
 8006bb8:	7ff00000 	.word	0x7ff00000

08006bbc <__b2d>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	6905      	ldr	r5, [r0, #16]
 8006bc0:	f100 0714 	add.w	r7, r0, #20
 8006bc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006bc8:	1f2e      	subs	r6, r5, #4
 8006bca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7ff fd52 	bl	8006678 <__hi0bits>
 8006bd4:	f1c0 0320 	rsb	r3, r0, #32
 8006bd8:	280a      	cmp	r0, #10
 8006bda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006c58 <__b2d+0x9c>
 8006bde:	600b      	str	r3, [r1, #0]
 8006be0:	dc14      	bgt.n	8006c0c <__b2d+0x50>
 8006be2:	f1c0 0e0b 	rsb	lr, r0, #11
 8006be6:	fa24 f10e 	lsr.w	r1, r4, lr
 8006bea:	42b7      	cmp	r7, r6
 8006bec:	ea41 030c 	orr.w	r3, r1, ip
 8006bf0:	bf34      	ite	cc
 8006bf2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006bf6:	2100      	movcs	r1, #0
 8006bf8:	3015      	adds	r0, #21
 8006bfa:	fa04 f000 	lsl.w	r0, r4, r0
 8006bfe:	fa21 f10e 	lsr.w	r1, r1, lr
 8006c02:	ea40 0201 	orr.w	r2, r0, r1
 8006c06:	ec43 2b10 	vmov	d0, r2, r3
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0c:	42b7      	cmp	r7, r6
 8006c0e:	bf3a      	itte	cc
 8006c10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006c14:	f1a5 0608 	subcc.w	r6, r5, #8
 8006c18:	2100      	movcs	r1, #0
 8006c1a:	380b      	subs	r0, #11
 8006c1c:	d017      	beq.n	8006c4e <__b2d+0x92>
 8006c1e:	f1c0 0c20 	rsb	ip, r0, #32
 8006c22:	fa04 f500 	lsl.w	r5, r4, r0
 8006c26:	42be      	cmp	r6, r7
 8006c28:	fa21 f40c 	lsr.w	r4, r1, ip
 8006c2c:	ea45 0504 	orr.w	r5, r5, r4
 8006c30:	bf8c      	ite	hi
 8006c32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006c36:	2400      	movls	r4, #0
 8006c38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006c3c:	fa01 f000 	lsl.w	r0, r1, r0
 8006c40:	fa24 f40c 	lsr.w	r4, r4, ip
 8006c44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c48:	ea40 0204 	orr.w	r2, r0, r4
 8006c4c:	e7db      	b.n	8006c06 <__b2d+0x4a>
 8006c4e:	ea44 030c 	orr.w	r3, r4, ip
 8006c52:	460a      	mov	r2, r1
 8006c54:	e7d7      	b.n	8006c06 <__b2d+0x4a>
 8006c56:	bf00      	nop
 8006c58:	3ff00000 	.word	0x3ff00000

08006c5c <__d2b>:
 8006c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c60:	4689      	mov	r9, r1
 8006c62:	2101      	movs	r1, #1
 8006c64:	ec57 6b10 	vmov	r6, r7, d0
 8006c68:	4690      	mov	r8, r2
 8006c6a:	f7ff fc0f 	bl	800648c <_Balloc>
 8006c6e:	4604      	mov	r4, r0
 8006c70:	b930      	cbnz	r0, 8006c80 <__d2b+0x24>
 8006c72:	4602      	mov	r2, r0
 8006c74:	4b25      	ldr	r3, [pc, #148]	; (8006d0c <__d2b+0xb0>)
 8006c76:	4826      	ldr	r0, [pc, #152]	; (8006d10 <__d2b+0xb4>)
 8006c78:	f240 310a 	movw	r1, #778	; 0x30a
 8006c7c:	f000 ff32 	bl	8007ae4 <__assert_func>
 8006c80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c88:	bb35      	cbnz	r5, 8006cd8 <__d2b+0x7c>
 8006c8a:	2e00      	cmp	r6, #0
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	d028      	beq.n	8006ce2 <__d2b+0x86>
 8006c90:	4668      	mov	r0, sp
 8006c92:	9600      	str	r6, [sp, #0]
 8006c94:	f7ff fd10 	bl	80066b8 <__lo0bits>
 8006c98:	9900      	ldr	r1, [sp, #0]
 8006c9a:	b300      	cbz	r0, 8006cde <__d2b+0x82>
 8006c9c:	9a01      	ldr	r2, [sp, #4]
 8006c9e:	f1c0 0320 	rsb	r3, r0, #32
 8006ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	40c2      	lsrs	r2, r0
 8006caa:	6163      	str	r3, [r4, #20]
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	61a3      	str	r3, [r4, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bf14      	ite	ne
 8006cb6:	2202      	movne	r2, #2
 8006cb8:	2201      	moveq	r2, #1
 8006cba:	6122      	str	r2, [r4, #16]
 8006cbc:	b1d5      	cbz	r5, 8006cf4 <__d2b+0x98>
 8006cbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cc2:	4405      	add	r5, r0
 8006cc4:	f8c9 5000 	str.w	r5, [r9]
 8006cc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ccc:	f8c8 0000 	str.w	r0, [r8]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	b003      	add	sp, #12
 8006cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cdc:	e7d5      	b.n	8006c8a <__d2b+0x2e>
 8006cde:	6161      	str	r1, [r4, #20]
 8006ce0:	e7e5      	b.n	8006cae <__d2b+0x52>
 8006ce2:	a801      	add	r0, sp, #4
 8006ce4:	f7ff fce8 	bl	80066b8 <__lo0bits>
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	6163      	str	r3, [r4, #20]
 8006cec:	2201      	movs	r2, #1
 8006cee:	6122      	str	r2, [r4, #16]
 8006cf0:	3020      	adds	r0, #32
 8006cf2:	e7e3      	b.n	8006cbc <__d2b+0x60>
 8006cf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cfc:	f8c9 0000 	str.w	r0, [r9]
 8006d00:	6918      	ldr	r0, [r3, #16]
 8006d02:	f7ff fcb9 	bl	8006678 <__hi0bits>
 8006d06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d0a:	e7df      	b.n	8006ccc <__d2b+0x70>
 8006d0c:	08008894 	.word	0x08008894
 8006d10:	08008924 	.word	0x08008924

08006d14 <__ratio>:
 8006d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	4688      	mov	r8, r1
 8006d1a:	4669      	mov	r1, sp
 8006d1c:	4681      	mov	r9, r0
 8006d1e:	f7ff ff4d 	bl	8006bbc <__b2d>
 8006d22:	a901      	add	r1, sp, #4
 8006d24:	4640      	mov	r0, r8
 8006d26:	ec55 4b10 	vmov	r4, r5, d0
 8006d2a:	f7ff ff47 	bl	8006bbc <__b2d>
 8006d2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006d36:	eba3 0c02 	sub.w	ip, r3, r2
 8006d3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006d44:	ec51 0b10 	vmov	r0, r1, d0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bfd6      	itet	le
 8006d4c:	460a      	movle	r2, r1
 8006d4e:	462a      	movgt	r2, r5
 8006d50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d54:	468b      	mov	fp, r1
 8006d56:	462f      	mov	r7, r5
 8006d58:	bfd4      	ite	le
 8006d5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006d5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006d62:	4620      	mov	r0, r4
 8006d64:	ee10 2a10 	vmov	r2, s0
 8006d68:	465b      	mov	r3, fp
 8006d6a:	4639      	mov	r1, r7
 8006d6c:	f7f9 fd7e 	bl	800086c <__aeabi_ddiv>
 8006d70:	ec41 0b10 	vmov	d0, r0, r1
 8006d74:	b003      	add	sp, #12
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d7a <__copybits>:
 8006d7a:	3901      	subs	r1, #1
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	1149      	asrs	r1, r1, #5
 8006d80:	6914      	ldr	r4, [r2, #16]
 8006d82:	3101      	adds	r1, #1
 8006d84:	f102 0314 	add.w	r3, r2, #20
 8006d88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d90:	1f05      	subs	r5, r0, #4
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	d30c      	bcc.n	8006db0 <__copybits+0x36>
 8006d96:	1aa3      	subs	r3, r4, r2
 8006d98:	3b11      	subs	r3, #17
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	3211      	adds	r2, #17
 8006da0:	42a2      	cmp	r2, r4
 8006da2:	bf88      	it	hi
 8006da4:	2300      	movhi	r3, #0
 8006da6:	4418      	add	r0, r3
 8006da8:	2300      	movs	r3, #0
 8006daa:	4288      	cmp	r0, r1
 8006dac:	d305      	bcc.n	8006dba <__copybits+0x40>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	f853 6b04 	ldr.w	r6, [r3], #4
 8006db4:	f845 6f04 	str.w	r6, [r5, #4]!
 8006db8:	e7eb      	b.n	8006d92 <__copybits+0x18>
 8006dba:	f840 3b04 	str.w	r3, [r0], #4
 8006dbe:	e7f4      	b.n	8006daa <__copybits+0x30>

08006dc0 <__any_on>:
 8006dc0:	f100 0214 	add.w	r2, r0, #20
 8006dc4:	6900      	ldr	r0, [r0, #16]
 8006dc6:	114b      	asrs	r3, r1, #5
 8006dc8:	4298      	cmp	r0, r3
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	db11      	blt.n	8006df2 <__any_on+0x32>
 8006dce:	dd0a      	ble.n	8006de6 <__any_on+0x26>
 8006dd0:	f011 011f 	ands.w	r1, r1, #31
 8006dd4:	d007      	beq.n	8006de6 <__any_on+0x26>
 8006dd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006dda:	fa24 f001 	lsr.w	r0, r4, r1
 8006dde:	fa00 f101 	lsl.w	r1, r0, r1
 8006de2:	428c      	cmp	r4, r1
 8006de4:	d10b      	bne.n	8006dfe <__any_on+0x3e>
 8006de6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d803      	bhi.n	8006df6 <__any_on+0x36>
 8006dee:	2000      	movs	r0, #0
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	4603      	mov	r3, r0
 8006df4:	e7f7      	b.n	8006de6 <__any_on+0x26>
 8006df6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dfa:	2900      	cmp	r1, #0
 8006dfc:	d0f5      	beq.n	8006dea <__any_on+0x2a>
 8006dfe:	2001      	movs	r0, #1
 8006e00:	e7f6      	b.n	8006df0 <__any_on+0x30>

08006e02 <_calloc_r>:
 8006e02:	b513      	push	{r0, r1, r4, lr}
 8006e04:	434a      	muls	r2, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	9201      	str	r2, [sp, #4]
 8006e0a:	f000 f859 	bl	8006ec0 <_malloc_r>
 8006e0e:	4604      	mov	r4, r0
 8006e10:	b118      	cbz	r0, 8006e1a <_calloc_r+0x18>
 8006e12:	9a01      	ldr	r2, [sp, #4]
 8006e14:	2100      	movs	r1, #0
 8006e16:	f7fc faef 	bl	80033f8 <memset>
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	b002      	add	sp, #8
 8006e1e:	bd10      	pop	{r4, pc}

08006e20 <_free_r>:
 8006e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d048      	beq.n	8006eb8 <_free_r+0x98>
 8006e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e2a:	9001      	str	r0, [sp, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e32:	bfb8      	it	lt
 8006e34:	18e4      	addlt	r4, r4, r3
 8006e36:	f001 f859 	bl	8007eec <__malloc_lock>
 8006e3a:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <_free_r+0x9c>)
 8006e3c:	9801      	ldr	r0, [sp, #4]
 8006e3e:	6813      	ldr	r3, [r2, #0]
 8006e40:	4615      	mov	r5, r2
 8006e42:	b933      	cbnz	r3, 8006e52 <_free_r+0x32>
 8006e44:	6063      	str	r3, [r4, #4]
 8006e46:	6014      	str	r4, [r2, #0]
 8006e48:	b003      	add	sp, #12
 8006e4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e4e:	f001 b853 	b.w	8007ef8 <__malloc_unlock>
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	d90b      	bls.n	8006e6e <_free_r+0x4e>
 8006e56:	6821      	ldr	r1, [r4, #0]
 8006e58:	1862      	adds	r2, r4, r1
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	bf04      	itt	eq
 8006e5e:	681a      	ldreq	r2, [r3, #0]
 8006e60:	685b      	ldreq	r3, [r3, #4]
 8006e62:	6063      	str	r3, [r4, #4]
 8006e64:	bf04      	itt	eq
 8006e66:	1852      	addeq	r2, r2, r1
 8006e68:	6022      	streq	r2, [r4, #0]
 8006e6a:	602c      	str	r4, [r5, #0]
 8006e6c:	e7ec      	b.n	8006e48 <_free_r+0x28>
 8006e6e:	461a      	mov	r2, r3
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	b10b      	cbz	r3, 8006e78 <_free_r+0x58>
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	d9fa      	bls.n	8006e6e <_free_r+0x4e>
 8006e78:	6811      	ldr	r1, [r2, #0]
 8006e7a:	1855      	adds	r5, r2, r1
 8006e7c:	42a5      	cmp	r5, r4
 8006e7e:	d10b      	bne.n	8006e98 <_free_r+0x78>
 8006e80:	6824      	ldr	r4, [r4, #0]
 8006e82:	4421      	add	r1, r4
 8006e84:	1854      	adds	r4, r2, r1
 8006e86:	42a3      	cmp	r3, r4
 8006e88:	6011      	str	r1, [r2, #0]
 8006e8a:	d1dd      	bne.n	8006e48 <_free_r+0x28>
 8006e8c:	681c      	ldr	r4, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	6053      	str	r3, [r2, #4]
 8006e92:	4421      	add	r1, r4
 8006e94:	6011      	str	r1, [r2, #0]
 8006e96:	e7d7      	b.n	8006e48 <_free_r+0x28>
 8006e98:	d902      	bls.n	8006ea0 <_free_r+0x80>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	6003      	str	r3, [r0, #0]
 8006e9e:	e7d3      	b.n	8006e48 <_free_r+0x28>
 8006ea0:	6825      	ldr	r5, [r4, #0]
 8006ea2:	1961      	adds	r1, r4, r5
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	bf04      	itt	eq
 8006ea8:	6819      	ldreq	r1, [r3, #0]
 8006eaa:	685b      	ldreq	r3, [r3, #4]
 8006eac:	6063      	str	r3, [r4, #4]
 8006eae:	bf04      	itt	eq
 8006eb0:	1949      	addeq	r1, r1, r5
 8006eb2:	6021      	streq	r1, [r4, #0]
 8006eb4:	6054      	str	r4, [r2, #4]
 8006eb6:	e7c7      	b.n	8006e48 <_free_r+0x28>
 8006eb8:	b003      	add	sp, #12
 8006eba:	bd30      	pop	{r4, r5, pc}
 8006ebc:	200002a8 	.word	0x200002a8

08006ec0 <_malloc_r>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	1ccd      	adds	r5, r1, #3
 8006ec4:	f025 0503 	bic.w	r5, r5, #3
 8006ec8:	3508      	adds	r5, #8
 8006eca:	2d0c      	cmp	r5, #12
 8006ecc:	bf38      	it	cc
 8006ece:	250c      	movcc	r5, #12
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	db01      	blt.n	8006eda <_malloc_r+0x1a>
 8006ed6:	42a9      	cmp	r1, r5
 8006ed8:	d903      	bls.n	8006ee2 <_malloc_r+0x22>
 8006eda:	230c      	movs	r3, #12
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	2000      	movs	r0, #0
 8006ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee2:	f001 f803 	bl	8007eec <__malloc_lock>
 8006ee6:	4921      	ldr	r1, [pc, #132]	; (8006f6c <_malloc_r+0xac>)
 8006ee8:	680a      	ldr	r2, [r1, #0]
 8006eea:	4614      	mov	r4, r2
 8006eec:	b99c      	cbnz	r4, 8006f16 <_malloc_r+0x56>
 8006eee:	4f20      	ldr	r7, [pc, #128]	; (8006f70 <_malloc_r+0xb0>)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	b923      	cbnz	r3, 8006efe <_malloc_r+0x3e>
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 fcd2 	bl	80078a0 <_sbrk_r>
 8006efc:	6038      	str	r0, [r7, #0]
 8006efe:	4629      	mov	r1, r5
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 fccd 	bl	80078a0 <_sbrk_r>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d123      	bne.n	8006f52 <_malloc_r+0x92>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	6033      	str	r3, [r6, #0]
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 fff2 	bl	8007ef8 <__malloc_unlock>
 8006f14:	e7e3      	b.n	8006ede <_malloc_r+0x1e>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	1b5b      	subs	r3, r3, r5
 8006f1a:	d417      	bmi.n	8006f4c <_malloc_r+0x8c>
 8006f1c:	2b0b      	cmp	r3, #11
 8006f1e:	d903      	bls.n	8006f28 <_malloc_r+0x68>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	441c      	add	r4, r3
 8006f24:	6025      	str	r5, [r4, #0]
 8006f26:	e004      	b.n	8006f32 <_malloc_r+0x72>
 8006f28:	6863      	ldr	r3, [r4, #4]
 8006f2a:	42a2      	cmp	r2, r4
 8006f2c:	bf0c      	ite	eq
 8006f2e:	600b      	streq	r3, [r1, #0]
 8006f30:	6053      	strne	r3, [r2, #4]
 8006f32:	4630      	mov	r0, r6
 8006f34:	f000 ffe0 	bl	8007ef8 <__malloc_unlock>
 8006f38:	f104 000b 	add.w	r0, r4, #11
 8006f3c:	1d23      	adds	r3, r4, #4
 8006f3e:	f020 0007 	bic.w	r0, r0, #7
 8006f42:	1ac2      	subs	r2, r0, r3
 8006f44:	d0cc      	beq.n	8006ee0 <_malloc_r+0x20>
 8006f46:	1a1b      	subs	r3, r3, r0
 8006f48:	50a3      	str	r3, [r4, r2]
 8006f4a:	e7c9      	b.n	8006ee0 <_malloc_r+0x20>
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	6864      	ldr	r4, [r4, #4]
 8006f50:	e7cc      	b.n	8006eec <_malloc_r+0x2c>
 8006f52:	1cc4      	adds	r4, r0, #3
 8006f54:	f024 0403 	bic.w	r4, r4, #3
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d0e3      	beq.n	8006f24 <_malloc_r+0x64>
 8006f5c:	1a21      	subs	r1, r4, r0
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 fc9e 	bl	80078a0 <_sbrk_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d1dd      	bne.n	8006f24 <_malloc_r+0x64>
 8006f68:	e7cf      	b.n	8006f0a <_malloc_r+0x4a>
 8006f6a:	bf00      	nop
 8006f6c:	200002a8 	.word	0x200002a8
 8006f70:	200002ac 	.word	0x200002ac

08006f74 <__ssputs_r>:
 8006f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f78:	688e      	ldr	r6, [r1, #8]
 8006f7a:	429e      	cmp	r6, r3
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	4690      	mov	r8, r2
 8006f82:	461f      	mov	r7, r3
 8006f84:	d838      	bhi.n	8006ff8 <__ssputs_r+0x84>
 8006f86:	898a      	ldrh	r2, [r1, #12]
 8006f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f8c:	d032      	beq.n	8006ff4 <__ssputs_r+0x80>
 8006f8e:	6825      	ldr	r5, [r4, #0]
 8006f90:	6909      	ldr	r1, [r1, #16]
 8006f92:	eba5 0901 	sub.w	r9, r5, r1
 8006f96:	6965      	ldr	r5, [r4, #20]
 8006f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	444b      	add	r3, r9
 8006fa4:	106d      	asrs	r5, r5, #1
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	bf38      	it	cc
 8006faa:	461d      	movcc	r5, r3
 8006fac:	0553      	lsls	r3, r2, #21
 8006fae:	d531      	bpl.n	8007014 <__ssputs_r+0xa0>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7ff ff85 	bl	8006ec0 <_malloc_r>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	b950      	cbnz	r0, 8006fd0 <__ssputs_r+0x5c>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	f8ca 3000 	str.w	r3, [sl]
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd0:	6921      	ldr	r1, [r4, #16]
 8006fd2:	464a      	mov	r2, r9
 8006fd4:	f7ff fa4c 	bl	8006470 <memcpy>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	6126      	str	r6, [r4, #16]
 8006fe6:	6165      	str	r5, [r4, #20]
 8006fe8:	444e      	add	r6, r9
 8006fea:	eba5 0509 	sub.w	r5, r5, r9
 8006fee:	6026      	str	r6, [r4, #0]
 8006ff0:	60a5      	str	r5, [r4, #8]
 8006ff2:	463e      	mov	r6, r7
 8006ff4:	42be      	cmp	r6, r7
 8006ff6:	d900      	bls.n	8006ffa <__ssputs_r+0x86>
 8006ff8:	463e      	mov	r6, r7
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	6820      	ldr	r0, [r4, #0]
 8006ffe:	4641      	mov	r1, r8
 8007000:	f000 ff5a 	bl	8007eb8 <memmove>
 8007004:	68a3      	ldr	r3, [r4, #8]
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	1b9b      	subs	r3, r3, r6
 800700a:	4432      	add	r2, r6
 800700c:	60a3      	str	r3, [r4, #8]
 800700e:	6022      	str	r2, [r4, #0]
 8007010:	2000      	movs	r0, #0
 8007012:	e7db      	b.n	8006fcc <__ssputs_r+0x58>
 8007014:	462a      	mov	r2, r5
 8007016:	f000 ff75 	bl	8007f04 <_realloc_r>
 800701a:	4606      	mov	r6, r0
 800701c:	2800      	cmp	r0, #0
 800701e:	d1e1      	bne.n	8006fe4 <__ssputs_r+0x70>
 8007020:	6921      	ldr	r1, [r4, #16]
 8007022:	4650      	mov	r0, sl
 8007024:	f7ff fefc 	bl	8006e20 <_free_r>
 8007028:	e7c7      	b.n	8006fba <__ssputs_r+0x46>
	...

0800702c <_svfiprintf_r>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	4698      	mov	r8, r3
 8007032:	898b      	ldrh	r3, [r1, #12]
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	b09d      	sub	sp, #116	; 0x74
 8007038:	4607      	mov	r7, r0
 800703a:	460d      	mov	r5, r1
 800703c:	4614      	mov	r4, r2
 800703e:	d50e      	bpl.n	800705e <_svfiprintf_r+0x32>
 8007040:	690b      	ldr	r3, [r1, #16]
 8007042:	b963      	cbnz	r3, 800705e <_svfiprintf_r+0x32>
 8007044:	2140      	movs	r1, #64	; 0x40
 8007046:	f7ff ff3b 	bl	8006ec0 <_malloc_r>
 800704a:	6028      	str	r0, [r5, #0]
 800704c:	6128      	str	r0, [r5, #16]
 800704e:	b920      	cbnz	r0, 800705a <_svfiprintf_r+0x2e>
 8007050:	230c      	movs	r3, #12
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007058:	e0d1      	b.n	80071fe <_svfiprintf_r+0x1d2>
 800705a:	2340      	movs	r3, #64	; 0x40
 800705c:	616b      	str	r3, [r5, #20]
 800705e:	2300      	movs	r3, #0
 8007060:	9309      	str	r3, [sp, #36]	; 0x24
 8007062:	2320      	movs	r3, #32
 8007064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007068:	f8cd 800c 	str.w	r8, [sp, #12]
 800706c:	2330      	movs	r3, #48	; 0x30
 800706e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007218 <_svfiprintf_r+0x1ec>
 8007072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	4623      	mov	r3, r4
 800707c:	469a      	mov	sl, r3
 800707e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007082:	b10a      	cbz	r2, 8007088 <_svfiprintf_r+0x5c>
 8007084:	2a25      	cmp	r2, #37	; 0x25
 8007086:	d1f9      	bne.n	800707c <_svfiprintf_r+0x50>
 8007088:	ebba 0b04 	subs.w	fp, sl, r4
 800708c:	d00b      	beq.n	80070a6 <_svfiprintf_r+0x7a>
 800708e:	465b      	mov	r3, fp
 8007090:	4622      	mov	r2, r4
 8007092:	4629      	mov	r1, r5
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ff6d 	bl	8006f74 <__ssputs_r>
 800709a:	3001      	adds	r0, #1
 800709c:	f000 80aa 	beq.w	80071f4 <_svfiprintf_r+0x1c8>
 80070a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a2:	445a      	add	r2, fp
 80070a4:	9209      	str	r2, [sp, #36]	; 0x24
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 80a2 	beq.w	80071f4 <_svfiprintf_r+0x1c8>
 80070b0:	2300      	movs	r3, #0
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ba:	f10a 0a01 	add.w	sl, sl, #1
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070c6:	931a      	str	r3, [sp, #104]	; 0x68
 80070c8:	4654      	mov	r4, sl
 80070ca:	2205      	movs	r2, #5
 80070cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d0:	4851      	ldr	r0, [pc, #324]	; (8007218 <_svfiprintf_r+0x1ec>)
 80070d2:	f7f9 f895 	bl	8000200 <memchr>
 80070d6:	9a04      	ldr	r2, [sp, #16]
 80070d8:	b9d8      	cbnz	r0, 8007112 <_svfiprintf_r+0xe6>
 80070da:	06d0      	lsls	r0, r2, #27
 80070dc:	bf44      	itt	mi
 80070de:	2320      	movmi	r3, #32
 80070e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e4:	0711      	lsls	r1, r2, #28
 80070e6:	bf44      	itt	mi
 80070e8:	232b      	movmi	r3, #43	; 0x2b
 80070ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b2a      	cmp	r3, #42	; 0x2a
 80070f4:	d015      	beq.n	8007122 <_svfiprintf_r+0xf6>
 80070f6:	9a07      	ldr	r2, [sp, #28]
 80070f8:	4654      	mov	r4, sl
 80070fa:	2000      	movs	r0, #0
 80070fc:	f04f 0c0a 	mov.w	ip, #10
 8007100:	4621      	mov	r1, r4
 8007102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007106:	3b30      	subs	r3, #48	; 0x30
 8007108:	2b09      	cmp	r3, #9
 800710a:	d94e      	bls.n	80071aa <_svfiprintf_r+0x17e>
 800710c:	b1b0      	cbz	r0, 800713c <_svfiprintf_r+0x110>
 800710e:	9207      	str	r2, [sp, #28]
 8007110:	e014      	b.n	800713c <_svfiprintf_r+0x110>
 8007112:	eba0 0308 	sub.w	r3, r0, r8
 8007116:	fa09 f303 	lsl.w	r3, r9, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	46a2      	mov	sl, r4
 8007120:	e7d2      	b.n	80070c8 <_svfiprintf_r+0x9c>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	1d19      	adds	r1, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9103      	str	r1, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfbb      	ittet	lt
 800712e:	425b      	neglt	r3, r3
 8007130:	f042 0202 	orrlt.w	r2, r2, #2
 8007134:	9307      	strge	r3, [sp, #28]
 8007136:	9307      	strlt	r3, [sp, #28]
 8007138:	bfb8      	it	lt
 800713a:	9204      	strlt	r2, [sp, #16]
 800713c:	7823      	ldrb	r3, [r4, #0]
 800713e:	2b2e      	cmp	r3, #46	; 0x2e
 8007140:	d10c      	bne.n	800715c <_svfiprintf_r+0x130>
 8007142:	7863      	ldrb	r3, [r4, #1]
 8007144:	2b2a      	cmp	r3, #42	; 0x2a
 8007146:	d135      	bne.n	80071b4 <_svfiprintf_r+0x188>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9203      	str	r2, [sp, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	bfb8      	it	lt
 8007154:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007158:	3402      	adds	r4, #2
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007228 <_svfiprintf_r+0x1fc>
 8007160:	7821      	ldrb	r1, [r4, #0]
 8007162:	2203      	movs	r2, #3
 8007164:	4650      	mov	r0, sl
 8007166:	f7f9 f84b 	bl	8000200 <memchr>
 800716a:	b140      	cbz	r0, 800717e <_svfiprintf_r+0x152>
 800716c:	2340      	movs	r3, #64	; 0x40
 800716e:	eba0 000a 	sub.w	r0, r0, sl
 8007172:	fa03 f000 	lsl.w	r0, r3, r0
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	4303      	orrs	r3, r0
 800717a:	3401      	adds	r4, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007182:	4826      	ldr	r0, [pc, #152]	; (800721c <_svfiprintf_r+0x1f0>)
 8007184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007188:	2206      	movs	r2, #6
 800718a:	f7f9 f839 	bl	8000200 <memchr>
 800718e:	2800      	cmp	r0, #0
 8007190:	d038      	beq.n	8007204 <_svfiprintf_r+0x1d8>
 8007192:	4b23      	ldr	r3, [pc, #140]	; (8007220 <_svfiprintf_r+0x1f4>)
 8007194:	bb1b      	cbnz	r3, 80071de <_svfiprintf_r+0x1b2>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	3307      	adds	r3, #7
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	3308      	adds	r3, #8
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a4:	4433      	add	r3, r6
 80071a6:	9309      	str	r3, [sp, #36]	; 0x24
 80071a8:	e767      	b.n	800707a <_svfiprintf_r+0x4e>
 80071aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ae:	460c      	mov	r4, r1
 80071b0:	2001      	movs	r0, #1
 80071b2:	e7a5      	b.n	8007100 <_svfiprintf_r+0xd4>
 80071b4:	2300      	movs	r3, #0
 80071b6:	3401      	adds	r4, #1
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	4619      	mov	r1, r3
 80071bc:	f04f 0c0a 	mov.w	ip, #10
 80071c0:	4620      	mov	r0, r4
 80071c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c6:	3a30      	subs	r2, #48	; 0x30
 80071c8:	2a09      	cmp	r2, #9
 80071ca:	d903      	bls.n	80071d4 <_svfiprintf_r+0x1a8>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0c5      	beq.n	800715c <_svfiprintf_r+0x130>
 80071d0:	9105      	str	r1, [sp, #20]
 80071d2:	e7c3      	b.n	800715c <_svfiprintf_r+0x130>
 80071d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d8:	4604      	mov	r4, r0
 80071da:	2301      	movs	r3, #1
 80071dc:	e7f0      	b.n	80071c0 <_svfiprintf_r+0x194>
 80071de:	ab03      	add	r3, sp, #12
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	462a      	mov	r2, r5
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <_svfiprintf_r+0x1f8>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7fc f9ad 	bl	8003548 <_printf_float>
 80071ee:	1c42      	adds	r2, r0, #1
 80071f0:	4606      	mov	r6, r0
 80071f2:	d1d6      	bne.n	80071a2 <_svfiprintf_r+0x176>
 80071f4:	89ab      	ldrh	r3, [r5, #12]
 80071f6:	065b      	lsls	r3, r3, #25
 80071f8:	f53f af2c 	bmi.w	8007054 <_svfiprintf_r+0x28>
 80071fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071fe:	b01d      	add	sp, #116	; 0x74
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	462a      	mov	r2, r5
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <_svfiprintf_r+0x1f8>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	4638      	mov	r0, r7
 8007210:	f7fc fc3e 	bl	8003a90 <_printf_i>
 8007214:	e7eb      	b.n	80071ee <_svfiprintf_r+0x1c2>
 8007216:	bf00      	nop
 8007218:	08008a84 	.word	0x08008a84
 800721c:	08008a8e 	.word	0x08008a8e
 8007220:	08003549 	.word	0x08003549
 8007224:	08006f75 	.word	0x08006f75
 8007228:	08008a8a 	.word	0x08008a8a

0800722c <_sungetc_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	1c4b      	adds	r3, r1, #1
 8007230:	4614      	mov	r4, r2
 8007232:	d103      	bne.n	800723c <_sungetc_r+0x10>
 8007234:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007238:	4628      	mov	r0, r5
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	8993      	ldrh	r3, [r2, #12]
 800723e:	f023 0320 	bic.w	r3, r3, #32
 8007242:	8193      	strh	r3, [r2, #12]
 8007244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007246:	6852      	ldr	r2, [r2, #4]
 8007248:	b2cd      	uxtb	r5, r1
 800724a:	b18b      	cbz	r3, 8007270 <_sungetc_r+0x44>
 800724c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800724e:	4293      	cmp	r3, r2
 8007250:	dd08      	ble.n	8007264 <_sungetc_r+0x38>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	f803 5c01 	strb.w	r5, [r3, #-1]
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	3301      	adds	r3, #1
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	e7e9      	b.n	8007238 <_sungetc_r+0xc>
 8007264:	4621      	mov	r1, r4
 8007266:	f000 fbf5 	bl	8007a54 <__submore>
 800726a:	2800      	cmp	r0, #0
 800726c:	d0f1      	beq.n	8007252 <_sungetc_r+0x26>
 800726e:	e7e1      	b.n	8007234 <_sungetc_r+0x8>
 8007270:	6921      	ldr	r1, [r4, #16]
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	b151      	cbz	r1, 800728c <_sungetc_r+0x60>
 8007276:	4299      	cmp	r1, r3
 8007278:	d208      	bcs.n	800728c <_sungetc_r+0x60>
 800727a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800727e:	42a9      	cmp	r1, r5
 8007280:	d104      	bne.n	800728c <_sungetc_r+0x60>
 8007282:	3b01      	subs	r3, #1
 8007284:	3201      	adds	r2, #1
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	6062      	str	r2, [r4, #4]
 800728a:	e7d5      	b.n	8007238 <_sungetc_r+0xc>
 800728c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007294:	6363      	str	r3, [r4, #52]	; 0x34
 8007296:	2303      	movs	r3, #3
 8007298:	63a3      	str	r3, [r4, #56]	; 0x38
 800729a:	4623      	mov	r3, r4
 800729c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	2301      	movs	r3, #1
 80072a4:	e7dc      	b.n	8007260 <_sungetc_r+0x34>

080072a6 <__ssrefill_r>:
 80072a6:	b510      	push	{r4, lr}
 80072a8:	460c      	mov	r4, r1
 80072aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80072ac:	b169      	cbz	r1, 80072ca <__ssrefill_r+0x24>
 80072ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072b2:	4299      	cmp	r1, r3
 80072b4:	d001      	beq.n	80072ba <__ssrefill_r+0x14>
 80072b6:	f7ff fdb3 	bl	8006e20 <_free_r>
 80072ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072bc:	6063      	str	r3, [r4, #4]
 80072be:	2000      	movs	r0, #0
 80072c0:	6360      	str	r0, [r4, #52]	; 0x34
 80072c2:	b113      	cbz	r3, 80072ca <__ssrefill_r+0x24>
 80072c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	bd10      	pop	{r4, pc}
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	6063      	str	r3, [r4, #4]
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	81a3      	strh	r3, [r4, #12]
 80072da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072de:	e7f3      	b.n	80072c8 <__ssrefill_r+0x22>

080072e0 <__ssvfiscanf_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	460c      	mov	r4, r1
 80072e6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80072ea:	2100      	movs	r1, #0
 80072ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80072f0:	49b2      	ldr	r1, [pc, #712]	; (80075bc <__ssvfiscanf_r+0x2dc>)
 80072f2:	91a0      	str	r1, [sp, #640]	; 0x280
 80072f4:	f10d 0804 	add.w	r8, sp, #4
 80072f8:	49b1      	ldr	r1, [pc, #708]	; (80075c0 <__ssvfiscanf_r+0x2e0>)
 80072fa:	4fb2      	ldr	r7, [pc, #712]	; (80075c4 <__ssvfiscanf_r+0x2e4>)
 80072fc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80075c8 <__ssvfiscanf_r+0x2e8>
 8007300:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007304:	4606      	mov	r6, r0
 8007306:	91a1      	str	r1, [sp, #644]	; 0x284
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	f892 a000 	ldrb.w	sl, [r2]
 800730e:	f1ba 0f00 	cmp.w	sl, #0
 8007312:	f000 8151 	beq.w	80075b8 <__ssvfiscanf_r+0x2d8>
 8007316:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800731a:	f013 0308 	ands.w	r3, r3, #8
 800731e:	f102 0501 	add.w	r5, r2, #1
 8007322:	d019      	beq.n	8007358 <__ssvfiscanf_r+0x78>
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	dd0f      	ble.n	800734a <__ssvfiscanf_r+0x6a>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	5cba      	ldrb	r2, [r7, r2]
 8007330:	0712      	lsls	r2, r2, #28
 8007332:	d401      	bmi.n	8007338 <__ssvfiscanf_r+0x58>
 8007334:	462a      	mov	r2, r5
 8007336:	e7e8      	b.n	800730a <__ssvfiscanf_r+0x2a>
 8007338:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800733a:	3201      	adds	r2, #1
 800733c:	9245      	str	r2, [sp, #276]	; 0x114
 800733e:	6862      	ldr	r2, [r4, #4]
 8007340:	3301      	adds	r3, #1
 8007342:	3a01      	subs	r2, #1
 8007344:	6062      	str	r2, [r4, #4]
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	e7ec      	b.n	8007324 <__ssvfiscanf_r+0x44>
 800734a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800734c:	4621      	mov	r1, r4
 800734e:	4630      	mov	r0, r6
 8007350:	4798      	blx	r3
 8007352:	2800      	cmp	r0, #0
 8007354:	d0e9      	beq.n	800732a <__ssvfiscanf_r+0x4a>
 8007356:	e7ed      	b.n	8007334 <__ssvfiscanf_r+0x54>
 8007358:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800735c:	f040 8083 	bne.w	8007466 <__ssvfiscanf_r+0x186>
 8007360:	9341      	str	r3, [sp, #260]	; 0x104
 8007362:	9343      	str	r3, [sp, #268]	; 0x10c
 8007364:	7853      	ldrb	r3, [r2, #1]
 8007366:	2b2a      	cmp	r3, #42	; 0x2a
 8007368:	bf02      	ittt	eq
 800736a:	2310      	moveq	r3, #16
 800736c:	1c95      	addeq	r5, r2, #2
 800736e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007370:	220a      	movs	r2, #10
 8007372:	46ab      	mov	fp, r5
 8007374:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007378:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800737c:	2b09      	cmp	r3, #9
 800737e:	d91d      	bls.n	80073bc <__ssvfiscanf_r+0xdc>
 8007380:	4891      	ldr	r0, [pc, #580]	; (80075c8 <__ssvfiscanf_r+0x2e8>)
 8007382:	2203      	movs	r2, #3
 8007384:	f7f8 ff3c 	bl	8000200 <memchr>
 8007388:	b140      	cbz	r0, 800739c <__ssvfiscanf_r+0xbc>
 800738a:	2301      	movs	r3, #1
 800738c:	eba0 0009 	sub.w	r0, r0, r9
 8007390:	fa03 f000 	lsl.w	r0, r3, r0
 8007394:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007396:	4318      	orrs	r0, r3
 8007398:	9041      	str	r0, [sp, #260]	; 0x104
 800739a:	465d      	mov	r5, fp
 800739c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073a0:	2b78      	cmp	r3, #120	; 0x78
 80073a2:	d806      	bhi.n	80073b2 <__ssvfiscanf_r+0xd2>
 80073a4:	2b57      	cmp	r3, #87	; 0x57
 80073a6:	d810      	bhi.n	80073ca <__ssvfiscanf_r+0xea>
 80073a8:	2b25      	cmp	r3, #37	; 0x25
 80073aa:	d05c      	beq.n	8007466 <__ssvfiscanf_r+0x186>
 80073ac:	d856      	bhi.n	800745c <__ssvfiscanf_r+0x17c>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d074      	beq.n	800749c <__ssvfiscanf_r+0x1bc>
 80073b2:	2303      	movs	r3, #3
 80073b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80073b6:	230a      	movs	r3, #10
 80073b8:	9342      	str	r3, [sp, #264]	; 0x108
 80073ba:	e081      	b.n	80074c0 <__ssvfiscanf_r+0x1e0>
 80073bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80073be:	fb02 1303 	mla	r3, r2, r3, r1
 80073c2:	3b30      	subs	r3, #48	; 0x30
 80073c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80073c6:	465d      	mov	r5, fp
 80073c8:	e7d3      	b.n	8007372 <__ssvfiscanf_r+0x92>
 80073ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80073ce:	2a20      	cmp	r2, #32
 80073d0:	d8ef      	bhi.n	80073b2 <__ssvfiscanf_r+0xd2>
 80073d2:	a101      	add	r1, pc, #4	; (adr r1, 80073d8 <__ssvfiscanf_r+0xf8>)
 80073d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073d8:	080074ab 	.word	0x080074ab
 80073dc:	080073b3 	.word	0x080073b3
 80073e0:	080073b3 	.word	0x080073b3
 80073e4:	08007509 	.word	0x08007509
 80073e8:	080073b3 	.word	0x080073b3
 80073ec:	080073b3 	.word	0x080073b3
 80073f0:	080073b3 	.word	0x080073b3
 80073f4:	080073b3 	.word	0x080073b3
 80073f8:	080073b3 	.word	0x080073b3
 80073fc:	080073b3 	.word	0x080073b3
 8007400:	080073b3 	.word	0x080073b3
 8007404:	0800751f 	.word	0x0800751f
 8007408:	080074f5 	.word	0x080074f5
 800740c:	08007463 	.word	0x08007463
 8007410:	08007463 	.word	0x08007463
 8007414:	08007463 	.word	0x08007463
 8007418:	080073b3 	.word	0x080073b3
 800741c:	080074f9 	.word	0x080074f9
 8007420:	080073b3 	.word	0x080073b3
 8007424:	080073b3 	.word	0x080073b3
 8007428:	080073b3 	.word	0x080073b3
 800742c:	080073b3 	.word	0x080073b3
 8007430:	0800752f 	.word	0x0800752f
 8007434:	08007501 	.word	0x08007501
 8007438:	080074a3 	.word	0x080074a3
 800743c:	080073b3 	.word	0x080073b3
 8007440:	080073b3 	.word	0x080073b3
 8007444:	0800752b 	.word	0x0800752b
 8007448:	080073b3 	.word	0x080073b3
 800744c:	080074f5 	.word	0x080074f5
 8007450:	080073b3 	.word	0x080073b3
 8007454:	080073b3 	.word	0x080073b3
 8007458:	080074ab 	.word	0x080074ab
 800745c:	3b45      	subs	r3, #69	; 0x45
 800745e:	2b02      	cmp	r3, #2
 8007460:	d8a7      	bhi.n	80073b2 <__ssvfiscanf_r+0xd2>
 8007462:	2305      	movs	r3, #5
 8007464:	e02b      	b.n	80074be <__ssvfiscanf_r+0x1de>
 8007466:	6863      	ldr	r3, [r4, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dd0d      	ble.n	8007488 <__ssvfiscanf_r+0x1a8>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	4552      	cmp	r2, sl
 8007472:	f040 80a1 	bne.w	80075b8 <__ssvfiscanf_r+0x2d8>
 8007476:	3301      	adds	r3, #1
 8007478:	6862      	ldr	r2, [r4, #4]
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800747e:	3a01      	subs	r2, #1
 8007480:	3301      	adds	r3, #1
 8007482:	6062      	str	r2, [r4, #4]
 8007484:	9345      	str	r3, [sp, #276]	; 0x114
 8007486:	e755      	b.n	8007334 <__ssvfiscanf_r+0x54>
 8007488:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800748a:	4621      	mov	r1, r4
 800748c:	4630      	mov	r0, r6
 800748e:	4798      	blx	r3
 8007490:	2800      	cmp	r0, #0
 8007492:	d0eb      	beq.n	800746c <__ssvfiscanf_r+0x18c>
 8007494:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007496:	2800      	cmp	r0, #0
 8007498:	f040 8084 	bne.w	80075a4 <__ssvfiscanf_r+0x2c4>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a0:	e086      	b.n	80075b0 <__ssvfiscanf_r+0x2d0>
 80074a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80074a4:	f042 0220 	orr.w	r2, r2, #32
 80074a8:	9241      	str	r2, [sp, #260]	; 0x104
 80074aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80074ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b0:	9241      	str	r2, [sp, #260]	; 0x104
 80074b2:	2210      	movs	r2, #16
 80074b4:	2b6f      	cmp	r3, #111	; 0x6f
 80074b6:	9242      	str	r2, [sp, #264]	; 0x108
 80074b8:	bf34      	ite	cc
 80074ba:	2303      	movcc	r3, #3
 80074bc:	2304      	movcs	r3, #4
 80074be:	9347      	str	r3, [sp, #284]	; 0x11c
 80074c0:	6863      	ldr	r3, [r4, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	dd41      	ble.n	800754a <__ssvfiscanf_r+0x26a>
 80074c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80074c8:	0659      	lsls	r1, r3, #25
 80074ca:	d404      	bmi.n	80074d6 <__ssvfiscanf_r+0x1f6>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	5cba      	ldrb	r2, [r7, r2]
 80074d2:	0712      	lsls	r2, r2, #28
 80074d4:	d440      	bmi.n	8007558 <__ssvfiscanf_r+0x278>
 80074d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80074d8:	2b02      	cmp	r3, #2
 80074da:	dc4f      	bgt.n	800757c <__ssvfiscanf_r+0x29c>
 80074dc:	466b      	mov	r3, sp
 80074de:	4622      	mov	r2, r4
 80074e0:	a941      	add	r1, sp, #260	; 0x104
 80074e2:	4630      	mov	r0, r6
 80074e4:	f000 f874 	bl	80075d0 <_scanf_chars>
 80074e8:	2801      	cmp	r0, #1
 80074ea:	d065      	beq.n	80075b8 <__ssvfiscanf_r+0x2d8>
 80074ec:	2802      	cmp	r0, #2
 80074ee:	f47f af21 	bne.w	8007334 <__ssvfiscanf_r+0x54>
 80074f2:	e7cf      	b.n	8007494 <__ssvfiscanf_r+0x1b4>
 80074f4:	220a      	movs	r2, #10
 80074f6:	e7dd      	b.n	80074b4 <__ssvfiscanf_r+0x1d4>
 80074f8:	2300      	movs	r3, #0
 80074fa:	9342      	str	r3, [sp, #264]	; 0x108
 80074fc:	2303      	movs	r3, #3
 80074fe:	e7de      	b.n	80074be <__ssvfiscanf_r+0x1de>
 8007500:	2308      	movs	r3, #8
 8007502:	9342      	str	r3, [sp, #264]	; 0x108
 8007504:	2304      	movs	r3, #4
 8007506:	e7da      	b.n	80074be <__ssvfiscanf_r+0x1de>
 8007508:	4629      	mov	r1, r5
 800750a:	4640      	mov	r0, r8
 800750c:	f000 f9d8 	bl	80078c0 <__sccl>
 8007510:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007516:	9341      	str	r3, [sp, #260]	; 0x104
 8007518:	4605      	mov	r5, r0
 800751a:	2301      	movs	r3, #1
 800751c:	e7cf      	b.n	80074be <__ssvfiscanf_r+0x1de>
 800751e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007524:	9341      	str	r3, [sp, #260]	; 0x104
 8007526:	2300      	movs	r3, #0
 8007528:	e7c9      	b.n	80074be <__ssvfiscanf_r+0x1de>
 800752a:	2302      	movs	r3, #2
 800752c:	e7c7      	b.n	80074be <__ssvfiscanf_r+0x1de>
 800752e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007530:	06c3      	lsls	r3, r0, #27
 8007532:	f53f aeff 	bmi.w	8007334 <__ssvfiscanf_r+0x54>
 8007536:	9b00      	ldr	r3, [sp, #0]
 8007538:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800753a:	1d19      	adds	r1, r3, #4
 800753c:	9100      	str	r1, [sp, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	07c0      	lsls	r0, r0, #31
 8007542:	bf4c      	ite	mi
 8007544:	801a      	strhmi	r2, [r3, #0]
 8007546:	601a      	strpl	r2, [r3, #0]
 8007548:	e6f4      	b.n	8007334 <__ssvfiscanf_r+0x54>
 800754a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800754c:	4621      	mov	r1, r4
 800754e:	4630      	mov	r0, r6
 8007550:	4798      	blx	r3
 8007552:	2800      	cmp	r0, #0
 8007554:	d0b7      	beq.n	80074c6 <__ssvfiscanf_r+0x1e6>
 8007556:	e79d      	b.n	8007494 <__ssvfiscanf_r+0x1b4>
 8007558:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800755a:	3201      	adds	r2, #1
 800755c:	9245      	str	r2, [sp, #276]	; 0x114
 800755e:	6862      	ldr	r2, [r4, #4]
 8007560:	3a01      	subs	r2, #1
 8007562:	2a00      	cmp	r2, #0
 8007564:	6062      	str	r2, [r4, #4]
 8007566:	dd02      	ble.n	800756e <__ssvfiscanf_r+0x28e>
 8007568:	3301      	adds	r3, #1
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	e7ae      	b.n	80074cc <__ssvfiscanf_r+0x1ec>
 800756e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007570:	4621      	mov	r1, r4
 8007572:	4630      	mov	r0, r6
 8007574:	4798      	blx	r3
 8007576:	2800      	cmp	r0, #0
 8007578:	d0a8      	beq.n	80074cc <__ssvfiscanf_r+0x1ec>
 800757a:	e78b      	b.n	8007494 <__ssvfiscanf_r+0x1b4>
 800757c:	2b04      	cmp	r3, #4
 800757e:	dc06      	bgt.n	800758e <__ssvfiscanf_r+0x2ae>
 8007580:	466b      	mov	r3, sp
 8007582:	4622      	mov	r2, r4
 8007584:	a941      	add	r1, sp, #260	; 0x104
 8007586:	4630      	mov	r0, r6
 8007588:	f000 f87a 	bl	8007680 <_scanf_i>
 800758c:	e7ac      	b.n	80074e8 <__ssvfiscanf_r+0x208>
 800758e:	4b0f      	ldr	r3, [pc, #60]	; (80075cc <__ssvfiscanf_r+0x2ec>)
 8007590:	2b00      	cmp	r3, #0
 8007592:	f43f aecf 	beq.w	8007334 <__ssvfiscanf_r+0x54>
 8007596:	466b      	mov	r3, sp
 8007598:	4622      	mov	r2, r4
 800759a:	a941      	add	r1, sp, #260	; 0x104
 800759c:	4630      	mov	r0, r6
 800759e:	f7fc fb9d 	bl	8003cdc <_scanf_float>
 80075a2:	e7a1      	b.n	80074e8 <__ssvfiscanf_r+0x208>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075aa:	bf18      	it	ne
 80075ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80075b0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80075b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80075ba:	e7f9      	b.n	80075b0 <__ssvfiscanf_r+0x2d0>
 80075bc:	0800722d 	.word	0x0800722d
 80075c0:	080072a7 	.word	0x080072a7
 80075c4:	08008711 	.word	0x08008711
 80075c8:	08008a8a 	.word	0x08008a8a
 80075cc:	08003cdd 	.word	0x08003cdd

080075d0 <_scanf_chars>:
 80075d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d4:	4615      	mov	r5, r2
 80075d6:	688a      	ldr	r2, [r1, #8]
 80075d8:	4680      	mov	r8, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	b932      	cbnz	r2, 80075ec <_scanf_chars+0x1c>
 80075de:	698a      	ldr	r2, [r1, #24]
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	bf0c      	ite	eq
 80075e4:	2201      	moveq	r2, #1
 80075e6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80075ea:	608a      	str	r2, [r1, #8]
 80075ec:	6822      	ldr	r2, [r4, #0]
 80075ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800767c <_scanf_chars+0xac>
 80075f2:	06d1      	lsls	r1, r2, #27
 80075f4:	bf5f      	itttt	pl
 80075f6:	681a      	ldrpl	r2, [r3, #0]
 80075f8:	1d11      	addpl	r1, r2, #4
 80075fa:	6019      	strpl	r1, [r3, #0]
 80075fc:	6816      	ldrpl	r6, [r2, #0]
 80075fe:	2700      	movs	r7, #0
 8007600:	69a0      	ldr	r0, [r4, #24]
 8007602:	b188      	cbz	r0, 8007628 <_scanf_chars+0x58>
 8007604:	2801      	cmp	r0, #1
 8007606:	d107      	bne.n	8007618 <_scanf_chars+0x48>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	6963      	ldr	r3, [r4, #20]
 800760e:	5c9b      	ldrb	r3, [r3, r2]
 8007610:	b953      	cbnz	r3, 8007628 <_scanf_chars+0x58>
 8007612:	bb27      	cbnz	r7, 800765e <_scanf_chars+0x8e>
 8007614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007618:	2802      	cmp	r0, #2
 800761a:	d120      	bne.n	800765e <_scanf_chars+0x8e>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007624:	071b      	lsls	r3, r3, #28
 8007626:	d41a      	bmi.n	800765e <_scanf_chars+0x8e>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	06da      	lsls	r2, r3, #27
 800762c:	bf5e      	ittt	pl
 800762e:	682b      	ldrpl	r3, [r5, #0]
 8007630:	781b      	ldrbpl	r3, [r3, #0]
 8007632:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007636:	682a      	ldr	r2, [r5, #0]
 8007638:	686b      	ldr	r3, [r5, #4]
 800763a:	3201      	adds	r2, #1
 800763c:	602a      	str	r2, [r5, #0]
 800763e:	68a2      	ldr	r2, [r4, #8]
 8007640:	3b01      	subs	r3, #1
 8007642:	3a01      	subs	r2, #1
 8007644:	606b      	str	r3, [r5, #4]
 8007646:	3701      	adds	r7, #1
 8007648:	60a2      	str	r2, [r4, #8]
 800764a:	b142      	cbz	r2, 800765e <_scanf_chars+0x8e>
 800764c:	2b00      	cmp	r3, #0
 800764e:	dcd7      	bgt.n	8007600 <_scanf_chars+0x30>
 8007650:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007654:	4629      	mov	r1, r5
 8007656:	4640      	mov	r0, r8
 8007658:	4798      	blx	r3
 800765a:	2800      	cmp	r0, #0
 800765c:	d0d0      	beq.n	8007600 <_scanf_chars+0x30>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	f013 0310 	ands.w	r3, r3, #16
 8007664:	d105      	bne.n	8007672 <_scanf_chars+0xa2>
 8007666:	68e2      	ldr	r2, [r4, #12]
 8007668:	3201      	adds	r2, #1
 800766a:	60e2      	str	r2, [r4, #12]
 800766c:	69a2      	ldr	r2, [r4, #24]
 800766e:	b102      	cbz	r2, 8007672 <_scanf_chars+0xa2>
 8007670:	7033      	strb	r3, [r6, #0]
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	441f      	add	r7, r3
 8007676:	6127      	str	r7, [r4, #16]
 8007678:	2000      	movs	r0, #0
 800767a:	e7cb      	b.n	8007614 <_scanf_chars+0x44>
 800767c:	08008711 	.word	0x08008711

08007680 <_scanf_i>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	4698      	mov	r8, r3
 8007686:	4b74      	ldr	r3, [pc, #464]	; (8007858 <_scanf_i+0x1d8>)
 8007688:	460c      	mov	r4, r1
 800768a:	4682      	mov	sl, r0
 800768c:	4616      	mov	r6, r2
 800768e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007692:	b087      	sub	sp, #28
 8007694:	ab03      	add	r3, sp, #12
 8007696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800769a:	4b70      	ldr	r3, [pc, #448]	; (800785c <_scanf_i+0x1dc>)
 800769c:	69a1      	ldr	r1, [r4, #24]
 800769e:	4a70      	ldr	r2, [pc, #448]	; (8007860 <_scanf_i+0x1e0>)
 80076a0:	2903      	cmp	r1, #3
 80076a2:	bf18      	it	ne
 80076a4:	461a      	movne	r2, r3
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	9201      	str	r2, [sp, #4]
 80076aa:	1e5a      	subs	r2, r3, #1
 80076ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80076b0:	bf88      	it	hi
 80076b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80076b6:	4627      	mov	r7, r4
 80076b8:	bf82      	ittt	hi
 80076ba:	eb03 0905 	addhi.w	r9, r3, r5
 80076be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80076c2:	60a3      	strhi	r3, [r4, #8]
 80076c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80076c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80076cc:	bf98      	it	ls
 80076ce:	f04f 0900 	movls.w	r9, #0
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	463d      	mov	r5, r7
 80076d6:	f04f 0b00 	mov.w	fp, #0
 80076da:	6831      	ldr	r1, [r6, #0]
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	7809      	ldrb	r1, [r1, #0]
 80076e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f7f8 fd8b 	bl	8000200 <memchr>
 80076ea:	b328      	cbz	r0, 8007738 <_scanf_i+0xb8>
 80076ec:	f1bb 0f01 	cmp.w	fp, #1
 80076f0:	d159      	bne.n	80077a6 <_scanf_i+0x126>
 80076f2:	6862      	ldr	r2, [r4, #4]
 80076f4:	b92a      	cbnz	r2, 8007702 <_scanf_i+0x82>
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	2308      	movs	r3, #8
 80076fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fe:	6063      	str	r3, [r4, #4]
 8007700:	6022      	str	r2, [r4, #0]
 8007702:	6822      	ldr	r2, [r4, #0]
 8007704:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007708:	6022      	str	r2, [r4, #0]
 800770a:	68a2      	ldr	r2, [r4, #8]
 800770c:	1e51      	subs	r1, r2, #1
 800770e:	60a1      	str	r1, [r4, #8]
 8007710:	b192      	cbz	r2, 8007738 <_scanf_i+0xb8>
 8007712:	6832      	ldr	r2, [r6, #0]
 8007714:	1c51      	adds	r1, r2, #1
 8007716:	6031      	str	r1, [r6, #0]
 8007718:	7812      	ldrb	r2, [r2, #0]
 800771a:	f805 2b01 	strb.w	r2, [r5], #1
 800771e:	6872      	ldr	r2, [r6, #4]
 8007720:	3a01      	subs	r2, #1
 8007722:	2a00      	cmp	r2, #0
 8007724:	6072      	str	r2, [r6, #4]
 8007726:	dc07      	bgt.n	8007738 <_scanf_i+0xb8>
 8007728:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800772c:	4631      	mov	r1, r6
 800772e:	4650      	mov	r0, sl
 8007730:	4790      	blx	r2
 8007732:	2800      	cmp	r0, #0
 8007734:	f040 8085 	bne.w	8007842 <_scanf_i+0x1c2>
 8007738:	f10b 0b01 	add.w	fp, fp, #1
 800773c:	f1bb 0f03 	cmp.w	fp, #3
 8007740:	d1cb      	bne.n	80076da <_scanf_i+0x5a>
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	b90b      	cbnz	r3, 800774a <_scanf_i+0xca>
 8007746:	230a      	movs	r3, #10
 8007748:	6063      	str	r3, [r4, #4]
 800774a:	6863      	ldr	r3, [r4, #4]
 800774c:	4945      	ldr	r1, [pc, #276]	; (8007864 <_scanf_i+0x1e4>)
 800774e:	6960      	ldr	r0, [r4, #20]
 8007750:	1ac9      	subs	r1, r1, r3
 8007752:	f000 f8b5 	bl	80078c0 <__sccl>
 8007756:	f04f 0b00 	mov.w	fp, #0
 800775a:	68a3      	ldr	r3, [r4, #8]
 800775c:	6822      	ldr	r2, [r4, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03d      	beq.n	80077de <_scanf_i+0x15e>
 8007762:	6831      	ldr	r1, [r6, #0]
 8007764:	6960      	ldr	r0, [r4, #20]
 8007766:	f891 c000 	ldrb.w	ip, [r1]
 800776a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800776e:	2800      	cmp	r0, #0
 8007770:	d035      	beq.n	80077de <_scanf_i+0x15e>
 8007772:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007776:	d124      	bne.n	80077c2 <_scanf_i+0x142>
 8007778:	0510      	lsls	r0, r2, #20
 800777a:	d522      	bpl.n	80077c2 <_scanf_i+0x142>
 800777c:	f10b 0b01 	add.w	fp, fp, #1
 8007780:	f1b9 0f00 	cmp.w	r9, #0
 8007784:	d003      	beq.n	800778e <_scanf_i+0x10e>
 8007786:	3301      	adds	r3, #1
 8007788:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800778c:	60a3      	str	r3, [r4, #8]
 800778e:	6873      	ldr	r3, [r6, #4]
 8007790:	3b01      	subs	r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	6073      	str	r3, [r6, #4]
 8007796:	dd1b      	ble.n	80077d0 <_scanf_i+0x150>
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	3301      	adds	r3, #1
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	68a3      	ldr	r3, [r4, #8]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	60a3      	str	r3, [r4, #8]
 80077a4:	e7d9      	b.n	800775a <_scanf_i+0xda>
 80077a6:	f1bb 0f02 	cmp.w	fp, #2
 80077aa:	d1ae      	bne.n	800770a <_scanf_i+0x8a>
 80077ac:	6822      	ldr	r2, [r4, #0]
 80077ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80077b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80077b6:	d1bf      	bne.n	8007738 <_scanf_i+0xb8>
 80077b8:	2310      	movs	r3, #16
 80077ba:	6063      	str	r3, [r4, #4]
 80077bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c0:	e7a2      	b.n	8007708 <_scanf_i+0x88>
 80077c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80077c6:	6022      	str	r2, [r4, #0]
 80077c8:	780b      	ldrb	r3, [r1, #0]
 80077ca:	f805 3b01 	strb.w	r3, [r5], #1
 80077ce:	e7de      	b.n	800778e <_scanf_i+0x10e>
 80077d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077d4:	4631      	mov	r1, r6
 80077d6:	4650      	mov	r0, sl
 80077d8:	4798      	blx	r3
 80077da:	2800      	cmp	r0, #0
 80077dc:	d0df      	beq.n	800779e <_scanf_i+0x11e>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	05d9      	lsls	r1, r3, #23
 80077e2:	d50d      	bpl.n	8007800 <_scanf_i+0x180>
 80077e4:	42bd      	cmp	r5, r7
 80077e6:	d909      	bls.n	80077fc <_scanf_i+0x17c>
 80077e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80077ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077f0:	4632      	mov	r2, r6
 80077f2:	4650      	mov	r0, sl
 80077f4:	4798      	blx	r3
 80077f6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80077fa:	464d      	mov	r5, r9
 80077fc:	42bd      	cmp	r5, r7
 80077fe:	d028      	beq.n	8007852 <_scanf_i+0x1d2>
 8007800:	6822      	ldr	r2, [r4, #0]
 8007802:	f012 0210 	ands.w	r2, r2, #16
 8007806:	d113      	bne.n	8007830 <_scanf_i+0x1b0>
 8007808:	702a      	strb	r2, [r5, #0]
 800780a:	6863      	ldr	r3, [r4, #4]
 800780c:	9e01      	ldr	r6, [sp, #4]
 800780e:	4639      	mov	r1, r7
 8007810:	4650      	mov	r0, sl
 8007812:	47b0      	blx	r6
 8007814:	f8d8 3000 	ldr.w	r3, [r8]
 8007818:	6821      	ldr	r1, [r4, #0]
 800781a:	1d1a      	adds	r2, r3, #4
 800781c:	f8c8 2000 	str.w	r2, [r8]
 8007820:	f011 0f20 	tst.w	r1, #32
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	d00f      	beq.n	8007848 <_scanf_i+0x1c8>
 8007828:	6018      	str	r0, [r3, #0]
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	3301      	adds	r3, #1
 800782e:	60e3      	str	r3, [r4, #12]
 8007830:	1bed      	subs	r5, r5, r7
 8007832:	44ab      	add	fp, r5
 8007834:	6925      	ldr	r5, [r4, #16]
 8007836:	445d      	add	r5, fp
 8007838:	6125      	str	r5, [r4, #16]
 800783a:	2000      	movs	r0, #0
 800783c:	b007      	add	sp, #28
 800783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007842:	f04f 0b00 	mov.w	fp, #0
 8007846:	e7ca      	b.n	80077de <_scanf_i+0x15e>
 8007848:	07ca      	lsls	r2, r1, #31
 800784a:	bf4c      	ite	mi
 800784c:	8018      	strhmi	r0, [r3, #0]
 800784e:	6018      	strpl	r0, [r3, #0]
 8007850:	e7eb      	b.n	800782a <_scanf_i+0x1aa>
 8007852:	2001      	movs	r0, #1
 8007854:	e7f2      	b.n	800783c <_scanf_i+0x1bc>
 8007856:	bf00      	nop
 8007858:	08008670 	.word	0x08008670
 800785c:	08007a51 	.word	0x08007a51
 8007860:	08004ff9 	.word	0x08004ff9
 8007864:	08008aae 	.word	0x08008aae

08007868 <_read_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	; (8007888 <_read_r+0x20>)
 800786c:	4604      	mov	r4, r0
 800786e:	4608      	mov	r0, r1
 8007870:	4611      	mov	r1, r2
 8007872:	2200      	movs	r2, #0
 8007874:	602a      	str	r2, [r5, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f7fa f88e 	bl	8001998 <_read>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_read_r+0x1e>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_read_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	200002b4 	.word	0x200002b4
 800788c:	00000000 	.word	0x00000000

08007890 <nan>:
 8007890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007898 <nan+0x8>
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	00000000 	.word	0x00000000
 800789c:	7ff80000 	.word	0x7ff80000

080078a0 <_sbrk_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d06      	ldr	r5, [pc, #24]	; (80078bc <_sbrk_r+0x1c>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7fa f8e2 	bl	8001a74 <_sbrk>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_sbrk_r+0x1a>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_sbrk_r+0x1a>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	200002b4 	.word	0x200002b4

080078c0 <__sccl>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	780b      	ldrb	r3, [r1, #0]
 80078c4:	4604      	mov	r4, r0
 80078c6:	2b5e      	cmp	r3, #94	; 0x5e
 80078c8:	bf0b      	itete	eq
 80078ca:	784b      	ldrbeq	r3, [r1, #1]
 80078cc:	1c48      	addne	r0, r1, #1
 80078ce:	1c88      	addeq	r0, r1, #2
 80078d0:	2200      	movne	r2, #0
 80078d2:	bf08      	it	eq
 80078d4:	2201      	moveq	r2, #1
 80078d6:	1e61      	subs	r1, r4, #1
 80078d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80078dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80078e0:	42a9      	cmp	r1, r5
 80078e2:	d1fb      	bne.n	80078dc <__sccl+0x1c>
 80078e4:	b90b      	cbnz	r3, 80078ea <__sccl+0x2a>
 80078e6:	3801      	subs	r0, #1
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	f082 0101 	eor.w	r1, r2, #1
 80078ee:	54e1      	strb	r1, [r4, r3]
 80078f0:	1c42      	adds	r2, r0, #1
 80078f2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80078f6:	2d2d      	cmp	r5, #45	; 0x2d
 80078f8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80078fc:	4610      	mov	r0, r2
 80078fe:	d006      	beq.n	800790e <__sccl+0x4e>
 8007900:	2d5d      	cmp	r5, #93	; 0x5d
 8007902:	d0f1      	beq.n	80078e8 <__sccl+0x28>
 8007904:	b90d      	cbnz	r5, 800790a <__sccl+0x4a>
 8007906:	4630      	mov	r0, r6
 8007908:	e7ee      	b.n	80078e8 <__sccl+0x28>
 800790a:	462b      	mov	r3, r5
 800790c:	e7ef      	b.n	80078ee <__sccl+0x2e>
 800790e:	7816      	ldrb	r6, [r2, #0]
 8007910:	2e5d      	cmp	r6, #93	; 0x5d
 8007912:	d0fa      	beq.n	800790a <__sccl+0x4a>
 8007914:	42b3      	cmp	r3, r6
 8007916:	dcf8      	bgt.n	800790a <__sccl+0x4a>
 8007918:	4618      	mov	r0, r3
 800791a:	3001      	adds	r0, #1
 800791c:	4286      	cmp	r6, r0
 800791e:	5421      	strb	r1, [r4, r0]
 8007920:	dcfb      	bgt.n	800791a <__sccl+0x5a>
 8007922:	43d8      	mvns	r0, r3
 8007924:	4430      	add	r0, r6
 8007926:	1c5d      	adds	r5, r3, #1
 8007928:	42b3      	cmp	r3, r6
 800792a:	bfa8      	it	ge
 800792c:	2000      	movge	r0, #0
 800792e:	182b      	adds	r3, r5, r0
 8007930:	3202      	adds	r2, #2
 8007932:	e7de      	b.n	80078f2 <__sccl+0x32>

08007934 <strncmp>:
 8007934:	b510      	push	{r4, lr}
 8007936:	b16a      	cbz	r2, 8007954 <strncmp+0x20>
 8007938:	3901      	subs	r1, #1
 800793a:	1884      	adds	r4, r0, r2
 800793c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007940:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007944:	4293      	cmp	r3, r2
 8007946:	d103      	bne.n	8007950 <strncmp+0x1c>
 8007948:	42a0      	cmp	r0, r4
 800794a:	d001      	beq.n	8007950 <strncmp+0x1c>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f5      	bne.n	800793c <strncmp+0x8>
 8007950:	1a98      	subs	r0, r3, r2
 8007952:	bd10      	pop	{r4, pc}
 8007954:	4610      	mov	r0, r2
 8007956:	e7fc      	b.n	8007952 <strncmp+0x1e>

08007958 <_strtoul_l.isra.0>:
 8007958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800795c:	4e3b      	ldr	r6, [pc, #236]	; (8007a4c <_strtoul_l.isra.0+0xf4>)
 800795e:	4686      	mov	lr, r0
 8007960:	468c      	mov	ip, r1
 8007962:	4660      	mov	r0, ip
 8007964:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007968:	5da5      	ldrb	r5, [r4, r6]
 800796a:	f015 0508 	ands.w	r5, r5, #8
 800796e:	d1f8      	bne.n	8007962 <_strtoul_l.isra.0+0xa>
 8007970:	2c2d      	cmp	r4, #45	; 0x2d
 8007972:	d134      	bne.n	80079de <_strtoul_l.isra.0+0x86>
 8007974:	f89c 4000 	ldrb.w	r4, [ip]
 8007978:	f04f 0801 	mov.w	r8, #1
 800797c:	f100 0c02 	add.w	ip, r0, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d05e      	beq.n	8007a42 <_strtoul_l.isra.0+0xea>
 8007984:	2b10      	cmp	r3, #16
 8007986:	d10c      	bne.n	80079a2 <_strtoul_l.isra.0+0x4a>
 8007988:	2c30      	cmp	r4, #48	; 0x30
 800798a:	d10a      	bne.n	80079a2 <_strtoul_l.isra.0+0x4a>
 800798c:	f89c 0000 	ldrb.w	r0, [ip]
 8007990:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007994:	2858      	cmp	r0, #88	; 0x58
 8007996:	d14f      	bne.n	8007a38 <_strtoul_l.isra.0+0xe0>
 8007998:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800799c:	2310      	movs	r3, #16
 800799e:	f10c 0c02 	add.w	ip, ip, #2
 80079a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80079a6:	2500      	movs	r5, #0
 80079a8:	fbb7 f7f3 	udiv	r7, r7, r3
 80079ac:	fb03 f907 	mul.w	r9, r3, r7
 80079b0:	ea6f 0909 	mvn.w	r9, r9
 80079b4:	4628      	mov	r0, r5
 80079b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80079ba:	2e09      	cmp	r6, #9
 80079bc:	d818      	bhi.n	80079f0 <_strtoul_l.isra.0+0x98>
 80079be:	4634      	mov	r4, r6
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	dd24      	ble.n	8007a0e <_strtoul_l.isra.0+0xb6>
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	db1f      	blt.n	8007a08 <_strtoul_l.isra.0+0xb0>
 80079c8:	4287      	cmp	r7, r0
 80079ca:	d31d      	bcc.n	8007a08 <_strtoul_l.isra.0+0xb0>
 80079cc:	d101      	bne.n	80079d2 <_strtoul_l.isra.0+0x7a>
 80079ce:	45a1      	cmp	r9, r4
 80079d0:	db1a      	blt.n	8007a08 <_strtoul_l.isra.0+0xb0>
 80079d2:	fb00 4003 	mla	r0, r0, r3, r4
 80079d6:	2501      	movs	r5, #1
 80079d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80079dc:	e7eb      	b.n	80079b6 <_strtoul_l.isra.0+0x5e>
 80079de:	2c2b      	cmp	r4, #43	; 0x2b
 80079e0:	bf08      	it	eq
 80079e2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80079e6:	46a8      	mov	r8, r5
 80079e8:	bf08      	it	eq
 80079ea:	f100 0c02 	addeq.w	ip, r0, #2
 80079ee:	e7c7      	b.n	8007980 <_strtoul_l.isra.0+0x28>
 80079f0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80079f4:	2e19      	cmp	r6, #25
 80079f6:	d801      	bhi.n	80079fc <_strtoul_l.isra.0+0xa4>
 80079f8:	3c37      	subs	r4, #55	; 0x37
 80079fa:	e7e1      	b.n	80079c0 <_strtoul_l.isra.0+0x68>
 80079fc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007a00:	2e19      	cmp	r6, #25
 8007a02:	d804      	bhi.n	8007a0e <_strtoul_l.isra.0+0xb6>
 8007a04:	3c57      	subs	r4, #87	; 0x57
 8007a06:	e7db      	b.n	80079c0 <_strtoul_l.isra.0+0x68>
 8007a08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a0c:	e7e4      	b.n	80079d8 <_strtoul_l.isra.0+0x80>
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	da07      	bge.n	8007a22 <_strtoul_l.isra.0+0xca>
 8007a12:	2322      	movs	r3, #34	; 0x22
 8007a14:	f8ce 3000 	str.w	r3, [lr]
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1c:	b942      	cbnz	r2, 8007a30 <_strtoul_l.isra.0+0xd8>
 8007a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a22:	f1b8 0f00 	cmp.w	r8, #0
 8007a26:	d000      	beq.n	8007a2a <_strtoul_l.isra.0+0xd2>
 8007a28:	4240      	negs	r0, r0
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d0f7      	beq.n	8007a1e <_strtoul_l.isra.0+0xc6>
 8007a2e:	b10d      	cbz	r5, 8007a34 <_strtoul_l.isra.0+0xdc>
 8007a30:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8007a34:	6011      	str	r1, [r2, #0]
 8007a36:	e7f2      	b.n	8007a1e <_strtoul_l.isra.0+0xc6>
 8007a38:	2430      	movs	r4, #48	; 0x30
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1b1      	bne.n	80079a2 <_strtoul_l.isra.0+0x4a>
 8007a3e:	2308      	movs	r3, #8
 8007a40:	e7af      	b.n	80079a2 <_strtoul_l.isra.0+0x4a>
 8007a42:	2c30      	cmp	r4, #48	; 0x30
 8007a44:	d0a2      	beq.n	800798c <_strtoul_l.isra.0+0x34>
 8007a46:	230a      	movs	r3, #10
 8007a48:	e7ab      	b.n	80079a2 <_strtoul_l.isra.0+0x4a>
 8007a4a:	bf00      	nop
 8007a4c:	08008711 	.word	0x08008711

08007a50 <_strtoul_r>:
 8007a50:	f7ff bf82 	b.w	8007958 <_strtoul_l.isra.0>

08007a54 <__submore>:
 8007a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a58:	460c      	mov	r4, r1
 8007a5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a60:	4299      	cmp	r1, r3
 8007a62:	d11d      	bne.n	8007aa0 <__submore+0x4c>
 8007a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a68:	f7ff fa2a 	bl	8006ec0 <_malloc_r>
 8007a6c:	b918      	cbnz	r0, 8007a76 <__submore+0x22>
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8007a7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007a80:	6360      	str	r0, [r4, #52]	; 0x34
 8007a82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007a86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007a8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007a96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007a9a:	6020      	str	r0, [r4, #0]
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	e7e8      	b.n	8007a72 <__submore+0x1e>
 8007aa0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007aa2:	0077      	lsls	r7, r6, #1
 8007aa4:	463a      	mov	r2, r7
 8007aa6:	f000 fa2d 	bl	8007f04 <_realloc_r>
 8007aaa:	4605      	mov	r5, r0
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0de      	beq.n	8007a6e <__submore+0x1a>
 8007ab0:	eb00 0806 	add.w	r8, r0, r6
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4632      	mov	r2, r6
 8007ab8:	4640      	mov	r0, r8
 8007aba:	f7fe fcd9 	bl	8006470 <memcpy>
 8007abe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007ac2:	f8c4 8000 	str.w	r8, [r4]
 8007ac6:	e7e9      	b.n	8007a9c <__submore+0x48>

08007ac8 <__ascii_wctomb>:
 8007ac8:	b149      	cbz	r1, 8007ade <__ascii_wctomb+0x16>
 8007aca:	2aff      	cmp	r2, #255	; 0xff
 8007acc:	bf85      	ittet	hi
 8007ace:	238a      	movhi	r3, #138	; 0x8a
 8007ad0:	6003      	strhi	r3, [r0, #0]
 8007ad2:	700a      	strbls	r2, [r1, #0]
 8007ad4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ad8:	bf98      	it	ls
 8007ada:	2001      	movls	r0, #1
 8007adc:	4770      	bx	lr
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4770      	bx	lr
	...

08007ae4 <__assert_func>:
 8007ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ae6:	4614      	mov	r4, r2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <__assert_func+0x2c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4605      	mov	r5, r0
 8007af0:	68d8      	ldr	r0, [r3, #12]
 8007af2:	b14c      	cbz	r4, 8007b08 <__assert_func+0x24>
 8007af4:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <__assert_func+0x30>)
 8007af6:	9100      	str	r1, [sp, #0]
 8007af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007afc:	4906      	ldr	r1, [pc, #24]	; (8007b18 <__assert_func+0x34>)
 8007afe:	462b      	mov	r3, r5
 8007b00:	f000 f9a6 	bl	8007e50 <fiprintf>
 8007b04:	f000 fc3e 	bl	8008384 <abort>
 8007b08:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <__assert_func+0x38>)
 8007b0a:	461c      	mov	r4, r3
 8007b0c:	e7f3      	b.n	8007af6 <__assert_func+0x12>
 8007b0e:	bf00      	nop
 8007b10:	20000010 	.word	0x20000010
 8007b14:	08008ab0 	.word	0x08008ab0
 8007b18:	08008abd 	.word	0x08008abd
 8007b1c:	08008aeb 	.word	0x08008aeb

08007b20 <__sflush_r>:
 8007b20:	898a      	ldrh	r2, [r1, #12]
 8007b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b26:	4605      	mov	r5, r0
 8007b28:	0710      	lsls	r0, r2, #28
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	d458      	bmi.n	8007be0 <__sflush_r+0xc0>
 8007b2e:	684b      	ldr	r3, [r1, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	dc05      	bgt.n	8007b40 <__sflush_r+0x20>
 8007b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc02      	bgt.n	8007b40 <__sflush_r+0x20>
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d0f9      	beq.n	8007b3a <__sflush_r+0x1a>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b4c:	682f      	ldr	r7, [r5, #0]
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	d032      	beq.n	8007bb8 <__sflush_r+0x98>
 8007b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	075a      	lsls	r2, r3, #29
 8007b58:	d505      	bpl.n	8007b66 <__sflush_r+0x46>
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	1ac0      	subs	r0, r0, r3
 8007b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b60:	b10b      	cbz	r3, 8007b66 <__sflush_r+0x46>
 8007b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b64:	1ac0      	subs	r0, r0, r3
 8007b66:	2300      	movs	r3, #0
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b0      	blx	r6
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	d106      	bne.n	8007b86 <__sflush_r+0x66>
 8007b78:	6829      	ldr	r1, [r5, #0]
 8007b7a:	291d      	cmp	r1, #29
 8007b7c:	d82c      	bhi.n	8007bd8 <__sflush_r+0xb8>
 8007b7e:	4a2a      	ldr	r2, [pc, #168]	; (8007c28 <__sflush_r+0x108>)
 8007b80:	40ca      	lsrs	r2, r1
 8007b82:	07d6      	lsls	r6, r2, #31
 8007b84:	d528      	bpl.n	8007bd8 <__sflush_r+0xb8>
 8007b86:	2200      	movs	r2, #0
 8007b88:	6062      	str	r2, [r4, #4]
 8007b8a:	04d9      	lsls	r1, r3, #19
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	6022      	str	r2, [r4, #0]
 8007b90:	d504      	bpl.n	8007b9c <__sflush_r+0x7c>
 8007b92:	1c42      	adds	r2, r0, #1
 8007b94:	d101      	bne.n	8007b9a <__sflush_r+0x7a>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	b903      	cbnz	r3, 8007b9c <__sflush_r+0x7c>
 8007b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9e:	602f      	str	r7, [r5, #0]
 8007ba0:	2900      	cmp	r1, #0
 8007ba2:	d0ca      	beq.n	8007b3a <__sflush_r+0x1a>
 8007ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	d002      	beq.n	8007bb2 <__sflush_r+0x92>
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7ff f937 	bl	8006e20 <_free_r>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8007bb6:	e7c1      	b.n	8007b3c <__sflush_r+0x1c>
 8007bb8:	6a21      	ldr	r1, [r4, #32]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b0      	blx	r6
 8007bc0:	1c41      	adds	r1, r0, #1
 8007bc2:	d1c7      	bne.n	8007b54 <__sflush_r+0x34>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0c4      	beq.n	8007b54 <__sflush_r+0x34>
 8007bca:	2b1d      	cmp	r3, #29
 8007bcc:	d001      	beq.n	8007bd2 <__sflush_r+0xb2>
 8007bce:	2b16      	cmp	r3, #22
 8007bd0:	d101      	bne.n	8007bd6 <__sflush_r+0xb6>
 8007bd2:	602f      	str	r7, [r5, #0]
 8007bd4:	e7b1      	b.n	8007b3a <__sflush_r+0x1a>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	e7ad      	b.n	8007b3c <__sflush_r+0x1c>
 8007be0:	690f      	ldr	r7, [r1, #16]
 8007be2:	2f00      	cmp	r7, #0
 8007be4:	d0a9      	beq.n	8007b3a <__sflush_r+0x1a>
 8007be6:	0793      	lsls	r3, r2, #30
 8007be8:	680e      	ldr	r6, [r1, #0]
 8007bea:	bf08      	it	eq
 8007bec:	694b      	ldreq	r3, [r1, #20]
 8007bee:	600f      	str	r7, [r1, #0]
 8007bf0:	bf18      	it	ne
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	eba6 0807 	sub.w	r8, r6, r7
 8007bf8:	608b      	str	r3, [r1, #8]
 8007bfa:	f1b8 0f00 	cmp.w	r8, #0
 8007bfe:	dd9c      	ble.n	8007b3a <__sflush_r+0x1a>
 8007c00:	6a21      	ldr	r1, [r4, #32]
 8007c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c04:	4643      	mov	r3, r8
 8007c06:	463a      	mov	r2, r7
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b0      	blx	r6
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	dc06      	bgt.n	8007c1e <__sflush_r+0xfe>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c1c:	e78e      	b.n	8007b3c <__sflush_r+0x1c>
 8007c1e:	4407      	add	r7, r0
 8007c20:	eba8 0800 	sub.w	r8, r8, r0
 8007c24:	e7e9      	b.n	8007bfa <__sflush_r+0xda>
 8007c26:	bf00      	nop
 8007c28:	20400001 	.word	0x20400001

08007c2c <_fflush_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	690b      	ldr	r3, [r1, #16]
 8007c30:	4605      	mov	r5, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	b913      	cbnz	r3, 8007c3c <_fflush_r+0x10>
 8007c36:	2500      	movs	r5, #0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	b118      	cbz	r0, 8007c46 <_fflush_r+0x1a>
 8007c3e:	6983      	ldr	r3, [r0, #24]
 8007c40:	b90b      	cbnz	r3, 8007c46 <_fflush_r+0x1a>
 8007c42:	f000 f887 	bl	8007d54 <__sinit>
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <_fflush_r+0x6c>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	d11b      	bne.n	8007c84 <_fflush_r+0x58>
 8007c4c:	686c      	ldr	r4, [r5, #4]
 8007c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0ef      	beq.n	8007c36 <_fflush_r+0xa>
 8007c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c58:	07d0      	lsls	r0, r2, #31
 8007c5a:	d404      	bmi.n	8007c66 <_fflush_r+0x3a>
 8007c5c:	0599      	lsls	r1, r3, #22
 8007c5e:	d402      	bmi.n	8007c66 <_fflush_r+0x3a>
 8007c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c62:	f000 f927 	bl	8007eb4 <__retarget_lock_acquire_recursive>
 8007c66:	4628      	mov	r0, r5
 8007c68:	4621      	mov	r1, r4
 8007c6a:	f7ff ff59 	bl	8007b20 <__sflush_r>
 8007c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c70:	07da      	lsls	r2, r3, #31
 8007c72:	4605      	mov	r5, r0
 8007c74:	d4e0      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	059b      	lsls	r3, r3, #22
 8007c7a:	d4dd      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c7e:	f000 f91a 	bl	8007eb6 <__retarget_lock_release_recursive>
 8007c82:	e7d9      	b.n	8007c38 <_fflush_r+0xc>
 8007c84:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <_fflush_r+0x70>)
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d101      	bne.n	8007c8e <_fflush_r+0x62>
 8007c8a:	68ac      	ldr	r4, [r5, #8]
 8007c8c:	e7df      	b.n	8007c4e <_fflush_r+0x22>
 8007c8e:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <_fflush_r+0x74>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	bf08      	it	eq
 8007c94:	68ec      	ldreq	r4, [r5, #12]
 8007c96:	e7da      	b.n	8007c4e <_fflush_r+0x22>
 8007c98:	08008b0c 	.word	0x08008b0c
 8007c9c:	08008b2c 	.word	0x08008b2c
 8007ca0:	08008aec 	.word	0x08008aec

08007ca4 <std>:
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	4604      	mov	r4, r0
 8007caa:	e9c0 3300 	strd	r3, r3, [r0]
 8007cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cb2:	6083      	str	r3, [r0, #8]
 8007cb4:	8181      	strh	r1, [r0, #12]
 8007cb6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cb8:	81c2      	strh	r2, [r0, #14]
 8007cba:	6183      	str	r3, [r0, #24]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	305c      	adds	r0, #92	; 0x5c
 8007cc2:	f7fb fb99 	bl	80033f8 <memset>
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <std+0x38>)
 8007cc8:	6263      	str	r3, [r4, #36]	; 0x24
 8007cca:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <std+0x3c>)
 8007ccc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <std+0x40>)
 8007cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <std+0x44>)
 8007cd4:	6224      	str	r4, [r4, #32]
 8007cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	bf00      	nop
 8007cdc:	08004209 	.word	0x08004209
 8007ce0:	0800422f 	.word	0x0800422f
 8007ce4:	08004267 	.word	0x08004267
 8007ce8:	0800428b 	.word	0x0800428b

08007cec <_cleanup_r>:
 8007cec:	4901      	ldr	r1, [pc, #4]	; (8007cf4 <_cleanup_r+0x8>)
 8007cee:	f000 b8c1 	b.w	8007e74 <_fwalk_reent>
 8007cf2:	bf00      	nop
 8007cf4:	08007c2d 	.word	0x08007c2d

08007cf8 <__sfmoreglue>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	1e4a      	subs	r2, r1, #1
 8007cfc:	2568      	movs	r5, #104	; 0x68
 8007cfe:	4355      	muls	r5, r2
 8007d00:	460e      	mov	r6, r1
 8007d02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d06:	f7ff f8db 	bl	8006ec0 <_malloc_r>
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	b140      	cbz	r0, 8007d20 <__sfmoreglue+0x28>
 8007d0e:	2100      	movs	r1, #0
 8007d10:	e9c0 1600 	strd	r1, r6, [r0]
 8007d14:	300c      	adds	r0, #12
 8007d16:	60a0      	str	r0, [r4, #8]
 8007d18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d1c:	f7fb fb6c 	bl	80033f8 <memset>
 8007d20:	4620      	mov	r0, r4
 8007d22:	bd70      	pop	{r4, r5, r6, pc}

08007d24 <__sfp_lock_acquire>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__sfp_lock_acquire+0x8>)
 8007d26:	f000 b8c5 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	200002c0 	.word	0x200002c0

08007d30 <__sfp_lock_release>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sfp_lock_release+0x8>)
 8007d32:	f000 b8c0 	b.w	8007eb6 <__retarget_lock_release_recursive>
 8007d36:	bf00      	nop
 8007d38:	200002c0 	.word	0x200002c0

08007d3c <__sinit_lock_acquire>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sinit_lock_acquire+0x8>)
 8007d3e:	f000 b8b9 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 8007d42:	bf00      	nop
 8007d44:	200002bb 	.word	0x200002bb

08007d48 <__sinit_lock_release>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__sinit_lock_release+0x8>)
 8007d4a:	f000 b8b4 	b.w	8007eb6 <__retarget_lock_release_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200002bb 	.word	0x200002bb

08007d54 <__sinit>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	4604      	mov	r4, r0
 8007d58:	f7ff fff0 	bl	8007d3c <__sinit_lock_acquire>
 8007d5c:	69a3      	ldr	r3, [r4, #24]
 8007d5e:	b11b      	cbz	r3, 8007d68 <__sinit+0x14>
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	f7ff bff0 	b.w	8007d48 <__sinit_lock_release>
 8007d68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <__sinit+0x68>)
 8007d70:	4a13      	ldr	r2, [pc, #76]	; (8007dc0 <__sinit+0x6c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	bf04      	itt	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	61a3      	streq	r3, [r4, #24]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 f820 	bl	8007dc4 <__sfp>
 8007d84:	6060      	str	r0, [r4, #4]
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 f81c 	bl	8007dc4 <__sfp>
 8007d8c:	60a0      	str	r0, [r4, #8]
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 f818 	bl	8007dc4 <__sfp>
 8007d94:	2200      	movs	r2, #0
 8007d96:	60e0      	str	r0, [r4, #12]
 8007d98:	2104      	movs	r1, #4
 8007d9a:	6860      	ldr	r0, [r4, #4]
 8007d9c:	f7ff ff82 	bl	8007ca4 <std>
 8007da0:	68a0      	ldr	r0, [r4, #8]
 8007da2:	2201      	movs	r2, #1
 8007da4:	2109      	movs	r1, #9
 8007da6:	f7ff ff7d 	bl	8007ca4 <std>
 8007daa:	68e0      	ldr	r0, [r4, #12]
 8007dac:	2202      	movs	r2, #2
 8007dae:	2112      	movs	r1, #18
 8007db0:	f7ff ff78 	bl	8007ca4 <std>
 8007db4:	2301      	movs	r3, #1
 8007db6:	61a3      	str	r3, [r4, #24]
 8007db8:	e7d2      	b.n	8007d60 <__sinit+0xc>
 8007dba:	bf00      	nop
 8007dbc:	08008684 	.word	0x08008684
 8007dc0:	08007ced 	.word	0x08007ced

08007dc4 <__sfp>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	f7ff ffac 	bl	8007d24 <__sfp_lock_acquire>
 8007dcc:	4b1e      	ldr	r3, [pc, #120]	; (8007e48 <__sfp+0x84>)
 8007dce:	681e      	ldr	r6, [r3, #0]
 8007dd0:	69b3      	ldr	r3, [r6, #24]
 8007dd2:	b913      	cbnz	r3, 8007dda <__sfp+0x16>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff ffbd 	bl	8007d54 <__sinit>
 8007dda:	3648      	adds	r6, #72	; 0x48
 8007ddc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	d503      	bpl.n	8007dec <__sfp+0x28>
 8007de4:	6833      	ldr	r3, [r6, #0]
 8007de6:	b30b      	cbz	r3, 8007e2c <__sfp+0x68>
 8007de8:	6836      	ldr	r6, [r6, #0]
 8007dea:	e7f7      	b.n	8007ddc <__sfp+0x18>
 8007dec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007df0:	b9d5      	cbnz	r5, 8007e28 <__sfp+0x64>
 8007df2:	4b16      	ldr	r3, [pc, #88]	; (8007e4c <__sfp+0x88>)
 8007df4:	60e3      	str	r3, [r4, #12]
 8007df6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dfa:	6665      	str	r5, [r4, #100]	; 0x64
 8007dfc:	f000 f859 	bl	8007eb2 <__retarget_lock_init_recursive>
 8007e00:	f7ff ff96 	bl	8007d30 <__sfp_lock_release>
 8007e04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e0c:	6025      	str	r5, [r4, #0]
 8007e0e:	61a5      	str	r5, [r4, #24]
 8007e10:	2208      	movs	r2, #8
 8007e12:	4629      	mov	r1, r5
 8007e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e18:	f7fb faee 	bl	80033f8 <memset>
 8007e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e24:	4620      	mov	r0, r4
 8007e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e28:	3468      	adds	r4, #104	; 0x68
 8007e2a:	e7d9      	b.n	8007de0 <__sfp+0x1c>
 8007e2c:	2104      	movs	r1, #4
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f7ff ff62 	bl	8007cf8 <__sfmoreglue>
 8007e34:	4604      	mov	r4, r0
 8007e36:	6030      	str	r0, [r6, #0]
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d1d5      	bne.n	8007de8 <__sfp+0x24>
 8007e3c:	f7ff ff78 	bl	8007d30 <__sfp_lock_release>
 8007e40:	230c      	movs	r3, #12
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	e7ee      	b.n	8007e24 <__sfp+0x60>
 8007e46:	bf00      	nop
 8007e48:	08008684 	.word	0x08008684
 8007e4c:	ffff0001 	.word	0xffff0001

08007e50 <fiprintf>:
 8007e50:	b40e      	push	{r1, r2, r3}
 8007e52:	b503      	push	{r0, r1, lr}
 8007e54:	4601      	mov	r1, r0
 8007e56:	ab03      	add	r3, sp, #12
 8007e58:	4805      	ldr	r0, [pc, #20]	; (8007e70 <fiprintf+0x20>)
 8007e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5e:	6800      	ldr	r0, [r0, #0]
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	f000 f89f 	bl	8007fa4 <_vfiprintf_r>
 8007e66:	b002      	add	sp, #8
 8007e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e6c:	b003      	add	sp, #12
 8007e6e:	4770      	bx	lr
 8007e70:	20000010 	.word	0x20000010

08007e74 <_fwalk_reent>:
 8007e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e78:	4606      	mov	r6, r0
 8007e7a:	4688      	mov	r8, r1
 8007e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e80:	2700      	movs	r7, #0
 8007e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e86:	f1b9 0901 	subs.w	r9, r9, #1
 8007e8a:	d505      	bpl.n	8007e98 <_fwalk_reent+0x24>
 8007e8c:	6824      	ldr	r4, [r4, #0]
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	d1f7      	bne.n	8007e82 <_fwalk_reent+0xe>
 8007e92:	4638      	mov	r0, r7
 8007e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e98:	89ab      	ldrh	r3, [r5, #12]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d907      	bls.n	8007eae <_fwalk_reent+0x3a>
 8007e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	d003      	beq.n	8007eae <_fwalk_reent+0x3a>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	47c0      	blx	r8
 8007eac:	4307      	orrs	r7, r0
 8007eae:	3568      	adds	r5, #104	; 0x68
 8007eb0:	e7e9      	b.n	8007e86 <_fwalk_reent+0x12>

08007eb2 <__retarget_lock_init_recursive>:
 8007eb2:	4770      	bx	lr

08007eb4 <__retarget_lock_acquire_recursive>:
 8007eb4:	4770      	bx	lr

08007eb6 <__retarget_lock_release_recursive>:
 8007eb6:	4770      	bx	lr

08007eb8 <memmove>:
 8007eb8:	4288      	cmp	r0, r1
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	eb01 0402 	add.w	r4, r1, r2
 8007ec0:	d902      	bls.n	8007ec8 <memmove+0x10>
 8007ec2:	4284      	cmp	r4, r0
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	d807      	bhi.n	8007ed8 <memmove+0x20>
 8007ec8:	1e43      	subs	r3, r0, #1
 8007eca:	42a1      	cmp	r1, r4
 8007ecc:	d008      	beq.n	8007ee0 <memmove+0x28>
 8007ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ed6:	e7f8      	b.n	8007eca <memmove+0x12>
 8007ed8:	4402      	add	r2, r0
 8007eda:	4601      	mov	r1, r0
 8007edc:	428a      	cmp	r2, r1
 8007ede:	d100      	bne.n	8007ee2 <memmove+0x2a>
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eea:	e7f7      	b.n	8007edc <memmove+0x24>

08007eec <__malloc_lock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	; (8007ef4 <__malloc_lock+0x8>)
 8007eee:	f7ff bfe1 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	200002bc 	.word	0x200002bc

08007ef8 <__malloc_unlock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__malloc_unlock+0x8>)
 8007efa:	f7ff bfdc 	b.w	8007eb6 <__retarget_lock_release_recursive>
 8007efe:	bf00      	nop
 8007f00:	200002bc 	.word	0x200002bc

08007f04 <_realloc_r>:
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	4607      	mov	r7, r0
 8007f08:	4614      	mov	r4, r2
 8007f0a:	460e      	mov	r6, r1
 8007f0c:	b921      	cbnz	r1, 8007f18 <_realloc_r+0x14>
 8007f0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f12:	4611      	mov	r1, r2
 8007f14:	f7fe bfd4 	b.w	8006ec0 <_malloc_r>
 8007f18:	b922      	cbnz	r2, 8007f24 <_realloc_r+0x20>
 8007f1a:	f7fe ff81 	bl	8006e20 <_free_r>
 8007f1e:	4625      	mov	r5, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f24:	f000 fa9a 	bl	800845c <_malloc_usable_size_r>
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d20f      	bcs.n	8007f4c <_realloc_r+0x48>
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4638      	mov	r0, r7
 8007f30:	f7fe ffc6 	bl	8006ec0 <_malloc_r>
 8007f34:	4605      	mov	r5, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0f2      	beq.n	8007f20 <_realloc_r+0x1c>
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	f7fe fa97 	bl	8006470 <memcpy>
 8007f42:	4631      	mov	r1, r6
 8007f44:	4638      	mov	r0, r7
 8007f46:	f7fe ff6b 	bl	8006e20 <_free_r>
 8007f4a:	e7e9      	b.n	8007f20 <_realloc_r+0x1c>
 8007f4c:	4635      	mov	r5, r6
 8007f4e:	e7e7      	b.n	8007f20 <_realloc_r+0x1c>

08007f50 <__sfputc_r>:
 8007f50:	6893      	ldr	r3, [r2, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	b410      	push	{r4}
 8007f58:	6093      	str	r3, [r2, #8]
 8007f5a:	da08      	bge.n	8007f6e <__sfputc_r+0x1e>
 8007f5c:	6994      	ldr	r4, [r2, #24]
 8007f5e:	42a3      	cmp	r3, r4
 8007f60:	db01      	blt.n	8007f66 <__sfputc_r+0x16>
 8007f62:	290a      	cmp	r1, #10
 8007f64:	d103      	bne.n	8007f6e <__sfputc_r+0x1e>
 8007f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f6a:	f000 b94b 	b.w	8008204 <__swbuf_r>
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	1c58      	adds	r0, r3, #1
 8007f72:	6010      	str	r0, [r2, #0]
 8007f74:	7019      	strb	r1, [r3, #0]
 8007f76:	4608      	mov	r0, r1
 8007f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <__sfputs_r>:
 8007f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f80:	4606      	mov	r6, r0
 8007f82:	460f      	mov	r7, r1
 8007f84:	4614      	mov	r4, r2
 8007f86:	18d5      	adds	r5, r2, r3
 8007f88:	42ac      	cmp	r4, r5
 8007f8a:	d101      	bne.n	8007f90 <__sfputs_r+0x12>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e007      	b.n	8007fa0 <__sfputs_r+0x22>
 8007f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f94:	463a      	mov	r2, r7
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7ff ffda 	bl	8007f50 <__sfputc_r>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d1f3      	bne.n	8007f88 <__sfputs_r+0xa>
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fa4 <_vfiprintf_r>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	460d      	mov	r5, r1
 8007faa:	b09d      	sub	sp, #116	; 0x74
 8007fac:	4614      	mov	r4, r2
 8007fae:	4698      	mov	r8, r3
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	b118      	cbz	r0, 8007fbc <_vfiprintf_r+0x18>
 8007fb4:	6983      	ldr	r3, [r0, #24]
 8007fb6:	b90b      	cbnz	r3, 8007fbc <_vfiprintf_r+0x18>
 8007fb8:	f7ff fecc 	bl	8007d54 <__sinit>
 8007fbc:	4b89      	ldr	r3, [pc, #548]	; (80081e4 <_vfiprintf_r+0x240>)
 8007fbe:	429d      	cmp	r5, r3
 8007fc0:	d11b      	bne.n	8007ffa <_vfiprintf_r+0x56>
 8007fc2:	6875      	ldr	r5, [r6, #4]
 8007fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc6:	07d9      	lsls	r1, r3, #31
 8007fc8:	d405      	bmi.n	8007fd6 <_vfiprintf_r+0x32>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	059a      	lsls	r2, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_vfiprintf_r+0x32>
 8007fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd2:	f7ff ff6f 	bl	8007eb4 <__retarget_lock_acquire_recursive>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	071b      	lsls	r3, r3, #28
 8007fda:	d501      	bpl.n	8007fe0 <_vfiprintf_r+0x3c>
 8007fdc:	692b      	ldr	r3, [r5, #16]
 8007fde:	b9eb      	cbnz	r3, 800801c <_vfiprintf_r+0x78>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f000 f960 	bl	80082a8 <__swsetup_r>
 8007fe8:	b1c0      	cbz	r0, 800801c <_vfiprintf_r+0x78>
 8007fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fec:	07dc      	lsls	r4, r3, #31
 8007fee:	d50e      	bpl.n	800800e <_vfiprintf_r+0x6a>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff4:	b01d      	add	sp, #116	; 0x74
 8007ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffa:	4b7b      	ldr	r3, [pc, #492]	; (80081e8 <_vfiprintf_r+0x244>)
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	d101      	bne.n	8008004 <_vfiprintf_r+0x60>
 8008000:	68b5      	ldr	r5, [r6, #8]
 8008002:	e7df      	b.n	8007fc4 <_vfiprintf_r+0x20>
 8008004:	4b79      	ldr	r3, [pc, #484]	; (80081ec <_vfiprintf_r+0x248>)
 8008006:	429d      	cmp	r5, r3
 8008008:	bf08      	it	eq
 800800a:	68f5      	ldreq	r5, [r6, #12]
 800800c:	e7da      	b.n	8007fc4 <_vfiprintf_r+0x20>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	0598      	lsls	r0, r3, #22
 8008012:	d4ed      	bmi.n	8007ff0 <_vfiprintf_r+0x4c>
 8008014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008016:	f7ff ff4e 	bl	8007eb6 <__retarget_lock_release_recursive>
 800801a:	e7e9      	b.n	8007ff0 <_vfiprintf_r+0x4c>
 800801c:	2300      	movs	r3, #0
 800801e:	9309      	str	r3, [sp, #36]	; 0x24
 8008020:	2320      	movs	r3, #32
 8008022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008026:	f8cd 800c 	str.w	r8, [sp, #12]
 800802a:	2330      	movs	r3, #48	; 0x30
 800802c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081f0 <_vfiprintf_r+0x24c>
 8008030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008034:	f04f 0901 	mov.w	r9, #1
 8008038:	4623      	mov	r3, r4
 800803a:	469a      	mov	sl, r3
 800803c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008040:	b10a      	cbz	r2, 8008046 <_vfiprintf_r+0xa2>
 8008042:	2a25      	cmp	r2, #37	; 0x25
 8008044:	d1f9      	bne.n	800803a <_vfiprintf_r+0x96>
 8008046:	ebba 0b04 	subs.w	fp, sl, r4
 800804a:	d00b      	beq.n	8008064 <_vfiprintf_r+0xc0>
 800804c:	465b      	mov	r3, fp
 800804e:	4622      	mov	r2, r4
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ff93 	bl	8007f7e <__sfputs_r>
 8008058:	3001      	adds	r0, #1
 800805a:	f000 80aa 	beq.w	80081b2 <_vfiprintf_r+0x20e>
 800805e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008060:	445a      	add	r2, fp
 8008062:	9209      	str	r2, [sp, #36]	; 0x24
 8008064:	f89a 3000 	ldrb.w	r3, [sl]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80a2 	beq.w	80081b2 <_vfiprintf_r+0x20e>
 800806e:	2300      	movs	r3, #0
 8008070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008078:	f10a 0a01 	add.w	sl, sl, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008084:	931a      	str	r3, [sp, #104]	; 0x68
 8008086:	4654      	mov	r4, sl
 8008088:	2205      	movs	r2, #5
 800808a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808e:	4858      	ldr	r0, [pc, #352]	; (80081f0 <_vfiprintf_r+0x24c>)
 8008090:	f7f8 f8b6 	bl	8000200 <memchr>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	b9d8      	cbnz	r0, 80080d0 <_vfiprintf_r+0x12c>
 8008098:	06d1      	lsls	r1, r2, #27
 800809a:	bf44      	itt	mi
 800809c:	2320      	movmi	r3, #32
 800809e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a2:	0713      	lsls	r3, r2, #28
 80080a4:	bf44      	itt	mi
 80080a6:	232b      	movmi	r3, #43	; 0x2b
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ac:	f89a 3000 	ldrb.w	r3, [sl]
 80080b0:	2b2a      	cmp	r3, #42	; 0x2a
 80080b2:	d015      	beq.n	80080e0 <_vfiprintf_r+0x13c>
 80080b4:	9a07      	ldr	r2, [sp, #28]
 80080b6:	4654      	mov	r4, sl
 80080b8:	2000      	movs	r0, #0
 80080ba:	f04f 0c0a 	mov.w	ip, #10
 80080be:	4621      	mov	r1, r4
 80080c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c4:	3b30      	subs	r3, #48	; 0x30
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d94e      	bls.n	8008168 <_vfiprintf_r+0x1c4>
 80080ca:	b1b0      	cbz	r0, 80080fa <_vfiprintf_r+0x156>
 80080cc:	9207      	str	r2, [sp, #28]
 80080ce:	e014      	b.n	80080fa <_vfiprintf_r+0x156>
 80080d0:	eba0 0308 	sub.w	r3, r0, r8
 80080d4:	fa09 f303 	lsl.w	r3, r9, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	46a2      	mov	sl, r4
 80080de:	e7d2      	b.n	8008086 <_vfiprintf_r+0xe2>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	1d19      	adds	r1, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	9103      	str	r1, [sp, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfbb      	ittet	lt
 80080ec:	425b      	neglt	r3, r3
 80080ee:	f042 0202 	orrlt.w	r2, r2, #2
 80080f2:	9307      	strge	r3, [sp, #28]
 80080f4:	9307      	strlt	r3, [sp, #28]
 80080f6:	bfb8      	it	lt
 80080f8:	9204      	strlt	r2, [sp, #16]
 80080fa:	7823      	ldrb	r3, [r4, #0]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d10c      	bne.n	800811a <_vfiprintf_r+0x176>
 8008100:	7863      	ldrb	r3, [r4, #1]
 8008102:	2b2a      	cmp	r3, #42	; 0x2a
 8008104:	d135      	bne.n	8008172 <_vfiprintf_r+0x1ce>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	9203      	str	r2, [sp, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008116:	3402      	adds	r4, #2
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008200 <_vfiprintf_r+0x25c>
 800811e:	7821      	ldrb	r1, [r4, #0]
 8008120:	2203      	movs	r2, #3
 8008122:	4650      	mov	r0, sl
 8008124:	f7f8 f86c 	bl	8000200 <memchr>
 8008128:	b140      	cbz	r0, 800813c <_vfiprintf_r+0x198>
 800812a:	2340      	movs	r3, #64	; 0x40
 800812c:	eba0 000a 	sub.w	r0, r0, sl
 8008130:	fa03 f000 	lsl.w	r0, r3, r0
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	4303      	orrs	r3, r0
 8008138:	3401      	adds	r4, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008140:	482c      	ldr	r0, [pc, #176]	; (80081f4 <_vfiprintf_r+0x250>)
 8008142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008146:	2206      	movs	r2, #6
 8008148:	f7f8 f85a 	bl	8000200 <memchr>
 800814c:	2800      	cmp	r0, #0
 800814e:	d03f      	beq.n	80081d0 <_vfiprintf_r+0x22c>
 8008150:	4b29      	ldr	r3, [pc, #164]	; (80081f8 <_vfiprintf_r+0x254>)
 8008152:	bb1b      	cbnz	r3, 800819c <_vfiprintf_r+0x1f8>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	3307      	adds	r3, #7
 8008158:	f023 0307 	bic.w	r3, r3, #7
 800815c:	3308      	adds	r3, #8
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008162:	443b      	add	r3, r7
 8008164:	9309      	str	r3, [sp, #36]	; 0x24
 8008166:	e767      	b.n	8008038 <_vfiprintf_r+0x94>
 8008168:	fb0c 3202 	mla	r2, ip, r2, r3
 800816c:	460c      	mov	r4, r1
 800816e:	2001      	movs	r0, #1
 8008170:	e7a5      	b.n	80080be <_vfiprintf_r+0x11a>
 8008172:	2300      	movs	r3, #0
 8008174:	3401      	adds	r4, #1
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	4619      	mov	r1, r3
 800817a:	f04f 0c0a 	mov.w	ip, #10
 800817e:	4620      	mov	r0, r4
 8008180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008184:	3a30      	subs	r2, #48	; 0x30
 8008186:	2a09      	cmp	r2, #9
 8008188:	d903      	bls.n	8008192 <_vfiprintf_r+0x1ee>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0c5      	beq.n	800811a <_vfiprintf_r+0x176>
 800818e:	9105      	str	r1, [sp, #20]
 8008190:	e7c3      	b.n	800811a <_vfiprintf_r+0x176>
 8008192:	fb0c 2101 	mla	r1, ip, r1, r2
 8008196:	4604      	mov	r4, r0
 8008198:	2301      	movs	r3, #1
 800819a:	e7f0      	b.n	800817e <_vfiprintf_r+0x1da>
 800819c:	ab03      	add	r3, sp, #12
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	462a      	mov	r2, r5
 80081a2:	4b16      	ldr	r3, [pc, #88]	; (80081fc <_vfiprintf_r+0x258>)
 80081a4:	a904      	add	r1, sp, #16
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7fb f9ce 	bl	8003548 <_printf_float>
 80081ac:	4607      	mov	r7, r0
 80081ae:	1c78      	adds	r0, r7, #1
 80081b0:	d1d6      	bne.n	8008160 <_vfiprintf_r+0x1bc>
 80081b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b4:	07d9      	lsls	r1, r3, #31
 80081b6:	d405      	bmi.n	80081c4 <_vfiprintf_r+0x220>
 80081b8:	89ab      	ldrh	r3, [r5, #12]
 80081ba:	059a      	lsls	r2, r3, #22
 80081bc:	d402      	bmi.n	80081c4 <_vfiprintf_r+0x220>
 80081be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081c0:	f7ff fe79 	bl	8007eb6 <__retarget_lock_release_recursive>
 80081c4:	89ab      	ldrh	r3, [r5, #12]
 80081c6:	065b      	lsls	r3, r3, #25
 80081c8:	f53f af12 	bmi.w	8007ff0 <_vfiprintf_r+0x4c>
 80081cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ce:	e711      	b.n	8007ff4 <_vfiprintf_r+0x50>
 80081d0:	ab03      	add	r3, sp, #12
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	462a      	mov	r2, r5
 80081d6:	4b09      	ldr	r3, [pc, #36]	; (80081fc <_vfiprintf_r+0x258>)
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4630      	mov	r0, r6
 80081dc:	f7fb fc58 	bl	8003a90 <_printf_i>
 80081e0:	e7e4      	b.n	80081ac <_vfiprintf_r+0x208>
 80081e2:	bf00      	nop
 80081e4:	08008b0c 	.word	0x08008b0c
 80081e8:	08008b2c 	.word	0x08008b2c
 80081ec:	08008aec 	.word	0x08008aec
 80081f0:	08008a84 	.word	0x08008a84
 80081f4:	08008a8e 	.word	0x08008a8e
 80081f8:	08003549 	.word	0x08003549
 80081fc:	08007f7f 	.word	0x08007f7f
 8008200:	08008a8a 	.word	0x08008a8a

08008204 <__swbuf_r>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	460e      	mov	r6, r1
 8008208:	4614      	mov	r4, r2
 800820a:	4605      	mov	r5, r0
 800820c:	b118      	cbz	r0, 8008216 <__swbuf_r+0x12>
 800820e:	6983      	ldr	r3, [r0, #24]
 8008210:	b90b      	cbnz	r3, 8008216 <__swbuf_r+0x12>
 8008212:	f7ff fd9f 	bl	8007d54 <__sinit>
 8008216:	4b21      	ldr	r3, [pc, #132]	; (800829c <__swbuf_r+0x98>)
 8008218:	429c      	cmp	r4, r3
 800821a:	d12b      	bne.n	8008274 <__swbuf_r+0x70>
 800821c:	686c      	ldr	r4, [r5, #4]
 800821e:	69a3      	ldr	r3, [r4, #24]
 8008220:	60a3      	str	r3, [r4, #8]
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	071a      	lsls	r2, r3, #28
 8008226:	d52f      	bpl.n	8008288 <__swbuf_r+0x84>
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	b36b      	cbz	r3, 8008288 <__swbuf_r+0x84>
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	6820      	ldr	r0, [r4, #0]
 8008230:	1ac0      	subs	r0, r0, r3
 8008232:	6963      	ldr	r3, [r4, #20]
 8008234:	b2f6      	uxtb	r6, r6
 8008236:	4283      	cmp	r3, r0
 8008238:	4637      	mov	r7, r6
 800823a:	dc04      	bgt.n	8008246 <__swbuf_r+0x42>
 800823c:	4621      	mov	r1, r4
 800823e:	4628      	mov	r0, r5
 8008240:	f7ff fcf4 	bl	8007c2c <_fflush_r>
 8008244:	bb30      	cbnz	r0, 8008294 <__swbuf_r+0x90>
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	3b01      	subs	r3, #1
 800824a:	60a3      	str	r3, [r4, #8]
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	6022      	str	r2, [r4, #0]
 8008252:	701e      	strb	r6, [r3, #0]
 8008254:	6963      	ldr	r3, [r4, #20]
 8008256:	3001      	adds	r0, #1
 8008258:	4283      	cmp	r3, r0
 800825a:	d004      	beq.n	8008266 <__swbuf_r+0x62>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	07db      	lsls	r3, r3, #31
 8008260:	d506      	bpl.n	8008270 <__swbuf_r+0x6c>
 8008262:	2e0a      	cmp	r6, #10
 8008264:	d104      	bne.n	8008270 <__swbuf_r+0x6c>
 8008266:	4621      	mov	r1, r4
 8008268:	4628      	mov	r0, r5
 800826a:	f7ff fcdf 	bl	8007c2c <_fflush_r>
 800826e:	b988      	cbnz	r0, 8008294 <__swbuf_r+0x90>
 8008270:	4638      	mov	r0, r7
 8008272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008274:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <__swbuf_r+0x9c>)
 8008276:	429c      	cmp	r4, r3
 8008278:	d101      	bne.n	800827e <__swbuf_r+0x7a>
 800827a:	68ac      	ldr	r4, [r5, #8]
 800827c:	e7cf      	b.n	800821e <__swbuf_r+0x1a>
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <__swbuf_r+0xa0>)
 8008280:	429c      	cmp	r4, r3
 8008282:	bf08      	it	eq
 8008284:	68ec      	ldreq	r4, [r5, #12]
 8008286:	e7ca      	b.n	800821e <__swbuf_r+0x1a>
 8008288:	4621      	mov	r1, r4
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f80c 	bl	80082a8 <__swsetup_r>
 8008290:	2800      	cmp	r0, #0
 8008292:	d0cb      	beq.n	800822c <__swbuf_r+0x28>
 8008294:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008298:	e7ea      	b.n	8008270 <__swbuf_r+0x6c>
 800829a:	bf00      	nop
 800829c:	08008b0c 	.word	0x08008b0c
 80082a0:	08008b2c 	.word	0x08008b2c
 80082a4:	08008aec 	.word	0x08008aec

080082a8 <__swsetup_r>:
 80082a8:	4b32      	ldr	r3, [pc, #200]	; (8008374 <__swsetup_r+0xcc>)
 80082aa:	b570      	push	{r4, r5, r6, lr}
 80082ac:	681d      	ldr	r5, [r3, #0]
 80082ae:	4606      	mov	r6, r0
 80082b0:	460c      	mov	r4, r1
 80082b2:	b125      	cbz	r5, 80082be <__swsetup_r+0x16>
 80082b4:	69ab      	ldr	r3, [r5, #24]
 80082b6:	b913      	cbnz	r3, 80082be <__swsetup_r+0x16>
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7ff fd4b 	bl	8007d54 <__sinit>
 80082be:	4b2e      	ldr	r3, [pc, #184]	; (8008378 <__swsetup_r+0xd0>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	d10f      	bne.n	80082e4 <__swsetup_r+0x3c>
 80082c4:	686c      	ldr	r4, [r5, #4]
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082cc:	0719      	lsls	r1, r3, #28
 80082ce:	d42c      	bmi.n	800832a <__swsetup_r+0x82>
 80082d0:	06dd      	lsls	r5, r3, #27
 80082d2:	d411      	bmi.n	80082f8 <__swsetup_r+0x50>
 80082d4:	2309      	movs	r3, #9
 80082d6:	6033      	str	r3, [r6, #0]
 80082d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082dc:	81a3      	strh	r3, [r4, #12]
 80082de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e2:	e03e      	b.n	8008362 <__swsetup_r+0xba>
 80082e4:	4b25      	ldr	r3, [pc, #148]	; (800837c <__swsetup_r+0xd4>)
 80082e6:	429c      	cmp	r4, r3
 80082e8:	d101      	bne.n	80082ee <__swsetup_r+0x46>
 80082ea:	68ac      	ldr	r4, [r5, #8]
 80082ec:	e7eb      	b.n	80082c6 <__swsetup_r+0x1e>
 80082ee:	4b24      	ldr	r3, [pc, #144]	; (8008380 <__swsetup_r+0xd8>)
 80082f0:	429c      	cmp	r4, r3
 80082f2:	bf08      	it	eq
 80082f4:	68ec      	ldreq	r4, [r5, #12]
 80082f6:	e7e6      	b.n	80082c6 <__swsetup_r+0x1e>
 80082f8:	0758      	lsls	r0, r3, #29
 80082fa:	d512      	bpl.n	8008322 <__swsetup_r+0x7a>
 80082fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082fe:	b141      	cbz	r1, 8008312 <__swsetup_r+0x6a>
 8008300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008304:	4299      	cmp	r1, r3
 8008306:	d002      	beq.n	800830e <__swsetup_r+0x66>
 8008308:	4630      	mov	r0, r6
 800830a:	f7fe fd89 	bl	8006e20 <_free_r>
 800830e:	2300      	movs	r3, #0
 8008310:	6363      	str	r3, [r4, #52]	; 0x34
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	2300      	movs	r3, #0
 800831c:	6063      	str	r3, [r4, #4]
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	f043 0308 	orr.w	r3, r3, #8
 8008328:	81a3      	strh	r3, [r4, #12]
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	b94b      	cbnz	r3, 8008342 <__swsetup_r+0x9a>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008338:	d003      	beq.n	8008342 <__swsetup_r+0x9a>
 800833a:	4621      	mov	r1, r4
 800833c:	4630      	mov	r0, r6
 800833e:	f000 f84d 	bl	80083dc <__smakebuf_r>
 8008342:	89a0      	ldrh	r0, [r4, #12]
 8008344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008348:	f010 0301 	ands.w	r3, r0, #1
 800834c:	d00a      	beq.n	8008364 <__swsetup_r+0xbc>
 800834e:	2300      	movs	r3, #0
 8008350:	60a3      	str	r3, [r4, #8]
 8008352:	6963      	ldr	r3, [r4, #20]
 8008354:	425b      	negs	r3, r3
 8008356:	61a3      	str	r3, [r4, #24]
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	b943      	cbnz	r3, 800836e <__swsetup_r+0xc6>
 800835c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008360:	d1ba      	bne.n	80082d8 <__swsetup_r+0x30>
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	0781      	lsls	r1, r0, #30
 8008366:	bf58      	it	pl
 8008368:	6963      	ldrpl	r3, [r4, #20]
 800836a:	60a3      	str	r3, [r4, #8]
 800836c:	e7f4      	b.n	8008358 <__swsetup_r+0xb0>
 800836e:	2000      	movs	r0, #0
 8008370:	e7f7      	b.n	8008362 <__swsetup_r+0xba>
 8008372:	bf00      	nop
 8008374:	20000010 	.word	0x20000010
 8008378:	08008b0c 	.word	0x08008b0c
 800837c:	08008b2c 	.word	0x08008b2c
 8008380:	08008aec 	.word	0x08008aec

08008384 <abort>:
 8008384:	b508      	push	{r3, lr}
 8008386:	2006      	movs	r0, #6
 8008388:	f000 f898 	bl	80084bc <raise>
 800838c:	2001      	movs	r0, #1
 800838e:	f7f9 faf9 	bl	8001984 <_exit>

08008392 <__swhatbuf_r>:
 8008392:	b570      	push	{r4, r5, r6, lr}
 8008394:	460e      	mov	r6, r1
 8008396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839a:	2900      	cmp	r1, #0
 800839c:	b096      	sub	sp, #88	; 0x58
 800839e:	4614      	mov	r4, r2
 80083a0:	461d      	mov	r5, r3
 80083a2:	da07      	bge.n	80083b4 <__swhatbuf_r+0x22>
 80083a4:	2300      	movs	r3, #0
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	89b3      	ldrh	r3, [r6, #12]
 80083aa:	061a      	lsls	r2, r3, #24
 80083ac:	d410      	bmi.n	80083d0 <__swhatbuf_r+0x3e>
 80083ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b2:	e00e      	b.n	80083d2 <__swhatbuf_r+0x40>
 80083b4:	466a      	mov	r2, sp
 80083b6:	f000 f89d 	bl	80084f4 <_fstat_r>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dbf2      	blt.n	80083a4 <__swhatbuf_r+0x12>
 80083be:	9a01      	ldr	r2, [sp, #4]
 80083c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083c8:	425a      	negs	r2, r3
 80083ca:	415a      	adcs	r2, r3
 80083cc:	602a      	str	r2, [r5, #0]
 80083ce:	e7ee      	b.n	80083ae <__swhatbuf_r+0x1c>
 80083d0:	2340      	movs	r3, #64	; 0x40
 80083d2:	2000      	movs	r0, #0
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	b016      	add	sp, #88	; 0x58
 80083d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080083dc <__smakebuf_r>:
 80083dc:	898b      	ldrh	r3, [r1, #12]
 80083de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083e0:	079d      	lsls	r5, r3, #30
 80083e2:	4606      	mov	r6, r0
 80083e4:	460c      	mov	r4, r1
 80083e6:	d507      	bpl.n	80083f8 <__smakebuf_r+0x1c>
 80083e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	2301      	movs	r3, #1
 80083f2:	6163      	str	r3, [r4, #20]
 80083f4:	b002      	add	sp, #8
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	ab01      	add	r3, sp, #4
 80083fa:	466a      	mov	r2, sp
 80083fc:	f7ff ffc9 	bl	8008392 <__swhatbuf_r>
 8008400:	9900      	ldr	r1, [sp, #0]
 8008402:	4605      	mov	r5, r0
 8008404:	4630      	mov	r0, r6
 8008406:	f7fe fd5b 	bl	8006ec0 <_malloc_r>
 800840a:	b948      	cbnz	r0, 8008420 <__smakebuf_r+0x44>
 800840c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008410:	059a      	lsls	r2, r3, #22
 8008412:	d4ef      	bmi.n	80083f4 <__smakebuf_r+0x18>
 8008414:	f023 0303 	bic.w	r3, r3, #3
 8008418:	f043 0302 	orr.w	r3, r3, #2
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	e7e3      	b.n	80083e8 <__smakebuf_r+0xc>
 8008420:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <__smakebuf_r+0x7c>)
 8008422:	62b3      	str	r3, [r6, #40]	; 0x28
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	9b00      	ldr	r3, [sp, #0]
 8008430:	6163      	str	r3, [r4, #20]
 8008432:	9b01      	ldr	r3, [sp, #4]
 8008434:	6120      	str	r0, [r4, #16]
 8008436:	b15b      	cbz	r3, 8008450 <__smakebuf_r+0x74>
 8008438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800843c:	4630      	mov	r0, r6
 800843e:	f000 f86b 	bl	8008518 <_isatty_r>
 8008442:	b128      	cbz	r0, 8008450 <__smakebuf_r+0x74>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	f043 0301 	orr.w	r3, r3, #1
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	89a0      	ldrh	r0, [r4, #12]
 8008452:	4305      	orrs	r5, r0
 8008454:	81a5      	strh	r5, [r4, #12]
 8008456:	e7cd      	b.n	80083f4 <__smakebuf_r+0x18>
 8008458:	08007ced 	.word	0x08007ced

0800845c <_malloc_usable_size_r>:
 800845c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008460:	1f18      	subs	r0, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	bfbc      	itt	lt
 8008466:	580b      	ldrlt	r3, [r1, r0]
 8008468:	18c0      	addlt	r0, r0, r3
 800846a:	4770      	bx	lr

0800846c <_raise_r>:
 800846c:	291f      	cmp	r1, #31
 800846e:	b538      	push	{r3, r4, r5, lr}
 8008470:	4604      	mov	r4, r0
 8008472:	460d      	mov	r5, r1
 8008474:	d904      	bls.n	8008480 <_raise_r+0x14>
 8008476:	2316      	movs	r3, #22
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008482:	b112      	cbz	r2, 800848a <_raise_r+0x1e>
 8008484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008488:	b94b      	cbnz	r3, 800849e <_raise_r+0x32>
 800848a:	4620      	mov	r0, r4
 800848c:	f000 f830 	bl	80084f0 <_getpid_r>
 8008490:	462a      	mov	r2, r5
 8008492:	4601      	mov	r1, r0
 8008494:	4620      	mov	r0, r4
 8008496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849a:	f000 b817 	b.w	80084cc <_kill_r>
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d00a      	beq.n	80084b8 <_raise_r+0x4c>
 80084a2:	1c59      	adds	r1, r3, #1
 80084a4:	d103      	bne.n	80084ae <_raise_r+0x42>
 80084a6:	2316      	movs	r3, #22
 80084a8:	6003      	str	r3, [r0, #0]
 80084aa:	2001      	movs	r0, #1
 80084ac:	e7e7      	b.n	800847e <_raise_r+0x12>
 80084ae:	2400      	movs	r4, #0
 80084b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084b4:	4628      	mov	r0, r5
 80084b6:	4798      	blx	r3
 80084b8:	2000      	movs	r0, #0
 80084ba:	e7e0      	b.n	800847e <_raise_r+0x12>

080084bc <raise>:
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <raise+0xc>)
 80084be:	4601      	mov	r1, r0
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f7ff bfd3 	b.w	800846c <_raise_r>
 80084c6:	bf00      	nop
 80084c8:	20000010 	.word	0x20000010

080084cc <_kill_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d07      	ldr	r5, [pc, #28]	; (80084ec <_kill_r+0x20>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	f7f9 fa43 	bl	8001964 <_kill>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d102      	bne.n	80084e8 <_kill_r+0x1c>
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	b103      	cbz	r3, 80084e8 <_kill_r+0x1c>
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	200002b4 	.word	0x200002b4

080084f0 <_getpid_r>:
 80084f0:	f7f9 ba30 	b.w	8001954 <_getpid>

080084f4 <_fstat_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	; (8008514 <_fstat_r+0x20>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	f7f9 fa8e 	bl	8001a22 <_fstat>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d102      	bne.n	8008510 <_fstat_r+0x1c>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	b103      	cbz	r3, 8008510 <_fstat_r+0x1c>
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	200002b4 	.word	0x200002b4

08008518 <_isatty_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d06      	ldr	r5, [pc, #24]	; (8008534 <_isatty_r+0x1c>)
 800851c:	2300      	movs	r3, #0
 800851e:	4604      	mov	r4, r0
 8008520:	4608      	mov	r0, r1
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	f7f9 fa8d 	bl	8001a42 <_isatty>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_isatty_r+0x1a>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_isatty_r+0x1a>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	200002b4 	.word	0x200002b4

08008538 <_init>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	bf00      	nop
 800853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853e:	bc08      	pop	{r3}
 8008540:	469e      	mov	lr, r3
 8008542:	4770      	bx	lr

08008544 <_fini>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr
