
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e88  08002e88  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e90  08002e90  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000090  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d42f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000206e  00000000  00000000  0002d4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c43  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc31  00000000  00000000  0005702b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e33e2  00000000  00000000  00064c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014803e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000207c  00000000  00000000  00148094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002da0 	.word	0x08002da0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002da0 	.word	0x08002da0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <debounceFSM_init>:
static bool_t buttonPressed = false;

/**
  * @brief  Initializes the de-bounce machine state.
  */
void debounceFSM_init(void) {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	buttonState = BUTTON_UP;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <debounceFSM_init+0x14>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	200000a8 	.word	0x200000a8

080005b0 <debounceFSM_update>:

/**
  * @brief  Update the de-bounce machine state.
  */
void debounceFSM_update(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	switch (buttonState)
 80005b4:	4b34      	ldr	r3, [pc, #208]	; (8000688 <debounceFSM_update+0xd8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d858      	bhi.n	800066e <debounceFSM_update+0xbe>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <debounceFSM_update+0x14>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005d5 	.word	0x080005d5
 80005c8:	080005f1 	.word	0x080005f1
 80005cc:	0800061f 	.word	0x0800061f
 80005d0:	0800063b 	.word	0x0800063b
	{
	case BUTTON_UP:
		delayInit(&delay_button, 40);
 80005d4:	2128      	movs	r1, #40	; 0x28
 80005d6:	482d      	ldr	r0, [pc, #180]	; (800068c <debounceFSM_update+0xdc>)
 80005d8:	f000 f878 	bl	80006cc <delayInit>
		if (BSP_PB_GetState(BUTTON_USER))
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fa4d 	bl	8000a7c <BSP_PB_GetState>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d045      	beq.n	8000674 <debounceFSM_update+0xc4>
		{
			buttonState = BUTTON_FALLING;
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <debounceFSM_update+0xd8>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005ee:	e041      	b.n	8000674 <debounceFSM_update+0xc4>
	case BUTTON_FALLING:
		if (delayRead(&delay_button))
 80005f0:	4826      	ldr	r0, [pc, #152]	; (800068c <debounceFSM_update+0xdc>)
 80005f2:	f000 f883 	bl	80006fc <delayRead>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d03d      	beq.n	8000678 <debounceFSM_update+0xc8>
		{
			if (BSP_PB_GetState(BUTTON_USER))
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fa3d 	bl	8000a7c <BSP_PB_GetState>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <debounceFSM_update+0x66>
			{
				uartsendString("Rising edge detected\r\n");
 8000608:	4821      	ldr	r0, [pc, #132]	; (8000690 <debounceFSM_update+0xe0>)
 800060a:	f000 f929 	bl	8000860 <uartsendString>
				buttonState = BUTTON_DOWN;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <debounceFSM_update+0xd8>)
 8000610:	2202      	movs	r2, #2
 8000612:	701a      	strb	r2, [r3, #0]
			else
			{
				buttonState = BUTTON_UP;
			}
		}
		break;
 8000614:	e030      	b.n	8000678 <debounceFSM_update+0xc8>
				buttonState = BUTTON_UP;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <debounceFSM_update+0xd8>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
		break;
 800061c:	e02c      	b.n	8000678 <debounceFSM_update+0xc8>
	case BUTTON_DOWN:
		delayInit(&delay_button, 40);
 800061e:	2128      	movs	r1, #40	; 0x28
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <debounceFSM_update+0xdc>)
 8000622:	f000 f853 	bl	80006cc <delayInit>
		if (!BSP_PB_GetState(BUTTON_USER))
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fa28 	bl	8000a7c <BSP_PB_GetState>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d124      	bne.n	800067c <debounceFSM_update+0xcc>
		{
			buttonState = BUTTON_RAISING;
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <debounceFSM_update+0xd8>)
 8000634:	2203      	movs	r2, #3
 8000636:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000638:	e020      	b.n	800067c <debounceFSM_update+0xcc>
	case BUTTON_RAISING:
		if (delayRead(&delay_button))
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <debounceFSM_update+0xdc>)
 800063c:	f000 f85e 	bl	80006fc <delayRead>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d01c      	beq.n	8000680 <debounceFSM_update+0xd0>
		{
			if (!BSP_PB_GetState(BUTTON_USER))
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fa18 	bl	8000a7c <BSP_PB_GetState>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d109      	bne.n	8000666 <debounceFSM_update+0xb6>
			{
				uartsendString("Falling edge detected\r\n");
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <debounceFSM_update+0xe4>)
 8000654:	f000 f904 	bl	8000860 <uartsendString>
				buttonPressed = true;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <debounceFSM_update+0xe8>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
				buttonState = BUTTON_UP;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <debounceFSM_update+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
			else
			{
				buttonState = BUTTON_DOWN;
			}
		}
		break;
 8000664:	e00c      	b.n	8000680 <debounceFSM_update+0xd0>
				buttonState = BUTTON_DOWN;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <debounceFSM_update+0xd8>)
 8000668:	2202      	movs	r2, #2
 800066a:	701a      	strb	r2, [r3, #0]
		break;
 800066c:	e008      	b.n	8000680 <debounceFSM_update+0xd0>
	default:
		debounceFSM_init();
 800066e:	f7ff ff93 	bl	8000598 <debounceFSM_init>
		break;
 8000672:	e006      	b.n	8000682 <debounceFSM_update+0xd2>
		break;
 8000674:	bf00      	nop
 8000676:	e004      	b.n	8000682 <debounceFSM_update+0xd2>
		break;
 8000678:	bf00      	nop
 800067a:	e002      	b.n	8000682 <debounceFSM_update+0xd2>
		break;
 800067c:	bf00      	nop
 800067e:	e000      	b.n	8000682 <debounceFSM_update+0xd2>
		break;
 8000680:	bf00      	nop
	}
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000a8 	.word	0x200000a8
 800068c:	2000009c 	.word	0x2000009c
 8000690:	08002db8 	.word	0x08002db8
 8000694:	08002dd0 	.word	0x08002dd0
 8000698:	200000a9 	.word	0x200000a9

0800069c <readKey>:
/**
  * @brief  Indicates if the button has been pressed.
  * @retval  True if the button has been pressed else false.
  */
bool_t readKey(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	bool_t retval = false;
 80006a2:	2300      	movs	r3, #0
 80006a4:	71fb      	strb	r3, [r7, #7]

	if (buttonPressed)
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <readKey+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d004      	beq.n	80006b8 <readKey+0x1c>
	{
		retval = true;
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
		buttonPressed = false;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <readKey+0x2c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
	}

	return retval;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	200000a9 	.word	0x200000a9

080006cc <delayInit>:
  * @param  delay: Delay to be initialized.
  * @param  duration: Delay duration in ms.
  *
  */
void delayInit(delay_t *delay, tick_t duration)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	/* Checking received parameters */
	if (delay == NULL || duration == 0)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d009      	beq.n	80006f0 <delayInit+0x24>
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <delayInit+0x24>
	{
		return;
	}

	/* Initializing delay */
	delay->duration = duration;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	721a      	strb	r2, [r3, #8]
 80006ee:	e000      	b.n	80006f2 <delayInit+0x26>
		return;
 80006f0:	bf00      	nop
}
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <delayRead>:
  * @param  delay: Delay to be checked.
  *
  * @retval True if the delay has elapsed, otherwise False.
  */
bool_t delayRead(delay_t * delay)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	bool_t result = false;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]

	/* Checking received parameters */
	if (delay == NULL)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <delayRead+0x16>
	{
		return result;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	e01e      	b.n	8000750 <delayRead+0x54>
	}

	if (delay->running)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7a1b      	ldrb	r3, [r3, #8]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d011      	beq.n	800073e <delayRead+0x42>
	{
		/* Delay is running. Checking if the delay has elapsed. */
		if ((HAL_GetTick() - delay->startTime) >= delay->duration)
 800071a:	f000 fabf 	bl	8000c9c <HAL_GetTick>
 800071e:	4602      	mov	r2, r0
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	1ad2      	subs	r2, r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	429a      	cmp	r2, r3
 800072c:	d30f      	bcc.n	800074e <delayRead+0x52>
		{
			/* Delay has elapsed */
			delay->startTime = HAL_GetTick();
 800072e:	f000 fab5 	bl	8000c9c <HAL_GetTick>
 8000732:	4602      	mov	r2, r0
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	601a      	str	r2, [r3, #0]
			result =  true;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	e007      	b.n	800074e <delayRead+0x52>
		}
	}
	else
	{
		/* Delay is not running. Taking timestamp and switching to running. */
		delay->startTime = HAL_GetTick();
 800073e:	f000 faad 	bl	8000c9c <HAL_GetTick>
 8000742:	4602      	mov	r2, r0
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	721a      	strb	r2, [r3, #8]
	}

	return result;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <delayWrite>:
  * @param  delay: Delay to be initialized.
  * @param  duration: Delay duration in ms.
  *
  */
void delayWrite(delay_t *delay, tick_t duration)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	/* Checking received parameters */
	if (delay == NULL || duration == 0)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00b      	beq.n	8000780 <delayWrite+0x28>
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d008      	beq.n	8000780 <delayWrite+0x28>
	{
		return;
	}

	delay->duration = duration;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	605a      	str	r2, [r3, #4]

	/* Resetting the delay in case it is running. */
	delay->startTime = HAL_GetTick();
 8000774:	f000 fa92 	bl	8000c9c <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e000      	b.n	8000782 <delayWrite+0x2a>
		return;
 8000780:	bf00      	nop
}
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <uartinit>:
  * @brief  Initializes UART3. Parameters: 9600,8,N,1
  * @retval  True if initialized correctly otherwise false.
  *
  */
bool_t uartinit(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b0a5      	sub	sp, #148	; 0x94
 800078c:	af02      	add	r7, sp, #8
	UartHandle.Instance = USART3;
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <uartinit+0xc0>)
 8000790:	4a2e      	ldr	r2, [pc, #184]	; (800084c <uartinit+0xc4>)
 8000792:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 9600;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <uartinit+0xc0>)
 8000796:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800079a:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <uartinit+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <uartinit+0xc0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <uartinit+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <uartinit+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <uartinit+0xc0>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <uartinit+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]

	HAL_StatusTypeDef status = HAL_UART_Init(&UartHandle);
 80007c0:	4821      	ldr	r0, [pc, #132]	; (8000848 <uartinit+0xc0>)
 80007c2:	f001 fa9f 	bl	8001d04 <HAL_UART_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	if (status != HAL_OK)
 80007cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <uartinit+0x50>
	{
		return false;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e032      	b.n	800083e <uartinit+0xb6>
	}


	uint8_t msg[128];
	sprintf(msg, "UART initialization successfully. Parameters: %"PRIu32",%d,%s,%d\r\n",
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <uartinit+0xc0>)
 80007da:	6859      	ldr	r1, [r3, #4]
			UartHandle.Init.BaudRate,
			UartHandle.Init.WordLength == UART_WORDLENGTH_8B ? 8 : 9,
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <uartinit+0xc0>)
 80007de:	689b      	ldr	r3, [r3, #8]
	sprintf(msg, "UART initialization successfully. Parameters: %"PRIu32",%d,%s,%d\r\n",
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <uartinit+0x60>
 80007e4:	2408      	movs	r4, #8
 80007e6:	e000      	b.n	80007ea <uartinit+0x62>
 80007e8:	2409      	movs	r4, #9
			UartHandle.Init.Parity != UART_PARITY_NONE ? UartHandle.Init.Parity != UART_PARITY_EVEN ? "O" : "E" : "N",
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <uartinit+0xc0>)
 80007ec:	691b      	ldr	r3, [r3, #16]
	sprintf(msg, "UART initialization successfully. Parameters: %"PRIu32",%d,%s,%d\r\n",
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d008      	beq.n	8000804 <uartinit+0x7c>
			UartHandle.Init.Parity != UART_PARITY_NONE ? UartHandle.Init.Parity != UART_PARITY_EVEN ? "O" : "E" : "N",
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <uartinit+0xc0>)
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007fa:	d001      	beq.n	8000800 <uartinit+0x78>
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <uartinit+0xc8>)
 80007fe:	e002      	b.n	8000806 <uartinit+0x7e>
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <uartinit+0xcc>)
 8000802:	e000      	b.n	8000806 <uartinit+0x7e>
	sprintf(msg, "UART initialization successfully. Parameters: %"PRIu32",%d,%s,%d\r\n",
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <uartinit+0xd0>)
			UartHandle.Init.StopBits == UART_STOPBITS_1 ? 1 : 2);
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <uartinit+0xc0>)
 8000808:	68d2      	ldr	r2, [r2, #12]
	sprintf(msg, "UART initialization successfully. Parameters: %"PRIu32",%d,%s,%d\r\n",
 800080a:	2a00      	cmp	r2, #0
 800080c:	d101      	bne.n	8000812 <uartinit+0x8a>
 800080e:	2201      	movs	r2, #1
 8000810:	e000      	b.n	8000814 <uartinit+0x8c>
 8000812:	2202      	movs	r2, #2
 8000814:	1d38      	adds	r0, r7, #4
 8000816:	9201      	str	r2, [sp, #4]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4623      	mov	r3, r4
 800081c:	460a      	mov	r2, r1
 800081e:	490f      	ldr	r1, [pc, #60]	; (800085c <uartinit+0xd4>)
 8000820:	f001 fe90 	bl	8002544 <siprintf>

	HAL_UART_Transmit(&UartHandle, msg, strlen(msg), HAL_MAX_DELAY);
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fce2 	bl	80001f0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	1d39      	adds	r1, r7, #4
 8000832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <uartinit+0xc0>)
 8000838:	f001 fab1 	bl	8001d9e <HAL_UART_Transmit>

	return true;
 800083c:	2301      	movs	r3, #1
}
 800083e:	4618      	mov	r0, r3
 8000840:	378c      	adds	r7, #140	; 0x8c
 8000842:	46bd      	mov	sp, r7
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	bf00      	nop
 8000848:	200000ac 	.word	0x200000ac
 800084c:	40004800 	.word	0x40004800
 8000850:	08002de8 	.word	0x08002de8
 8000854:	08002dec 	.word	0x08002dec
 8000858:	08002df0 	.word	0x08002df0
 800085c:	08002df4 	.word	0x08002df4

08000860 <uartsendString>:
  * @brief  Sends string over UART
  * @param  pstring: Pointer to the string to be sent.
  *
  */
void uartsendString(uint8_t *pstring)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if (pstring == NULL)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00b      	beq.n	8000886 <uartsendString+0x26>
	{
		return;
	}

	HAL_UART_Transmit(&UartHandle, pstring, strlen(pstring), HAL_MAX_DELAY);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fcbe 	bl	80001f0 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	b29a      	uxth	r2, r3
 8000878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <uartsendString+0x30>)
 8000880:	f001 fa8d 	bl	8001d9e <HAL_UART_Transmit>
 8000884:	e000      	b.n	8000888 <uartsendString+0x28>
		return;
 8000886:	bf00      	nop
}
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000ac 	.word	0x200000ac

08000894 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10e      	bne.n	80008c2 <BSP_LED_Init+0x2e>
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <BSP_LED_Init+0x94>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <BSP_LED_Init+0x94>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	6313      	str	r3, [r2, #48]	; 0x30
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <BSP_LED_Init+0x94>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	e00d      	b.n	80008de <BSP_LED_Init+0x4a>
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <BSP_LED_Init+0x94>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <BSP_LED_Init+0x94>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <BSP_LED_Init+0x94>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <BSP_LED_Init+0x98>)
 80008e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <BSP_LED_Init+0x9c>)
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	f107 0214 	add.w	r2, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fae8 	bl	8000ed8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4a09      	ldr	r2, [pc, #36]	; (8000930 <BSP_LED_Init+0x9c>)
 800090c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4a06      	ldr	r2, [pc, #24]	; (800092c <BSP_LED_Init+0x98>)
 8000914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	f000 fca0 	bl	8001260 <HAL_GPIO_WritePin>
}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	08002e34 	.word	0x08002e34
 8000930:	20000000 	.word	0x20000000

08000934 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <BSP_LED_On+0x2c>)
 8000942:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <BSP_LED_On+0x30>)
 800094a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094e:	2201      	movs	r2, #1
 8000950:	4619      	mov	r1, r3
 8000952:	f000 fc85 	bl	8001260 <HAL_GPIO_WritePin>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000
 8000964:	08002e34 	.word	0x08002e34

08000968 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <BSP_LED_Off+0x2c>)
 8000976:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <BSP_LED_Off+0x30>)
 800097e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	f000 fc6b 	bl	8001260 <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000000 	.word	0x20000000
 8000998:	08002e34 	.word	0x08002e34

0800099c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <BSP_LED_Toggle+0x2c>)
 80009aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <BSP_LED_Toggle+0x30>)
 80009b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f000 fc6a 	bl	8001292 <HAL_GPIO_TogglePin>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000000 	.word	0x20000000
 80009cc:	08002e34 	.word	0x08002e34

080009d0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <BSP_PB_Init+0xa4>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <BSP_PB_Init+0xa4>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <BSP_PB_Init+0xa4>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d112      	bne.n	8000a28 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <BSP_PB_Init+0xa8>)
 8000a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1c:	f107 020c 	add.w	r2, r7, #12
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fa58 	bl	8000ed8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d11d      	bne.n	8000a6a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000a38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a3c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <BSP_PB_Init+0xa8>)
 8000a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a46:	f107 020c 	add.w	r2, r7, #12
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fa43 	bl	8000ed8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a52:	2328      	movs	r3, #40	; 0x28
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2200      	movs	r2, #0
 8000a58:	210f      	movs	r1, #15
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fa05 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a60:	2328      	movs	r3, #40	; 0x28
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa1c 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	2000000c 	.word	0x2000000c

08000a7c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <BSP_PB_GetState+0x28>)
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fbcb 	bl	8001230 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000000c 	.word	0x2000000c

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <SystemInit+0x60>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <SystemInit+0x60>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <SystemInit+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <SystemInit+0x64>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <SystemInit+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0x64>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <SystemInit+0x64>)
 8000ad4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000adc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <SystemInit+0x64>)
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <SystemInit+0x68>)
 8000ae2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <SystemInit+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <SystemInit+0x64>)
 8000aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SystemInit+0x60>)
 8000af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afc:	609a      	str	r2, [r3, #8]
#endif
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	24003010 	.word	0x24003010

08000b14 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b68:	f000 f884 	bl	8000c74 <HAL_IncTick>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f001 fca6 	bl	80024f0 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20030000 	.word	0x20030000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	200000f0 	.word	0x200000f0
 8000bd8:	20000110 	.word	0x20000110

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_Init+0x34>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_Init+0x34>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x34>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x34>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f92b 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f000 fbb2 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f943 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	f000 f90b 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000010 	.word	0x20000010
 8000c6c:	20000018 	.word	0x20000018
 8000c70:	20000014 	.word	0x20000014

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000018 	.word	0x20000018
 8000c98:	200000fc 	.word	0x200000fc

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000fc 	.word	0x200000fc

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e177      	b.n	80011e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8166 	bne.w	80011de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80c0 	beq.w	80011de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b66      	ldr	r3, [pc, #408]	; (80011fc <HAL_GPIO_Init+0x324>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a65      	ldr	r2, [pc, #404]	; (80011fc <HAL_GPIO_Init+0x324>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_GPIO_Init+0x324>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a61      	ldr	r2, [pc, #388]	; (8001200 <HAL_GPIO_Init+0x328>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_GPIO_Init+0x32c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d037      	beq.n	8001116 <HAL_GPIO_Init+0x23e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_GPIO_Init+0x330>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d031      	beq.n	8001112 <HAL_GPIO_Init+0x23a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a56      	ldr	r2, [pc, #344]	; (800120c <HAL_GPIO_Init+0x334>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x236>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a55      	ldr	r2, [pc, #340]	; (8001210 <HAL_GPIO_Init+0x338>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x232>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a54      	ldr	r2, [pc, #336]	; (8001214 <HAL_GPIO_Init+0x33c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x22e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a53      	ldr	r2, [pc, #332]	; (8001218 <HAL_GPIO_Init+0x340>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x22a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_GPIO_Init+0x344>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x226>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <HAL_GPIO_Init+0x348>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x222>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <HAL_GPIO_Init+0x34c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x21e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <HAL_GPIO_Init+0x350>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x21a>
 80010ee:	2309      	movs	r3, #9
 80010f0:	e012      	b.n	8001118 <HAL_GPIO_Init+0x240>
 80010f2:	230a      	movs	r3, #10
 80010f4:	e010      	b.n	8001118 <HAL_GPIO_Init+0x240>
 80010f6:	2308      	movs	r3, #8
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x240>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x240>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x240>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x240>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x240>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x240>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x240>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x240>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	; (8001200 <HAL_GPIO_Init+0x328>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <HAL_GPIO_Init+0x354>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a34      	ldr	r2, [pc, #208]	; (800122c <HAL_GPIO_Init+0x354>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b32      	ldr	r3, [pc, #200]	; (800122c <HAL_GPIO_Init+0x354>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a29      	ldr	r2, [pc, #164]	; (800122c <HAL_GPIO_Init+0x354>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <HAL_GPIO_Init+0x354>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_GPIO_Init+0x354>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_GPIO_Init+0x354>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_GPIO_Init+0x354>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae84 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40022000 	.word	0x40022000
 8001228:	40022400 	.word	0x40022400
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e001      	b.n	8001252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a4:	887a      	ldrh	r2, [r7, #2]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	400b      	ands	r3, r1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a22      	ldr	r2, [pc, #136]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_UART_MspInit+0x9c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_UART_MspInit+0x9c>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <HAL_UART_MspInit+0x9c>)
 8001312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_UART_MspInit+0x9c>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001336:	2307      	movs	r3, #7
 8001338:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <HAL_UART_MspInit+0xa0>)
 8001342:	f7ff fdc9 	bl	8000ed8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800134c:	2307      	movs	r3, #7
 800134e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4804      	ldr	r0, [pc, #16]	; (8001368 <HAL_UART_MspInit+0xa0>)
 8001358:	f7ff fdbe 	bl	8000ed8 <HAL_GPIO_Init>
}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	40020c00 	.word	0x40020c00

0800136c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_PWREx_EnableOverDrive+0x90>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_PWREx_EnableOverDrive+0x90>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_PWREx_EnableOverDrive+0x90>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_PWREx_EnableOverDrive+0x94>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a8:	f7ff fc78 	bl	8000c9c <HAL_GetTick>
 80013ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013ae:	e009      	b.n	80013c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013b0:	f7ff fc74 	bl	8000c9c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013be:	d901      	bls.n	80013c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e01f      	b.n	8001404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_PWREx_EnableOverDrive+0x98>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d1ee      	bne.n	80013b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d8:	f7ff fc60 	bl	8000c9c <HAL_GetTick>
 80013dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013de:	e009      	b.n	80013f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013e0:	f7ff fc5c 	bl	8000c9c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ee:	d901      	bls.n	80013f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e007      	b.n	8001404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001400:	d1ee      	bne.n	80013e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	420e0040 	.word	0x420e0040
 8001414:	40007000 	.word	0x40007000
 8001418:	420e0044 	.word	0x420e0044

0800141c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e264      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143a:	4ba3      	ldr	r3, [pc, #652]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00c      	beq.n	8001460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001446:	4ba0      	ldr	r3, [pc, #640]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	2b08      	cmp	r3, #8
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05b      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d157      	bne.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e23f      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x74>
 8001482:	4b91      	ldr	r3, [pc, #580]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a90      	ldr	r2, [pc, #576]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a8a      	ldr	r2, [pc, #552]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a87      	ldr	r2, [pc, #540]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a83      	ldr	r2, [pc, #524]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a80      	ldr	r2, [pc, #512]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fbe2 	bl	8000c9c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fbde 	bl	8000c9c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e204      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xc0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fbce 	bl	8000c9c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fbca 	bl	8000c9c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1f0      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0xe8>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153e:	4b62      	ldr	r3, [pc, #392]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1c4      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4952      	ldr	r1, [pc, #328]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <HAL_RCC_OscConfig+0x2b0>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fb83 	bl	8000c9c <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fb7f 	bl	8000c9c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1a5      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4940      	ldr	r1, [pc, #256]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_RCC_OscConfig+0x2b0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb62 	bl	8000c9c <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fb5e 	bl	8000c9c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e184      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d030      	beq.n	8001668 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d016      	beq.n	800163c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_RCC_OscConfig+0x2b4>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fb42 	bl	8000c9c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fb3e 	bl	8000c9c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e164      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
 800163a:	e015      	b.n	8001668 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_OscConfig+0x2b4>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fb2b 	bl	8000c9c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fb27 	bl	8000c9c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e14d      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a0 	beq.w	80017b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10f      	bne.n	80016a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x2b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d121      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_RCC_OscConfig+0x2b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_RCC_OscConfig+0x2b8>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016be:	f7ff faed 	bl	8000c9c <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	e011      	b.n	80016ea <HAL_RCC_OscConfig+0x2ce>
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	42470000 	.word	0x42470000
 80016d0:	42470e80 	.word	0x42470e80
 80016d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff fae0 	bl	8000c9c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e106      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b85      	ldr	r3, [pc, #532]	; (8001900 <HAL_RCC_OscConfig+0x4e4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x2f0>
 80016fe:	4b81      	ldr	r3, [pc, #516]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a80      	ldr	r2, [pc, #512]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
 800170a:	e01c      	b.n	8001746 <HAL_RCC_OscConfig+0x32a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x312>
 8001714:	4b7b      	ldr	r3, [pc, #492]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a7a      	ldr	r2, [pc, #488]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
 8001720:	4b78      	ldr	r3, [pc, #480]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a77      	ldr	r2, [pc, #476]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x32a>
 800172e:	4b75      	ldr	r3, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a74      	ldr	r2, [pc, #464]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	4b72      	ldr	r3, [pc, #456]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a71      	ldr	r2, [pc, #452]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff faa5 	bl	8000c9c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff faa1 	bl	8000c9c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0c5      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ee      	beq.n	8001756 <HAL_RCC_OscConfig+0x33a>
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fa8f 	bl	8000c9c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fa8b 	bl	8000c9c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0af      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d105      	bne.n	80017b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a55      	ldr	r2, [pc, #340]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 809b 	beq.w	80018f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d05c      	beq.n	8001886 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d141      	bne.n	8001858 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fa5f 	bl	8000c9c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fa5b 	bl	8000c9c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e081      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69da      	ldr	r2, [r3, #28]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	019b      	lsls	r3, r3, #6
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	3b01      	subs	r3, #1
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_OscConfig+0x4ec>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fa34 	bl	8000c9c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fa30 	bl	8000c9c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e056      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x41c>
 8001856:	e04e      	b.n	80018f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_OscConfig+0x4ec>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff fa1d 	bl	8000c9c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff fa19 	bl	8000c9c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e03f      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x44a>
 8001884:	e037      	b.n	80018f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e032      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_RCC_OscConfig+0x4e8>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d028      	beq.n	80018f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d121      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d11a      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d111      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40007000 	.word	0x40007000
 8001904:	40023800 	.word	0x40023800
 8001908:	42470060 	.word	0x42470060

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0cc      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d90c      	bls.n	8001948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d044      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d119      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e067      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4934      	ldr	r1, [pc, #208]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff f94e 	bl	8000c9c <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff f94a 	bl	8000c9c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f8ae 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08002e3c 	.word	0x08002e3c
 8001ad0:	20000010 	.word	0x20000010
 8001ad4:	20000014 	.word	0x20000014

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80bd 	bhi.w	8001c7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e0b7      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b61      	ldr	r3, [pc, #388]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b0e:	60bb      	str	r3, [r7, #8]
       break;
 8001b10:	e0b7      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b14:	60bb      	str	r3, [r7, #8]
      break;
 8001b16:	e0b4      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b5d      	ldr	r3, [pc, #372]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b22:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d04d      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b58      	ldr	r3, [pc, #352]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	461a      	mov	r2, r3
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	ea02 0800 	and.w	r8, r2, r0
 8001b46:	ea03 0901 	and.w	r9, r3, r1
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	014b      	lsls	r3, r1, #5
 8001b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b5c:	0142      	lsls	r2, r0, #5
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	ebb0 0008 	subs.w	r0, r0, r8
 8001b66:	eb61 0109 	sbc.w	r1, r1, r9
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	018b      	lsls	r3, r1, #6
 8001b74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b78:	0182      	lsls	r2, r0, #6
 8001b7a:	1a12      	subs	r2, r2, r0
 8001b7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	00d9      	lsls	r1, r3, #3
 8001b8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b8e:	00d0      	lsls	r0, r2, #3
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	eb12 0208 	adds.w	r2, r2, r8
 8001b98:	eb43 0309 	adc.w	r3, r3, r9
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	0259      	lsls	r1, r3, #9
 8001ba6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001baa:	0250      	lsls	r0, r2, #9
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	f7fe fb70 	bl	80002a0 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e04a      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	ea02 0400 	and.w	r4, r2, r0
 8001be2:	ea03 0501 	and.w	r5, r3, r1
 8001be6:	4620      	mov	r0, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	014b      	lsls	r3, r1, #5
 8001bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf8:	0142      	lsls	r2, r0, #5
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	1b00      	subs	r0, r0, r4
 8001c00:	eb61 0105 	sbc.w	r1, r1, r5
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	018b      	lsls	r3, r1, #6
 8001c0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c12:	0182      	lsls	r2, r0, #6
 8001c14:	1a12      	subs	r2, r2, r0
 8001c16:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1a:	f04f 0000 	mov.w	r0, #0
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	00d9      	lsls	r1, r3, #3
 8001c24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c28:	00d0      	lsls	r0, r2, #3
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	1912      	adds	r2, r2, r4
 8001c30:	eb45 0303 	adc.w	r3, r5, r3
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	0299      	lsls	r1, r3, #10
 8001c3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c42:	0290      	lsls	r0, r2, #10
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f7fe fb24 	bl	80002a0 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	60bb      	str	r3, [r7, #8]
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c7e:	60bb      	str	r3, [r7, #8]
      break;
 8001c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c82:	68bb      	ldr	r3, [r7, #8]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	007a1200 	.word	0x007a1200

08001c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000010 	.word	0x20000010

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb8:	f7ff fff0 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4903      	ldr	r1, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08002e4c 	.word	0x08002e4c

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ce0:	f7ff ffdc 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0b5b      	lsrs	r3, r3, #13
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08002e4c 	.word	0x08002e4c

08001d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e03f      	b.n	8001d96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff facc 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2224      	movs	r2, #36	; 0x24
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f929 	bl	8001fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b08a      	sub	sp, #40	; 0x28
 8001da2:	af02      	add	r7, sp, #8
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d17c      	bne.n	8001eb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_UART_Transmit+0x2c>
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e075      	b.n	8001eba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_UART_Transmit+0x3e>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e06e      	b.n	8001eba <HAL_UART_Transmit+0x11c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2221      	movs	r2, #33	; 0x21
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001df2:	f7fe ff53 	bl	8000c9c <HAL_GetTick>
 8001df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0c:	d108      	bne.n	8001e20 <HAL_UART_Transmit+0x82>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	e003      	b.n	8001e28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e30:	e02a      	b.n	8001e88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f840 	bl	8001ec2 <UART_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e036      	b.n	8001eba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10b      	bne.n	8001e6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3302      	adds	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e007      	b.n	8001e7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1cf      	bne.n	8001e32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2140      	movs	r1, #64	; 0x40
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f810 	bl	8001ec2 <UART_WaitOnFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e006      	b.n	8001eba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b090      	sub	sp, #64	; 0x40
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ed2:	e050      	b.n	8001f76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eda:	d04c      	beq.n	8001f76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ee2:	f7fe fedb 	bl	8000c9c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d241      	bcs.n	8001f76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	e853 3f00 	ldrex	r3, [r3]
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	330c      	adds	r3, #12
 8001f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f12:	637a      	str	r2, [r7, #52]	; 0x34
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f1a:	e841 2300 	strex	r3, r2, [r1]
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1e5      	bne.n	8001ef2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	e853 3f00 	ldrex	r3, [r3]
 8001f34:	613b      	str	r3, [r7, #16]
   return(result);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3314      	adds	r3, #20
 8001f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f46:	623a      	str	r2, [r7, #32]
 8001f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4a:	69f9      	ldr	r1, [r7, #28]
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	e841 2300 	strex	r3, r2, [r1]
 8001f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1e5      	bne.n	8001f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e00f      	b.n	8001f96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d09f      	beq.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3740      	adds	r7, #64	; 0x40
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	b09f      	sub	sp, #124	; 0x7c
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb6:	68d9      	ldr	r1, [r3, #12]
 8001fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	ea40 0301 	orr.w	r3, r0, r1
 8001fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fe4:	f021 010c 	bic.w	r1, r1, #12
 8001fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ffe:	6999      	ldr	r1, [r3, #24]
 8002000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	ea40 0301 	orr.w	r3, r0, r1
 8002008:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800200a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4bc5      	ldr	r3, [pc, #788]	; (8002324 <UART_SetConfig+0x384>)
 8002010:	429a      	cmp	r2, r3
 8002012:	d004      	beq.n	800201e <UART_SetConfig+0x7e>
 8002014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4bc3      	ldr	r3, [pc, #780]	; (8002328 <UART_SetConfig+0x388>)
 800201a:	429a      	cmp	r2, r3
 800201c:	d103      	bne.n	8002026 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800201e:	f7ff fe5d 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002022:	6778      	str	r0, [r7, #116]	; 0x74
 8002024:	e002      	b.n	800202c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002026:	f7ff fe45 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 800202a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002034:	f040 80b6 	bne.w	80021a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203a:	461c      	mov	r4, r3
 800203c:	f04f 0500 	mov.w	r5, #0
 8002040:	4622      	mov	r2, r4
 8002042:	462b      	mov	r3, r5
 8002044:	1891      	adds	r1, r2, r2
 8002046:	6439      	str	r1, [r7, #64]	; 0x40
 8002048:	415b      	adcs	r3, r3
 800204a:	647b      	str	r3, [r7, #68]	; 0x44
 800204c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002050:	1912      	adds	r2, r2, r4
 8002052:	eb45 0303 	adc.w	r3, r5, r3
 8002056:	f04f 0000 	mov.w	r0, #0
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	00d9      	lsls	r1, r3, #3
 8002060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002064:	00d0      	lsls	r0, r2, #3
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	1911      	adds	r1, r2, r4
 800206c:	6639      	str	r1, [r7, #96]	; 0x60
 800206e:	416b      	adcs	r3, r5
 8002070:	667b      	str	r3, [r7, #100]	; 0x64
 8002072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	461a      	mov	r2, r3
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	1891      	adds	r1, r2, r2
 800207e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002080:	415b      	adcs	r3, r3
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002088:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800208c:	f7fe f908 	bl	80002a0 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4ba5      	ldr	r3, [pc, #660]	; (800232c <UART_SetConfig+0x38c>)
 8002096:	fba3 2302 	umull	r2, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	011e      	lsls	r6, r3, #4
 800209e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a0:	461c      	mov	r4, r3
 80020a2:	f04f 0500 	mov.w	r5, #0
 80020a6:	4622      	mov	r2, r4
 80020a8:	462b      	mov	r3, r5
 80020aa:	1891      	adds	r1, r2, r2
 80020ac:	6339      	str	r1, [r7, #48]	; 0x30
 80020ae:	415b      	adcs	r3, r3
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
 80020b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020b6:	1912      	adds	r2, r2, r4
 80020b8:	eb45 0303 	adc.w	r3, r5, r3
 80020bc:	f04f 0000 	mov.w	r0, #0
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	00d9      	lsls	r1, r3, #3
 80020c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020ca:	00d0      	lsls	r0, r2, #3
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	1911      	adds	r1, r2, r4
 80020d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80020d4:	416b      	adcs	r3, r5
 80020d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	461a      	mov	r2, r3
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	1891      	adds	r1, r2, r2
 80020e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80020e6:	415b      	adcs	r3, r3
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80020f2:	f7fe f8d5 	bl	80002a0 <__aeabi_uldivmod>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4b8c      	ldr	r3, [pc, #560]	; (800232c <UART_SetConfig+0x38c>)
 80020fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	2164      	movs	r1, #100	; 0x64
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	3332      	adds	r3, #50	; 0x32
 800210e:	4a87      	ldr	r2, [pc, #540]	; (800232c <UART_SetConfig+0x38c>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800211c:	441e      	add	r6, r3
 800211e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002120:	4618      	mov	r0, r3
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	1894      	adds	r4, r2, r2
 800212c:	623c      	str	r4, [r7, #32]
 800212e:	415b      	adcs	r3, r3
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002136:	1812      	adds	r2, r2, r0
 8002138:	eb41 0303 	adc.w	r3, r1, r3
 800213c:	f04f 0400 	mov.w	r4, #0
 8002140:	f04f 0500 	mov.w	r5, #0
 8002144:	00dd      	lsls	r5, r3, #3
 8002146:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800214a:	00d4      	lsls	r4, r2, #3
 800214c:	4622      	mov	r2, r4
 800214e:	462b      	mov	r3, r5
 8002150:	1814      	adds	r4, r2, r0
 8002152:	653c      	str	r4, [r7, #80]	; 0x50
 8002154:	414b      	adcs	r3, r1
 8002156:	657b      	str	r3, [r7, #84]	; 0x54
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	461a      	mov	r2, r3
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	1891      	adds	r1, r2, r2
 8002164:	61b9      	str	r1, [r7, #24]
 8002166:	415b      	adcs	r3, r3
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800216e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002172:	f7fe f895 	bl	80002a0 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4b6c      	ldr	r3, [pc, #432]	; (800232c <UART_SetConfig+0x38c>)
 800217c:	fba3 1302 	umull	r1, r3, r3, r2
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	2164      	movs	r1, #100	; 0x64
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	3332      	adds	r3, #50	; 0x32
 800218e:	4a67      	ldr	r2, [pc, #412]	; (800232c <UART_SetConfig+0x38c>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4432      	add	r2, r6
 80021a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021a2:	e0b9      	b.n	8002318 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a6:	461c      	mov	r4, r3
 80021a8:	f04f 0500 	mov.w	r5, #0
 80021ac:	4622      	mov	r2, r4
 80021ae:	462b      	mov	r3, r5
 80021b0:	1891      	adds	r1, r2, r2
 80021b2:	6139      	str	r1, [r7, #16]
 80021b4:	415b      	adcs	r3, r3
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021bc:	1912      	adds	r2, r2, r4
 80021be:	eb45 0303 	adc.w	r3, r5, r3
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	00d9      	lsls	r1, r3, #3
 80021cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021d0:	00d0      	lsls	r0, r2, #3
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	eb12 0804 	adds.w	r8, r2, r4
 80021da:	eb43 0905 	adc.w	r9, r3, r5
 80021de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	008b      	lsls	r3, r1, #2
 80021f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80021f6:	0082      	lsls	r2, r0, #2
 80021f8:	4640      	mov	r0, r8
 80021fa:	4649      	mov	r1, r9
 80021fc:	f7fe f850 	bl	80002a0 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4b49      	ldr	r3, [pc, #292]	; (800232c <UART_SetConfig+0x38c>)
 8002206:	fba3 2302 	umull	r2, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	011e      	lsls	r6, r3, #4
 800220e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002210:	4618      	mov	r0, r3
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	1894      	adds	r4, r2, r2
 800221c:	60bc      	str	r4, [r7, #8]
 800221e:	415b      	adcs	r3, r3
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002226:	1812      	adds	r2, r2, r0
 8002228:	eb41 0303 	adc.w	r3, r1, r3
 800222c:	f04f 0400 	mov.w	r4, #0
 8002230:	f04f 0500 	mov.w	r5, #0
 8002234:	00dd      	lsls	r5, r3, #3
 8002236:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800223a:	00d4      	lsls	r4, r2, #3
 800223c:	4622      	mov	r2, r4
 800223e:	462b      	mov	r3, r5
 8002240:	1814      	adds	r4, r2, r0
 8002242:	64bc      	str	r4, [r7, #72]	; 0x48
 8002244:	414b      	adcs	r3, r1
 8002246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4618      	mov	r0, r3
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	008b      	lsls	r3, r1, #2
 800225c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002260:	0082      	lsls	r2, r0, #2
 8002262:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002266:	f7fe f81b 	bl	80002a0 <__aeabi_uldivmod>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <UART_SetConfig+0x38c>)
 8002270:	fba3 1302 	umull	r1, r3, r3, r2
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	2164      	movs	r1, #100	; 0x64
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	3332      	adds	r3, #50	; 0x32
 8002282:	4a2a      	ldr	r2, [pc, #168]	; (800232c <UART_SetConfig+0x38c>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228e:	441e      	add	r6, r3
 8002290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002292:	4618      	mov	r0, r3
 8002294:	f04f 0100 	mov.w	r1, #0
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	1894      	adds	r4, r2, r2
 800229e:	603c      	str	r4, [r7, #0]
 80022a0:	415b      	adcs	r3, r3
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022a8:	1812      	adds	r2, r2, r0
 80022aa:	eb41 0303 	adc.w	r3, r1, r3
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	f04f 0500 	mov.w	r5, #0
 80022b6:	00dd      	lsls	r5, r3, #3
 80022b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022bc:	00d4      	lsls	r4, r2, #3
 80022be:	4622      	mov	r2, r4
 80022c0:	462b      	mov	r3, r5
 80022c2:	eb12 0a00 	adds.w	sl, r2, r0
 80022c6:	eb43 0b01 	adc.w	fp, r3, r1
 80022ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f04f 0100 	mov.w	r1, #0
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	008b      	lsls	r3, r1, #2
 80022de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022e2:	0082      	lsls	r2, r0, #2
 80022e4:	4650      	mov	r0, sl
 80022e6:	4659      	mov	r1, fp
 80022e8:	f7fd ffda 	bl	80002a0 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <UART_SetConfig+0x38c>)
 80022f2:	fba3 1302 	umull	r1, r3, r3, r2
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2164      	movs	r1, #100	; 0x64
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	3332      	adds	r3, #50	; 0x32
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <UART_SetConfig+0x38c>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f003 020f 	and.w	r2, r3, #15
 8002310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4432      	add	r2, r6
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	377c      	adds	r7, #124	; 0x7c
 800231c:	46bd      	mov	sp, r7
 800231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002322:	bf00      	nop
 8002324:	40011000 	.word	0x40011000
 8002328:	40011400 	.word	0x40011400
 800232c:	51eb851f 	.word	0x51eb851f

08002330 <turn_off_leds>:
  * @brief  Turn off all LEDs
  * @param  None
  * @retval None
  */
static void turn_off_leds(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8002334:	2000      	movs	r0, #0
 8002336:	f7fe fb17 	bl	8000968 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 800233a:	2001      	movs	r0, #1
 800233c:	f7fe fb14 	bl	8000968 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 8002340:	2002      	movs	r0, #2
 8002342:	f7fe fb11 	bl	8000968 <BSP_LED_Off>
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}

0800234a <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002350:	f7fe fc44 	bl	8000bdc <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002354:	f000 f83a 	bl	80023cc <SystemClock_Config>

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 8002358:	2000      	movs	r0, #0
 800235a:	f7fe fa9b 	bl	8000894 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800235e:	2001      	movs	r0, #1
 8002360:	f7fe fa98 	bl	8000894 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002364:	2002      	movs	r0, #2
 8002366:	f7fe fa95 	bl	8000894 <BSP_LED_Init>

  /* Turing off LEDs */
  turn_off_leds();
 800236a:	f7ff ffe1 	bl	8002330 <turn_off_leds>

  /* Initializing button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800236e:	2100      	movs	r1, #0
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fb2d 	bl	80009d0 <BSP_PB_Init>

  /* LED2 delay initialization */
  delay_t delay_led;
  uint32_t duration = LED_DELAY;
 8002376:	2364      	movs	r3, #100	; 0x64
 8002378:	60fb      	str	r3, [r7, #12]
  delayInit(&delay_led, duration);
 800237a:	463b      	mov	r3, r7
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f9a4 	bl	80006cc <delayInit>

  /* Initialization machine state */
  debounceFSM_init();
 8002384:	f7fe f908 	bl	8000598 <debounceFSM_init>
   * Parity: None
   * Word length: 8 bits
   * Stop bits: 1
   *
   */
  uartinit();
 8002388:	f7fe f9fe 	bl	8000788 <uartinit>

  /* Infinite loop */
  while (1)
  {
	  /* Updating machine state */
	  debounceFSM_update();
 800238c:	f7fe f910 	bl	80005b0 <debounceFSM_update>

	  if (readKey())
 8002390:	f7fe f984 	bl	800069c <readKey>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <main+0x6a>
	  {
		  /* Button has been pressed */

		  duration = (duration == 100) ? 500 : 100;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d102      	bne.n	80023a6 <main+0x5c>
 80023a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023a4:	e000      	b.n	80023a8 <main+0x5e>
 80023a6:	2364      	movs	r3, #100	; 0x64
 80023a8:	60fb      	str	r3, [r7, #12]

		  /* Changing delay duration */
		  delayWrite(&delay_led, duration);
 80023aa:	463b      	mov	r3, r7
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f9d2 	bl	8000758 <delayWrite>
	  }


	  if (delayRead(&delay_led))
 80023b4:	463b      	mov	r3, r7
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f9a0 	bl	80006fc <delayRead>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0e4      	beq.n	800238c <main+0x42>
	  {
		  /* Delay has been elapsed */
		  BSP_LED_Toggle(LED2);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7fe faea 	bl	800099c <BSP_LED_Toggle>
	  debounceFSM_update();
 80023c8:	e7e0      	b.n	800238c <main+0x42>
	...

080023cc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b094      	sub	sp, #80	; 0x50
 80023d0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <SystemClock_Config+0xbc>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a2b      	ldr	r2, [pc, #172]	; (8002488 <SystemClock_Config+0xbc>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <SystemClock_Config+0xbc>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <SystemClock_Config+0xc0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <SystemClock_Config+0xc0>)
 80023f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <SystemClock_Config+0xc0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800240a:	2301      	movs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800240e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002412:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002414:	2302      	movs	r3, #2
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002418:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800241e:	2308      	movs	r3, #8
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002422:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002428:	2302      	movs	r3, #2
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800242c:	2307      	movs	r3, #7
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fff1 	bl	800141c <HAL_RCC_OscConfig>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002440:	f000 f826 	bl	8002490 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002444:	f7fe ff9a 	bl	800137c <HAL_PWREx_EnableOverDrive>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800244e:	f000 f81f 	bl	8002490 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002452:	230f      	movs	r3, #15
 8002454:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002456:	2302      	movs	r3, #2
 8002458:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245a:	2300      	movs	r3, #0
 800245c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800245e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002468:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800246a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800246e:	2105      	movs	r1, #5
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fa4b 	bl	800190c <HAL_RCC_ClockConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 800247c:	f000 f808 	bl	8002490 <Error_Handler>
  }
}
 8002480:	bf00      	nop
 8002482:	3750      	adds	r7, #80	; 0x50
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000

08002490 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002494:	2001      	movs	r0, #1
 8002496:	f7fe fa4d 	bl	8000934 <BSP_LED_On>
  while (1)
 800249a:	e7fe      	b.n	800249a <Error_Handler+0xa>

0800249c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024a2:	e003      	b.n	80024ac <LoopCopyDataInit>

080024a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024aa:	3104      	adds	r1, #4

080024ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024ac:	480b      	ldr	r0, [pc, #44]	; (80024dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024b4:	d3f6      	bcc.n	80024a4 <CopyDataInit>
  ldr  r2, =_sbss
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024b8:	e002      	b.n	80024c0 <LoopFillZerobss>

080024ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024bc:	f842 3b04 	str.w	r3, [r2], #4

080024c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024c4:	d3f9      	bcc.n	80024ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024c6:	f7fe faef 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ca:	f000 f817 	bl	80024fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ce:	f7ff ff3c 	bl	800234a <main>
  bx  lr    
 80024d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024d4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80024d8:	08002e98 	.word	0x08002e98
  ldr  r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024e0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80024e4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80024e8:	20000110 	.word	0x20000110

080024ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC_IRQHandler>
	...

080024f0 <__errno>:
 80024f0:	4b01      	ldr	r3, [pc, #4]	; (80024f8 <__errno+0x8>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	2000001c 	.word	0x2000001c

080024fc <__libc_init_array>:
 80024fc:	b570      	push	{r4, r5, r6, lr}
 80024fe:	4d0d      	ldr	r5, [pc, #52]	; (8002534 <__libc_init_array+0x38>)
 8002500:	4c0d      	ldr	r4, [pc, #52]	; (8002538 <__libc_init_array+0x3c>)
 8002502:	1b64      	subs	r4, r4, r5
 8002504:	10a4      	asrs	r4, r4, #2
 8002506:	2600      	movs	r6, #0
 8002508:	42a6      	cmp	r6, r4
 800250a:	d109      	bne.n	8002520 <__libc_init_array+0x24>
 800250c:	4d0b      	ldr	r5, [pc, #44]	; (800253c <__libc_init_array+0x40>)
 800250e:	4c0c      	ldr	r4, [pc, #48]	; (8002540 <__libc_init_array+0x44>)
 8002510:	f000 fc46 	bl	8002da0 <_init>
 8002514:	1b64      	subs	r4, r4, r5
 8002516:	10a4      	asrs	r4, r4, #2
 8002518:	2600      	movs	r6, #0
 800251a:	42a6      	cmp	r6, r4
 800251c:	d105      	bne.n	800252a <__libc_init_array+0x2e>
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	f855 3b04 	ldr.w	r3, [r5], #4
 8002524:	4798      	blx	r3
 8002526:	3601      	adds	r6, #1
 8002528:	e7ee      	b.n	8002508 <__libc_init_array+0xc>
 800252a:	f855 3b04 	ldr.w	r3, [r5], #4
 800252e:	4798      	blx	r3
 8002530:	3601      	adds	r6, #1
 8002532:	e7f2      	b.n	800251a <__libc_init_array+0x1e>
 8002534:	08002e90 	.word	0x08002e90
 8002538:	08002e90 	.word	0x08002e90
 800253c:	08002e90 	.word	0x08002e90
 8002540:	08002e94 	.word	0x08002e94

08002544 <siprintf>:
 8002544:	b40e      	push	{r1, r2, r3}
 8002546:	b500      	push	{lr}
 8002548:	b09c      	sub	sp, #112	; 0x70
 800254a:	ab1d      	add	r3, sp, #116	; 0x74
 800254c:	9002      	str	r0, [sp, #8]
 800254e:	9006      	str	r0, [sp, #24]
 8002550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002554:	4809      	ldr	r0, [pc, #36]	; (800257c <siprintf+0x38>)
 8002556:	9107      	str	r1, [sp, #28]
 8002558:	9104      	str	r1, [sp, #16]
 800255a:	4909      	ldr	r1, [pc, #36]	; (8002580 <siprintf+0x3c>)
 800255c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002560:	9105      	str	r1, [sp, #20]
 8002562:	6800      	ldr	r0, [r0, #0]
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	a902      	add	r1, sp, #8
 8002568:	f000 f868 	bl	800263c <_svfiprintf_r>
 800256c:	9b02      	ldr	r3, [sp, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	b01c      	add	sp, #112	; 0x70
 8002574:	f85d eb04 	ldr.w	lr, [sp], #4
 8002578:	b003      	add	sp, #12
 800257a:	4770      	bx	lr
 800257c:	2000001c 	.word	0x2000001c
 8002580:	ffff0208 	.word	0xffff0208

08002584 <__ssputs_r>:
 8002584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002588:	688e      	ldr	r6, [r1, #8]
 800258a:	429e      	cmp	r6, r3
 800258c:	4682      	mov	sl, r0
 800258e:	460c      	mov	r4, r1
 8002590:	4690      	mov	r8, r2
 8002592:	461f      	mov	r7, r3
 8002594:	d838      	bhi.n	8002608 <__ssputs_r+0x84>
 8002596:	898a      	ldrh	r2, [r1, #12]
 8002598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800259c:	d032      	beq.n	8002604 <__ssputs_r+0x80>
 800259e:	6825      	ldr	r5, [r4, #0]
 80025a0:	6909      	ldr	r1, [r1, #16]
 80025a2:	eba5 0901 	sub.w	r9, r5, r1
 80025a6:	6965      	ldr	r5, [r4, #20]
 80025a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025b0:	3301      	adds	r3, #1
 80025b2:	444b      	add	r3, r9
 80025b4:	106d      	asrs	r5, r5, #1
 80025b6:	429d      	cmp	r5, r3
 80025b8:	bf38      	it	cc
 80025ba:	461d      	movcc	r5, r3
 80025bc:	0553      	lsls	r3, r2, #21
 80025be:	d531      	bpl.n	8002624 <__ssputs_r+0xa0>
 80025c0:	4629      	mov	r1, r5
 80025c2:	f000 fb47 	bl	8002c54 <_malloc_r>
 80025c6:	4606      	mov	r6, r0
 80025c8:	b950      	cbnz	r0, 80025e0 <__ssputs_r+0x5c>
 80025ca:	230c      	movs	r3, #12
 80025cc:	f8ca 3000 	str.w	r3, [sl]
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e0:	6921      	ldr	r1, [r4, #16]
 80025e2:	464a      	mov	r2, r9
 80025e4:	f000 fabe 	bl	8002b64 <memcpy>
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f2:	81a3      	strh	r3, [r4, #12]
 80025f4:	6126      	str	r6, [r4, #16]
 80025f6:	6165      	str	r5, [r4, #20]
 80025f8:	444e      	add	r6, r9
 80025fa:	eba5 0509 	sub.w	r5, r5, r9
 80025fe:	6026      	str	r6, [r4, #0]
 8002600:	60a5      	str	r5, [r4, #8]
 8002602:	463e      	mov	r6, r7
 8002604:	42be      	cmp	r6, r7
 8002606:	d900      	bls.n	800260a <__ssputs_r+0x86>
 8002608:	463e      	mov	r6, r7
 800260a:	4632      	mov	r2, r6
 800260c:	6820      	ldr	r0, [r4, #0]
 800260e:	4641      	mov	r1, r8
 8002610:	f000 fab6 	bl	8002b80 <memmove>
 8002614:	68a3      	ldr	r3, [r4, #8]
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	1b9b      	subs	r3, r3, r6
 800261a:	4432      	add	r2, r6
 800261c:	60a3      	str	r3, [r4, #8]
 800261e:	6022      	str	r2, [r4, #0]
 8002620:	2000      	movs	r0, #0
 8002622:	e7db      	b.n	80025dc <__ssputs_r+0x58>
 8002624:	462a      	mov	r2, r5
 8002626:	f000 fb6f 	bl	8002d08 <_realloc_r>
 800262a:	4606      	mov	r6, r0
 800262c:	2800      	cmp	r0, #0
 800262e:	d1e1      	bne.n	80025f4 <__ssputs_r+0x70>
 8002630:	6921      	ldr	r1, [r4, #16]
 8002632:	4650      	mov	r0, sl
 8002634:	f000 fabe 	bl	8002bb4 <_free_r>
 8002638:	e7c7      	b.n	80025ca <__ssputs_r+0x46>
	...

0800263c <_svfiprintf_r>:
 800263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002640:	4698      	mov	r8, r3
 8002642:	898b      	ldrh	r3, [r1, #12]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	b09d      	sub	sp, #116	; 0x74
 8002648:	4607      	mov	r7, r0
 800264a:	460d      	mov	r5, r1
 800264c:	4614      	mov	r4, r2
 800264e:	d50e      	bpl.n	800266e <_svfiprintf_r+0x32>
 8002650:	690b      	ldr	r3, [r1, #16]
 8002652:	b963      	cbnz	r3, 800266e <_svfiprintf_r+0x32>
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	f000 fafd 	bl	8002c54 <_malloc_r>
 800265a:	6028      	str	r0, [r5, #0]
 800265c:	6128      	str	r0, [r5, #16]
 800265e:	b920      	cbnz	r0, 800266a <_svfiprintf_r+0x2e>
 8002660:	230c      	movs	r3, #12
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002668:	e0d1      	b.n	800280e <_svfiprintf_r+0x1d2>
 800266a:	2340      	movs	r3, #64	; 0x40
 800266c:	616b      	str	r3, [r5, #20]
 800266e:	2300      	movs	r3, #0
 8002670:	9309      	str	r3, [sp, #36]	; 0x24
 8002672:	2320      	movs	r3, #32
 8002674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002678:	f8cd 800c 	str.w	r8, [sp, #12]
 800267c:	2330      	movs	r3, #48	; 0x30
 800267e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002828 <_svfiprintf_r+0x1ec>
 8002682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002686:	f04f 0901 	mov.w	r9, #1
 800268a:	4623      	mov	r3, r4
 800268c:	469a      	mov	sl, r3
 800268e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002692:	b10a      	cbz	r2, 8002698 <_svfiprintf_r+0x5c>
 8002694:	2a25      	cmp	r2, #37	; 0x25
 8002696:	d1f9      	bne.n	800268c <_svfiprintf_r+0x50>
 8002698:	ebba 0b04 	subs.w	fp, sl, r4
 800269c:	d00b      	beq.n	80026b6 <_svfiprintf_r+0x7a>
 800269e:	465b      	mov	r3, fp
 80026a0:	4622      	mov	r2, r4
 80026a2:	4629      	mov	r1, r5
 80026a4:	4638      	mov	r0, r7
 80026a6:	f7ff ff6d 	bl	8002584 <__ssputs_r>
 80026aa:	3001      	adds	r0, #1
 80026ac:	f000 80aa 	beq.w	8002804 <_svfiprintf_r+0x1c8>
 80026b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026b2:	445a      	add	r2, fp
 80026b4:	9209      	str	r2, [sp, #36]	; 0x24
 80026b6:	f89a 3000 	ldrb.w	r3, [sl]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80a2 	beq.w	8002804 <_svfiprintf_r+0x1c8>
 80026c0:	2300      	movs	r3, #0
 80026c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026ca:	f10a 0a01 	add.w	sl, sl, #1
 80026ce:	9304      	str	r3, [sp, #16]
 80026d0:	9307      	str	r3, [sp, #28]
 80026d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026d6:	931a      	str	r3, [sp, #104]	; 0x68
 80026d8:	4654      	mov	r4, sl
 80026da:	2205      	movs	r2, #5
 80026dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026e0:	4851      	ldr	r0, [pc, #324]	; (8002828 <_svfiprintf_r+0x1ec>)
 80026e2:	f7fd fd8d 	bl	8000200 <memchr>
 80026e6:	9a04      	ldr	r2, [sp, #16]
 80026e8:	b9d8      	cbnz	r0, 8002722 <_svfiprintf_r+0xe6>
 80026ea:	06d0      	lsls	r0, r2, #27
 80026ec:	bf44      	itt	mi
 80026ee:	2320      	movmi	r3, #32
 80026f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026f4:	0711      	lsls	r1, r2, #28
 80026f6:	bf44      	itt	mi
 80026f8:	232b      	movmi	r3, #43	; 0x2b
 80026fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002702:	2b2a      	cmp	r3, #42	; 0x2a
 8002704:	d015      	beq.n	8002732 <_svfiprintf_r+0xf6>
 8002706:	9a07      	ldr	r2, [sp, #28]
 8002708:	4654      	mov	r4, sl
 800270a:	2000      	movs	r0, #0
 800270c:	f04f 0c0a 	mov.w	ip, #10
 8002710:	4621      	mov	r1, r4
 8002712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002716:	3b30      	subs	r3, #48	; 0x30
 8002718:	2b09      	cmp	r3, #9
 800271a:	d94e      	bls.n	80027ba <_svfiprintf_r+0x17e>
 800271c:	b1b0      	cbz	r0, 800274c <_svfiprintf_r+0x110>
 800271e:	9207      	str	r2, [sp, #28]
 8002720:	e014      	b.n	800274c <_svfiprintf_r+0x110>
 8002722:	eba0 0308 	sub.w	r3, r0, r8
 8002726:	fa09 f303 	lsl.w	r3, r9, r3
 800272a:	4313      	orrs	r3, r2
 800272c:	9304      	str	r3, [sp, #16]
 800272e:	46a2      	mov	sl, r4
 8002730:	e7d2      	b.n	80026d8 <_svfiprintf_r+0x9c>
 8002732:	9b03      	ldr	r3, [sp, #12]
 8002734:	1d19      	adds	r1, r3, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	9103      	str	r1, [sp, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	bfbb      	ittet	lt
 800273e:	425b      	neglt	r3, r3
 8002740:	f042 0202 	orrlt.w	r2, r2, #2
 8002744:	9307      	strge	r3, [sp, #28]
 8002746:	9307      	strlt	r3, [sp, #28]
 8002748:	bfb8      	it	lt
 800274a:	9204      	strlt	r2, [sp, #16]
 800274c:	7823      	ldrb	r3, [r4, #0]
 800274e:	2b2e      	cmp	r3, #46	; 0x2e
 8002750:	d10c      	bne.n	800276c <_svfiprintf_r+0x130>
 8002752:	7863      	ldrb	r3, [r4, #1]
 8002754:	2b2a      	cmp	r3, #42	; 0x2a
 8002756:	d135      	bne.n	80027c4 <_svfiprintf_r+0x188>
 8002758:	9b03      	ldr	r3, [sp, #12]
 800275a:	1d1a      	adds	r2, r3, #4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	9203      	str	r2, [sp, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	bfb8      	it	lt
 8002764:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002768:	3402      	adds	r4, #2
 800276a:	9305      	str	r3, [sp, #20]
 800276c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002838 <_svfiprintf_r+0x1fc>
 8002770:	7821      	ldrb	r1, [r4, #0]
 8002772:	2203      	movs	r2, #3
 8002774:	4650      	mov	r0, sl
 8002776:	f7fd fd43 	bl	8000200 <memchr>
 800277a:	b140      	cbz	r0, 800278e <_svfiprintf_r+0x152>
 800277c:	2340      	movs	r3, #64	; 0x40
 800277e:	eba0 000a 	sub.w	r0, r0, sl
 8002782:	fa03 f000 	lsl.w	r0, r3, r0
 8002786:	9b04      	ldr	r3, [sp, #16]
 8002788:	4303      	orrs	r3, r0
 800278a:	3401      	adds	r4, #1
 800278c:	9304      	str	r3, [sp, #16]
 800278e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002792:	4826      	ldr	r0, [pc, #152]	; (800282c <_svfiprintf_r+0x1f0>)
 8002794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002798:	2206      	movs	r2, #6
 800279a:	f7fd fd31 	bl	8000200 <memchr>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d038      	beq.n	8002814 <_svfiprintf_r+0x1d8>
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <_svfiprintf_r+0x1f4>)
 80027a4:	bb1b      	cbnz	r3, 80027ee <_svfiprintf_r+0x1b2>
 80027a6:	9b03      	ldr	r3, [sp, #12]
 80027a8:	3307      	adds	r3, #7
 80027aa:	f023 0307 	bic.w	r3, r3, #7
 80027ae:	3308      	adds	r3, #8
 80027b0:	9303      	str	r3, [sp, #12]
 80027b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027b4:	4433      	add	r3, r6
 80027b6:	9309      	str	r3, [sp, #36]	; 0x24
 80027b8:	e767      	b.n	800268a <_svfiprintf_r+0x4e>
 80027ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80027be:	460c      	mov	r4, r1
 80027c0:	2001      	movs	r0, #1
 80027c2:	e7a5      	b.n	8002710 <_svfiprintf_r+0xd4>
 80027c4:	2300      	movs	r3, #0
 80027c6:	3401      	adds	r4, #1
 80027c8:	9305      	str	r3, [sp, #20]
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 0c0a 	mov.w	ip, #10
 80027d0:	4620      	mov	r0, r4
 80027d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027d6:	3a30      	subs	r2, #48	; 0x30
 80027d8:	2a09      	cmp	r2, #9
 80027da:	d903      	bls.n	80027e4 <_svfiprintf_r+0x1a8>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0c5      	beq.n	800276c <_svfiprintf_r+0x130>
 80027e0:	9105      	str	r1, [sp, #20]
 80027e2:	e7c3      	b.n	800276c <_svfiprintf_r+0x130>
 80027e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80027e8:	4604      	mov	r4, r0
 80027ea:	2301      	movs	r3, #1
 80027ec:	e7f0      	b.n	80027d0 <_svfiprintf_r+0x194>
 80027ee:	ab03      	add	r3, sp, #12
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	462a      	mov	r2, r5
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <_svfiprintf_r+0x1f8>)
 80027f6:	a904      	add	r1, sp, #16
 80027f8:	4638      	mov	r0, r7
 80027fa:	f3af 8000 	nop.w
 80027fe:	1c42      	adds	r2, r0, #1
 8002800:	4606      	mov	r6, r0
 8002802:	d1d6      	bne.n	80027b2 <_svfiprintf_r+0x176>
 8002804:	89ab      	ldrh	r3, [r5, #12]
 8002806:	065b      	lsls	r3, r3, #25
 8002808:	f53f af2c 	bmi.w	8002664 <_svfiprintf_r+0x28>
 800280c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800280e:	b01d      	add	sp, #116	; 0x74
 8002810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002814:	ab03      	add	r3, sp, #12
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	462a      	mov	r2, r5
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <_svfiprintf_r+0x1f8>)
 800281c:	a904      	add	r1, sp, #16
 800281e:	4638      	mov	r0, r7
 8002820:	f000 f87a 	bl	8002918 <_printf_i>
 8002824:	e7eb      	b.n	80027fe <_svfiprintf_r+0x1c2>
 8002826:	bf00      	nop
 8002828:	08002e54 	.word	0x08002e54
 800282c:	08002e5e 	.word	0x08002e5e
 8002830:	00000000 	.word	0x00000000
 8002834:	08002585 	.word	0x08002585
 8002838:	08002e5a 	.word	0x08002e5a

0800283c <_printf_common>:
 800283c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002840:	4616      	mov	r6, r2
 8002842:	4699      	mov	r9, r3
 8002844:	688a      	ldr	r2, [r1, #8]
 8002846:	690b      	ldr	r3, [r1, #16]
 8002848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800284c:	4293      	cmp	r3, r2
 800284e:	bfb8      	it	lt
 8002850:	4613      	movlt	r3, r2
 8002852:	6033      	str	r3, [r6, #0]
 8002854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002858:	4607      	mov	r7, r0
 800285a:	460c      	mov	r4, r1
 800285c:	b10a      	cbz	r2, 8002862 <_printf_common+0x26>
 800285e:	3301      	adds	r3, #1
 8002860:	6033      	str	r3, [r6, #0]
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	0699      	lsls	r1, r3, #26
 8002866:	bf42      	ittt	mi
 8002868:	6833      	ldrmi	r3, [r6, #0]
 800286a:	3302      	addmi	r3, #2
 800286c:	6033      	strmi	r3, [r6, #0]
 800286e:	6825      	ldr	r5, [r4, #0]
 8002870:	f015 0506 	ands.w	r5, r5, #6
 8002874:	d106      	bne.n	8002884 <_printf_common+0x48>
 8002876:	f104 0a19 	add.w	sl, r4, #25
 800287a:	68e3      	ldr	r3, [r4, #12]
 800287c:	6832      	ldr	r2, [r6, #0]
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	42ab      	cmp	r3, r5
 8002882:	dc26      	bgt.n	80028d2 <_printf_common+0x96>
 8002884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002888:	1e13      	subs	r3, r2, #0
 800288a:	6822      	ldr	r2, [r4, #0]
 800288c:	bf18      	it	ne
 800288e:	2301      	movne	r3, #1
 8002890:	0692      	lsls	r2, r2, #26
 8002892:	d42b      	bmi.n	80028ec <_printf_common+0xb0>
 8002894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002898:	4649      	mov	r1, r9
 800289a:	4638      	mov	r0, r7
 800289c:	47c0      	blx	r8
 800289e:	3001      	adds	r0, #1
 80028a0:	d01e      	beq.n	80028e0 <_printf_common+0xa4>
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	68e5      	ldr	r5, [r4, #12]
 80028a6:	6832      	ldr	r2, [r6, #0]
 80028a8:	f003 0306 	and.w	r3, r3, #6
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	bf08      	it	eq
 80028b0:	1aad      	subeq	r5, r5, r2
 80028b2:	68a3      	ldr	r3, [r4, #8]
 80028b4:	6922      	ldr	r2, [r4, #16]
 80028b6:	bf0c      	ite	eq
 80028b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028bc:	2500      	movne	r5, #0
 80028be:	4293      	cmp	r3, r2
 80028c0:	bfc4      	itt	gt
 80028c2:	1a9b      	subgt	r3, r3, r2
 80028c4:	18ed      	addgt	r5, r5, r3
 80028c6:	2600      	movs	r6, #0
 80028c8:	341a      	adds	r4, #26
 80028ca:	42b5      	cmp	r5, r6
 80028cc:	d11a      	bne.n	8002904 <_printf_common+0xc8>
 80028ce:	2000      	movs	r0, #0
 80028d0:	e008      	b.n	80028e4 <_printf_common+0xa8>
 80028d2:	2301      	movs	r3, #1
 80028d4:	4652      	mov	r2, sl
 80028d6:	4649      	mov	r1, r9
 80028d8:	4638      	mov	r0, r7
 80028da:	47c0      	blx	r8
 80028dc:	3001      	adds	r0, #1
 80028de:	d103      	bne.n	80028e8 <_printf_common+0xac>
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028e8:	3501      	adds	r5, #1
 80028ea:	e7c6      	b.n	800287a <_printf_common+0x3e>
 80028ec:	18e1      	adds	r1, r4, r3
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	2030      	movs	r0, #48	; 0x30
 80028f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028f6:	4422      	add	r2, r4
 80028f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002900:	3302      	adds	r3, #2
 8002902:	e7c7      	b.n	8002894 <_printf_common+0x58>
 8002904:	2301      	movs	r3, #1
 8002906:	4622      	mov	r2, r4
 8002908:	4649      	mov	r1, r9
 800290a:	4638      	mov	r0, r7
 800290c:	47c0      	blx	r8
 800290e:	3001      	adds	r0, #1
 8002910:	d0e6      	beq.n	80028e0 <_printf_common+0xa4>
 8002912:	3601      	adds	r6, #1
 8002914:	e7d9      	b.n	80028ca <_printf_common+0x8e>
	...

08002918 <_printf_i>:
 8002918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800291c:	460c      	mov	r4, r1
 800291e:	4691      	mov	r9, r2
 8002920:	7e27      	ldrb	r7, [r4, #24]
 8002922:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002924:	2f78      	cmp	r7, #120	; 0x78
 8002926:	4680      	mov	r8, r0
 8002928:	469a      	mov	sl, r3
 800292a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800292e:	d807      	bhi.n	8002940 <_printf_i+0x28>
 8002930:	2f62      	cmp	r7, #98	; 0x62
 8002932:	d80a      	bhi.n	800294a <_printf_i+0x32>
 8002934:	2f00      	cmp	r7, #0
 8002936:	f000 80d8 	beq.w	8002aea <_printf_i+0x1d2>
 800293a:	2f58      	cmp	r7, #88	; 0x58
 800293c:	f000 80a3 	beq.w	8002a86 <_printf_i+0x16e>
 8002940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002948:	e03a      	b.n	80029c0 <_printf_i+0xa8>
 800294a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800294e:	2b15      	cmp	r3, #21
 8002950:	d8f6      	bhi.n	8002940 <_printf_i+0x28>
 8002952:	a001      	add	r0, pc, #4	; (adr r0, 8002958 <_printf_i+0x40>)
 8002954:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002958:	080029b1 	.word	0x080029b1
 800295c:	080029c5 	.word	0x080029c5
 8002960:	08002941 	.word	0x08002941
 8002964:	08002941 	.word	0x08002941
 8002968:	08002941 	.word	0x08002941
 800296c:	08002941 	.word	0x08002941
 8002970:	080029c5 	.word	0x080029c5
 8002974:	08002941 	.word	0x08002941
 8002978:	08002941 	.word	0x08002941
 800297c:	08002941 	.word	0x08002941
 8002980:	08002941 	.word	0x08002941
 8002984:	08002ad1 	.word	0x08002ad1
 8002988:	080029f5 	.word	0x080029f5
 800298c:	08002ab3 	.word	0x08002ab3
 8002990:	08002941 	.word	0x08002941
 8002994:	08002941 	.word	0x08002941
 8002998:	08002af3 	.word	0x08002af3
 800299c:	08002941 	.word	0x08002941
 80029a0:	080029f5 	.word	0x080029f5
 80029a4:	08002941 	.word	0x08002941
 80029a8:	08002941 	.word	0x08002941
 80029ac:	08002abb 	.word	0x08002abb
 80029b0:	680b      	ldr	r3, [r1, #0]
 80029b2:	1d1a      	adds	r2, r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	600a      	str	r2, [r1, #0]
 80029b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0a3      	b.n	8002b0c <_printf_i+0x1f4>
 80029c4:	6825      	ldr	r5, [r4, #0]
 80029c6:	6808      	ldr	r0, [r1, #0]
 80029c8:	062e      	lsls	r6, r5, #24
 80029ca:	f100 0304 	add.w	r3, r0, #4
 80029ce:	d50a      	bpl.n	80029e6 <_printf_i+0xce>
 80029d0:	6805      	ldr	r5, [r0, #0]
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	da03      	bge.n	80029e0 <_printf_i+0xc8>
 80029d8:	232d      	movs	r3, #45	; 0x2d
 80029da:	426d      	negs	r5, r5
 80029dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e0:	485e      	ldr	r0, [pc, #376]	; (8002b5c <_printf_i+0x244>)
 80029e2:	230a      	movs	r3, #10
 80029e4:	e019      	b.n	8002a1a <_printf_i+0x102>
 80029e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80029ea:	6805      	ldr	r5, [r0, #0]
 80029ec:	600b      	str	r3, [r1, #0]
 80029ee:	bf18      	it	ne
 80029f0:	b22d      	sxthne	r5, r5
 80029f2:	e7ef      	b.n	80029d4 <_printf_i+0xbc>
 80029f4:	680b      	ldr	r3, [r1, #0]
 80029f6:	6825      	ldr	r5, [r4, #0]
 80029f8:	1d18      	adds	r0, r3, #4
 80029fa:	6008      	str	r0, [r1, #0]
 80029fc:	0628      	lsls	r0, r5, #24
 80029fe:	d501      	bpl.n	8002a04 <_printf_i+0xec>
 8002a00:	681d      	ldr	r5, [r3, #0]
 8002a02:	e002      	b.n	8002a0a <_printf_i+0xf2>
 8002a04:	0669      	lsls	r1, r5, #25
 8002a06:	d5fb      	bpl.n	8002a00 <_printf_i+0xe8>
 8002a08:	881d      	ldrh	r5, [r3, #0]
 8002a0a:	4854      	ldr	r0, [pc, #336]	; (8002b5c <_printf_i+0x244>)
 8002a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8002a0e:	bf0c      	ite	eq
 8002a10:	2308      	moveq	r3, #8
 8002a12:	230a      	movne	r3, #10
 8002a14:	2100      	movs	r1, #0
 8002a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a1a:	6866      	ldr	r6, [r4, #4]
 8002a1c:	60a6      	str	r6, [r4, #8]
 8002a1e:	2e00      	cmp	r6, #0
 8002a20:	bfa2      	ittt	ge
 8002a22:	6821      	ldrge	r1, [r4, #0]
 8002a24:	f021 0104 	bicge.w	r1, r1, #4
 8002a28:	6021      	strge	r1, [r4, #0]
 8002a2a:	b90d      	cbnz	r5, 8002a30 <_printf_i+0x118>
 8002a2c:	2e00      	cmp	r6, #0
 8002a2e:	d04d      	beq.n	8002acc <_printf_i+0x1b4>
 8002a30:	4616      	mov	r6, r2
 8002a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a36:	fb03 5711 	mls	r7, r3, r1, r5
 8002a3a:	5dc7      	ldrb	r7, [r0, r7]
 8002a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a40:	462f      	mov	r7, r5
 8002a42:	42bb      	cmp	r3, r7
 8002a44:	460d      	mov	r5, r1
 8002a46:	d9f4      	bls.n	8002a32 <_printf_i+0x11a>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d10b      	bne.n	8002a64 <_printf_i+0x14c>
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	07df      	lsls	r7, r3, #31
 8002a50:	d508      	bpl.n	8002a64 <_printf_i+0x14c>
 8002a52:	6923      	ldr	r3, [r4, #16]
 8002a54:	6861      	ldr	r1, [r4, #4]
 8002a56:	4299      	cmp	r1, r3
 8002a58:	bfde      	ittt	le
 8002a5a:	2330      	movle	r3, #48	; 0x30
 8002a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a60:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002a64:	1b92      	subs	r2, r2, r6
 8002a66:	6122      	str	r2, [r4, #16]
 8002a68:	f8cd a000 	str.w	sl, [sp]
 8002a6c:	464b      	mov	r3, r9
 8002a6e:	aa03      	add	r2, sp, #12
 8002a70:	4621      	mov	r1, r4
 8002a72:	4640      	mov	r0, r8
 8002a74:	f7ff fee2 	bl	800283c <_printf_common>
 8002a78:	3001      	adds	r0, #1
 8002a7a:	d14c      	bne.n	8002b16 <_printf_i+0x1fe>
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a80:	b004      	add	sp, #16
 8002a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a86:	4835      	ldr	r0, [pc, #212]	; (8002b5c <_printf_i+0x244>)
 8002a88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	680e      	ldr	r6, [r1, #0]
 8002a90:	061f      	lsls	r7, r3, #24
 8002a92:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a96:	600e      	str	r6, [r1, #0]
 8002a98:	d514      	bpl.n	8002ac4 <_printf_i+0x1ac>
 8002a9a:	07d9      	lsls	r1, r3, #31
 8002a9c:	bf44      	itt	mi
 8002a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8002aa2:	6023      	strmi	r3, [r4, #0]
 8002aa4:	b91d      	cbnz	r5, 8002aae <_printf_i+0x196>
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	f023 0320 	bic.w	r3, r3, #32
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	2310      	movs	r3, #16
 8002ab0:	e7b0      	b.n	8002a14 <_printf_i+0xfc>
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	f043 0320 	orr.w	r3, r3, #32
 8002ab8:	6023      	str	r3, [r4, #0]
 8002aba:	2378      	movs	r3, #120	; 0x78
 8002abc:	4828      	ldr	r0, [pc, #160]	; (8002b60 <_printf_i+0x248>)
 8002abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ac2:	e7e3      	b.n	8002a8c <_printf_i+0x174>
 8002ac4:	065e      	lsls	r6, r3, #25
 8002ac6:	bf48      	it	mi
 8002ac8:	b2ad      	uxthmi	r5, r5
 8002aca:	e7e6      	b.n	8002a9a <_printf_i+0x182>
 8002acc:	4616      	mov	r6, r2
 8002ace:	e7bb      	b.n	8002a48 <_printf_i+0x130>
 8002ad0:	680b      	ldr	r3, [r1, #0]
 8002ad2:	6826      	ldr	r6, [r4, #0]
 8002ad4:	6960      	ldr	r0, [r4, #20]
 8002ad6:	1d1d      	adds	r5, r3, #4
 8002ad8:	600d      	str	r5, [r1, #0]
 8002ada:	0635      	lsls	r5, r6, #24
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	d501      	bpl.n	8002ae4 <_printf_i+0x1cc>
 8002ae0:	6018      	str	r0, [r3, #0]
 8002ae2:	e002      	b.n	8002aea <_printf_i+0x1d2>
 8002ae4:	0671      	lsls	r1, r6, #25
 8002ae6:	d5fb      	bpl.n	8002ae0 <_printf_i+0x1c8>
 8002ae8:	8018      	strh	r0, [r3, #0]
 8002aea:	2300      	movs	r3, #0
 8002aec:	6123      	str	r3, [r4, #16]
 8002aee:	4616      	mov	r6, r2
 8002af0:	e7ba      	b.n	8002a68 <_printf_i+0x150>
 8002af2:	680b      	ldr	r3, [r1, #0]
 8002af4:	1d1a      	adds	r2, r3, #4
 8002af6:	600a      	str	r2, [r1, #0]
 8002af8:	681e      	ldr	r6, [r3, #0]
 8002afa:	6862      	ldr	r2, [r4, #4]
 8002afc:	2100      	movs	r1, #0
 8002afe:	4630      	mov	r0, r6
 8002b00:	f7fd fb7e 	bl	8000200 <memchr>
 8002b04:	b108      	cbz	r0, 8002b0a <_printf_i+0x1f2>
 8002b06:	1b80      	subs	r0, r0, r6
 8002b08:	6060      	str	r0, [r4, #4]
 8002b0a:	6863      	ldr	r3, [r4, #4]
 8002b0c:	6123      	str	r3, [r4, #16]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b14:	e7a8      	b.n	8002a68 <_printf_i+0x150>
 8002b16:	6923      	ldr	r3, [r4, #16]
 8002b18:	4632      	mov	r2, r6
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	47d0      	blx	sl
 8002b20:	3001      	adds	r0, #1
 8002b22:	d0ab      	beq.n	8002a7c <_printf_i+0x164>
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	079b      	lsls	r3, r3, #30
 8002b28:	d413      	bmi.n	8002b52 <_printf_i+0x23a>
 8002b2a:	68e0      	ldr	r0, [r4, #12]
 8002b2c:	9b03      	ldr	r3, [sp, #12]
 8002b2e:	4298      	cmp	r0, r3
 8002b30:	bfb8      	it	lt
 8002b32:	4618      	movlt	r0, r3
 8002b34:	e7a4      	b.n	8002a80 <_printf_i+0x168>
 8002b36:	2301      	movs	r3, #1
 8002b38:	4632      	mov	r2, r6
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	4640      	mov	r0, r8
 8002b3e:	47d0      	blx	sl
 8002b40:	3001      	adds	r0, #1
 8002b42:	d09b      	beq.n	8002a7c <_printf_i+0x164>
 8002b44:	3501      	adds	r5, #1
 8002b46:	68e3      	ldr	r3, [r4, #12]
 8002b48:	9903      	ldr	r1, [sp, #12]
 8002b4a:	1a5b      	subs	r3, r3, r1
 8002b4c:	42ab      	cmp	r3, r5
 8002b4e:	dcf2      	bgt.n	8002b36 <_printf_i+0x21e>
 8002b50:	e7eb      	b.n	8002b2a <_printf_i+0x212>
 8002b52:	2500      	movs	r5, #0
 8002b54:	f104 0619 	add.w	r6, r4, #25
 8002b58:	e7f5      	b.n	8002b46 <_printf_i+0x22e>
 8002b5a:	bf00      	nop
 8002b5c:	08002e65 	.word	0x08002e65
 8002b60:	08002e76 	.word	0x08002e76

08002b64 <memcpy>:
 8002b64:	440a      	add	r2, r1
 8002b66:	4291      	cmp	r1, r2
 8002b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002b6c:	d100      	bne.n	8002b70 <memcpy+0xc>
 8002b6e:	4770      	bx	lr
 8002b70:	b510      	push	{r4, lr}
 8002b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b7a:	4291      	cmp	r1, r2
 8002b7c:	d1f9      	bne.n	8002b72 <memcpy+0xe>
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <memmove>:
 8002b80:	4288      	cmp	r0, r1
 8002b82:	b510      	push	{r4, lr}
 8002b84:	eb01 0402 	add.w	r4, r1, r2
 8002b88:	d902      	bls.n	8002b90 <memmove+0x10>
 8002b8a:	4284      	cmp	r4, r0
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	d807      	bhi.n	8002ba0 <memmove+0x20>
 8002b90:	1e43      	subs	r3, r0, #1
 8002b92:	42a1      	cmp	r1, r4
 8002b94:	d008      	beq.n	8002ba8 <memmove+0x28>
 8002b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b9e:	e7f8      	b.n	8002b92 <memmove+0x12>
 8002ba0:	4402      	add	r2, r0
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	428a      	cmp	r2, r1
 8002ba6:	d100      	bne.n	8002baa <memmove+0x2a>
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002bb2:	e7f7      	b.n	8002ba4 <memmove+0x24>

08002bb4 <_free_r>:
 8002bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bb6:	2900      	cmp	r1, #0
 8002bb8:	d048      	beq.n	8002c4c <_free_r+0x98>
 8002bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bbe:	9001      	str	r0, [sp, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8002bc6:	bfb8      	it	lt
 8002bc8:	18e4      	addlt	r4, r4, r3
 8002bca:	f000 f8d3 	bl	8002d74 <__malloc_lock>
 8002bce:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <_free_r+0x9c>)
 8002bd0:	9801      	ldr	r0, [sp, #4]
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	4615      	mov	r5, r2
 8002bd6:	b933      	cbnz	r3, 8002be6 <_free_r+0x32>
 8002bd8:	6063      	str	r3, [r4, #4]
 8002bda:	6014      	str	r4, [r2, #0]
 8002bdc:	b003      	add	sp, #12
 8002bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002be2:	f000 b8cd 	b.w	8002d80 <__malloc_unlock>
 8002be6:	42a3      	cmp	r3, r4
 8002be8:	d90b      	bls.n	8002c02 <_free_r+0x4e>
 8002bea:	6821      	ldr	r1, [r4, #0]
 8002bec:	1862      	adds	r2, r4, r1
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	bf04      	itt	eq
 8002bf2:	681a      	ldreq	r2, [r3, #0]
 8002bf4:	685b      	ldreq	r3, [r3, #4]
 8002bf6:	6063      	str	r3, [r4, #4]
 8002bf8:	bf04      	itt	eq
 8002bfa:	1852      	addeq	r2, r2, r1
 8002bfc:	6022      	streq	r2, [r4, #0]
 8002bfe:	602c      	str	r4, [r5, #0]
 8002c00:	e7ec      	b.n	8002bdc <_free_r+0x28>
 8002c02:	461a      	mov	r2, r3
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	b10b      	cbz	r3, 8002c0c <_free_r+0x58>
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	d9fa      	bls.n	8002c02 <_free_r+0x4e>
 8002c0c:	6811      	ldr	r1, [r2, #0]
 8002c0e:	1855      	adds	r5, r2, r1
 8002c10:	42a5      	cmp	r5, r4
 8002c12:	d10b      	bne.n	8002c2c <_free_r+0x78>
 8002c14:	6824      	ldr	r4, [r4, #0]
 8002c16:	4421      	add	r1, r4
 8002c18:	1854      	adds	r4, r2, r1
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	d1dd      	bne.n	8002bdc <_free_r+0x28>
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	6053      	str	r3, [r2, #4]
 8002c26:	4421      	add	r1, r4
 8002c28:	6011      	str	r1, [r2, #0]
 8002c2a:	e7d7      	b.n	8002bdc <_free_r+0x28>
 8002c2c:	d902      	bls.n	8002c34 <_free_r+0x80>
 8002c2e:	230c      	movs	r3, #12
 8002c30:	6003      	str	r3, [r0, #0]
 8002c32:	e7d3      	b.n	8002bdc <_free_r+0x28>
 8002c34:	6825      	ldr	r5, [r4, #0]
 8002c36:	1961      	adds	r1, r4, r5
 8002c38:	428b      	cmp	r3, r1
 8002c3a:	bf04      	itt	eq
 8002c3c:	6819      	ldreq	r1, [r3, #0]
 8002c3e:	685b      	ldreq	r3, [r3, #4]
 8002c40:	6063      	str	r3, [r4, #4]
 8002c42:	bf04      	itt	eq
 8002c44:	1949      	addeq	r1, r1, r5
 8002c46:	6021      	streq	r1, [r4, #0]
 8002c48:	6054      	str	r4, [r2, #4]
 8002c4a:	e7c7      	b.n	8002bdc <_free_r+0x28>
 8002c4c:	b003      	add	sp, #12
 8002c4e:	bd30      	pop	{r4, r5, pc}
 8002c50:	200000f4 	.word	0x200000f4

08002c54 <_malloc_r>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	1ccd      	adds	r5, r1, #3
 8002c58:	f025 0503 	bic.w	r5, r5, #3
 8002c5c:	3508      	adds	r5, #8
 8002c5e:	2d0c      	cmp	r5, #12
 8002c60:	bf38      	it	cc
 8002c62:	250c      	movcc	r5, #12
 8002c64:	2d00      	cmp	r5, #0
 8002c66:	4606      	mov	r6, r0
 8002c68:	db01      	blt.n	8002c6e <_malloc_r+0x1a>
 8002c6a:	42a9      	cmp	r1, r5
 8002c6c:	d903      	bls.n	8002c76 <_malloc_r+0x22>
 8002c6e:	230c      	movs	r3, #12
 8002c70:	6033      	str	r3, [r6, #0]
 8002c72:	2000      	movs	r0, #0
 8002c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c76:	f000 f87d 	bl	8002d74 <__malloc_lock>
 8002c7a:	4921      	ldr	r1, [pc, #132]	; (8002d00 <_malloc_r+0xac>)
 8002c7c:	680a      	ldr	r2, [r1, #0]
 8002c7e:	4614      	mov	r4, r2
 8002c80:	b99c      	cbnz	r4, 8002caa <_malloc_r+0x56>
 8002c82:	4f20      	ldr	r7, [pc, #128]	; (8002d04 <_malloc_r+0xb0>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b923      	cbnz	r3, 8002c92 <_malloc_r+0x3e>
 8002c88:	4621      	mov	r1, r4
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f000 f862 	bl	8002d54 <_sbrk_r>
 8002c90:	6038      	str	r0, [r7, #0]
 8002c92:	4629      	mov	r1, r5
 8002c94:	4630      	mov	r0, r6
 8002c96:	f000 f85d 	bl	8002d54 <_sbrk_r>
 8002c9a:	1c43      	adds	r3, r0, #1
 8002c9c:	d123      	bne.n	8002ce6 <_malloc_r+0x92>
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	6033      	str	r3, [r6, #0]
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f000 f86c 	bl	8002d80 <__malloc_unlock>
 8002ca8:	e7e3      	b.n	8002c72 <_malloc_r+0x1e>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	1b5b      	subs	r3, r3, r5
 8002cae:	d417      	bmi.n	8002ce0 <_malloc_r+0x8c>
 8002cb0:	2b0b      	cmp	r3, #11
 8002cb2:	d903      	bls.n	8002cbc <_malloc_r+0x68>
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	441c      	add	r4, r3
 8002cb8:	6025      	str	r5, [r4, #0]
 8002cba:	e004      	b.n	8002cc6 <_malloc_r+0x72>
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	42a2      	cmp	r2, r4
 8002cc0:	bf0c      	ite	eq
 8002cc2:	600b      	streq	r3, [r1, #0]
 8002cc4:	6053      	strne	r3, [r2, #4]
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	f000 f85a 	bl	8002d80 <__malloc_unlock>
 8002ccc:	f104 000b 	add.w	r0, r4, #11
 8002cd0:	1d23      	adds	r3, r4, #4
 8002cd2:	f020 0007 	bic.w	r0, r0, #7
 8002cd6:	1ac2      	subs	r2, r0, r3
 8002cd8:	d0cc      	beq.n	8002c74 <_malloc_r+0x20>
 8002cda:	1a1b      	subs	r3, r3, r0
 8002cdc:	50a3      	str	r3, [r4, r2]
 8002cde:	e7c9      	b.n	8002c74 <_malloc_r+0x20>
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	6864      	ldr	r4, [r4, #4]
 8002ce4:	e7cc      	b.n	8002c80 <_malloc_r+0x2c>
 8002ce6:	1cc4      	adds	r4, r0, #3
 8002ce8:	f024 0403 	bic.w	r4, r4, #3
 8002cec:	42a0      	cmp	r0, r4
 8002cee:	d0e3      	beq.n	8002cb8 <_malloc_r+0x64>
 8002cf0:	1a21      	subs	r1, r4, r0
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f000 f82e 	bl	8002d54 <_sbrk_r>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d1dd      	bne.n	8002cb8 <_malloc_r+0x64>
 8002cfc:	e7cf      	b.n	8002c9e <_malloc_r+0x4a>
 8002cfe:	bf00      	nop
 8002d00:	200000f4 	.word	0x200000f4
 8002d04:	200000f8 	.word	0x200000f8

08002d08 <_realloc_r>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	4607      	mov	r7, r0
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	460e      	mov	r6, r1
 8002d10:	b921      	cbnz	r1, 8002d1c <_realloc_r+0x14>
 8002d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d16:	4611      	mov	r1, r2
 8002d18:	f7ff bf9c 	b.w	8002c54 <_malloc_r>
 8002d1c:	b922      	cbnz	r2, 8002d28 <_realloc_r+0x20>
 8002d1e:	f7ff ff49 	bl	8002bb4 <_free_r>
 8002d22:	4625      	mov	r5, r4
 8002d24:	4628      	mov	r0, r5
 8002d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d28:	f000 f830 	bl	8002d8c <_malloc_usable_size_r>
 8002d2c:	42a0      	cmp	r0, r4
 8002d2e:	d20f      	bcs.n	8002d50 <_realloc_r+0x48>
 8002d30:	4621      	mov	r1, r4
 8002d32:	4638      	mov	r0, r7
 8002d34:	f7ff ff8e 	bl	8002c54 <_malloc_r>
 8002d38:	4605      	mov	r5, r0
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d0f2      	beq.n	8002d24 <_realloc_r+0x1c>
 8002d3e:	4631      	mov	r1, r6
 8002d40:	4622      	mov	r2, r4
 8002d42:	f7ff ff0f 	bl	8002b64 <memcpy>
 8002d46:	4631      	mov	r1, r6
 8002d48:	4638      	mov	r0, r7
 8002d4a:	f7ff ff33 	bl	8002bb4 <_free_r>
 8002d4e:	e7e9      	b.n	8002d24 <_realloc_r+0x1c>
 8002d50:	4635      	mov	r5, r6
 8002d52:	e7e7      	b.n	8002d24 <_realloc_r+0x1c>

08002d54 <_sbrk_r>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	4d06      	ldr	r5, [pc, #24]	; (8002d70 <_sbrk_r+0x1c>)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	602b      	str	r3, [r5, #0]
 8002d60:	f7fd ff06 	bl	8000b70 <_sbrk>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d102      	bne.n	8002d6e <_sbrk_r+0x1a>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b103      	cbz	r3, 8002d6e <_sbrk_r+0x1a>
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	20000100 	.word	0x20000100

08002d74 <__malloc_lock>:
 8002d74:	4801      	ldr	r0, [pc, #4]	; (8002d7c <__malloc_lock+0x8>)
 8002d76:	f000 b811 	b.w	8002d9c <__retarget_lock_acquire_recursive>
 8002d7a:	bf00      	nop
 8002d7c:	20000108 	.word	0x20000108

08002d80 <__malloc_unlock>:
 8002d80:	4801      	ldr	r0, [pc, #4]	; (8002d88 <__malloc_unlock+0x8>)
 8002d82:	f000 b80c 	b.w	8002d9e <__retarget_lock_release_recursive>
 8002d86:	bf00      	nop
 8002d88:	20000108 	.word	0x20000108

08002d8c <_malloc_usable_size_r>:
 8002d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d90:	1f18      	subs	r0, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bfbc      	itt	lt
 8002d96:	580b      	ldrlt	r3, [r1, r0]
 8002d98:	18c0      	addlt	r0, r0, r3
 8002d9a:	4770      	bx	lr

08002d9c <__retarget_lock_acquire_recursive>:
 8002d9c:	4770      	bx	lr

08002d9e <__retarget_lock_release_recursive>:
 8002d9e:	4770      	bx	lr

08002da0 <_init>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr

08002dac <_fini>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr
